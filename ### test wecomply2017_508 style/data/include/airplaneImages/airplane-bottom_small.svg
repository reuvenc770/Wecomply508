<?xml version="1.0" encoding="UTF-8"?>
<xsl:stylesheet id="1.0" version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:wc="http://www.wecomply.com/Course" exclude-result-prefixes="wc" xmlns:weo="urn:WeComplyExtension" extension-element-prefixes="weo">
    <xsl:output method="html"/>

    <!-- define Last Modified date / time -->
    <xsl:variable name="LastModified" select="'2010-08-12 15:03:07Z'"/>
    <xsl:variable name="TestXSLT" select="'false'"/>

    <!-- define input parameters -->
    <xsl:param name="PageType">divs</xsl:param>
    <xsl:param name="OutputPage" select="''"/>
    <xsl:param name="Offline" select="'false'"/>
    <!-- this is really the Printable flag -->
    <xsl:param name="Packaged" select="'false'"/>
    <!-- offline package -->
    <xsl:param name="StaticHtmlPath">htm</xsl:param>
    <xsl:param name="ScriptPath">js</xsl:param>
    <xsl:param name="ImagePath">img</xsl:param>
    <!-- for xsl hardcoded image files... -->
    <xsl:param name="MediaPath">media</xsl:param>
    <!-- for cms specified image files... -->
    <xsl:param name="LMSClientPath" select="noLMS"/>
    <xsl:param name="StylePath">.</xsl:param>
    <xsl:param name="SystemCSS">style.css</xsl:param>
    <xsl:param name="ProgramCSS">program.css</xsl:param>

    <!-- define some global constants -->
    <xsl:variable name="Printable" select="$Offline"/>
    <!-- need to differentiate between Printable and the real Offline package!!! -->
    <xsl:variable name="SingleQuote">'</xsl:variable>
    <xsl:variable name="DoubleQuote">"</xsl:variable>
    <xsl:variable name="EscapedSingleQuote">\'</xsl:variable>
    <xsl:variable name="EscapedDoubleQuote">\"</xsl:variable>
    <xsl:variable name="Space" select="' '"/>
    <!-- MS caveat!!! Use $Space instead of "<xsl:text> </xsl:text>" MS doesn't render it!!! -->
    <xsl:variable name="ChapterCount" select="count(//wc:Chapters/wc:Chapter)"/>
    <xsl:variable name="DivCount" select="$ChapterCount + count(//wc:Course/wc:Acknowledgment)"/>
    <xsl:variable name="GameChoicePage" select="$DivCount + 1"/>
    <xsl:variable name="TotalGames">
        <xsl:value-of select="count(/wc:Course/wc:Quiz/wc:Games/wc:Game)"/>
    </xsl:variable>
    <xsl:variable name="NumQuizLite">
        <xsl:choose>
            <xsl:when test="count(/wc:Course/wc:Quiz/wc:Games/wc:Game[@variety = 'QuizLite' or @variety = 'BothQuizLite']) &gt; 0">
                <xsl:value-of select="1"/>
            </xsl:when>
            <xsl:otherwise>
                <xsl:value-of select="0"/>
            </xsl:otherwise>
        </xsl:choose>
    </xsl:variable>
    <xsl:variable name="NumCheezChase">
        <xsl:choose>
            <xsl:when test="count(/wc:Course/wc:Quiz/wc:Games/wc:Game[@variety = 'CheezChase' or @variety = 'BothCheezChase']) &gt; 0">
                <xsl:value-of select="1"/>
            </xsl:when>
            <xsl:otherwise>
                <xsl:value-of select="0"/>
            </xsl:otherwise>
        </xsl:choose>
    </xsl:variable>
    <xsl:variable name="NumCEO">
        <xsl:choose>
            <xsl:when test="count(/wc:Course/wc:Quiz/wc:Games/wc:Game[@variety = 'CEO' or @variety = 'BothCEO']) &gt; 0">
                <xsl:value-of select="1"/>
            </xsl:when>
            <xsl:otherwise>
                <xsl:value-of select="0"/>
            </xsl:otherwise>
        </xsl:choose>
    </xsl:variable>
    <xsl:variable name="NumQuizLiteForJAWS">
        <xsl:choose>
            <xsl:when test="count(/wc:Course/wc:Quiz/wc:Games/wc:Game[@variety = 'QuizLiteForJAWS']) &gt; 0">
                <xsl:value-of select="1"/>
            </xsl:when>
            <xsl:otherwise>
                <xsl:value-of select="0"/>
            </xsl:otherwise>
        </xsl:choose>
    </xsl:variable>
    <xsl:variable name="NumBoardGame">
        <xsl:choose>
            <xsl:when test="count(/wc:Course/wc:Quiz/wc:Games/wc:Game[@variety = 'BoardGame']) &gt; 0">
                <xsl:value-of select="1"/>
            </xsl:when>
            <xsl:otherwise>
                <xsl:value-of select="0"/>
            </xsl:otherwise>
        </xsl:choose>
    </xsl:variable>
    <xsl:variable name="NumHopToTheTop">
        <xsl:choose>
            <xsl:when test="count(/wc:Course/wc:Quiz/wc:Games/wc:Game[@variety = 'HopToTheTop']) &gt; 0">
                <xsl:value-of select="1"/>
            </xsl:when>
            <xsl:otherwise>
                <xsl:value-of select="0"/>
            </xsl:otherwise>
        </xsl:choose>
    </xsl:variable>
    <xsl:variable name="NumGamesAvailable">
        <xsl:choose>
            <!-- From the games specified, use only games that can be displayed in this format -->
            <xsl:when test="($NumQuizLite + $NumCheezChase + $NumCEO + $NumQuizLiteForJAWS + $NumBoardGame + $NumHopToTheTop) &gt; 0">
                <xsl:value-of select="$NumQuizLite + $NumCheezChase + $NumCEO + $NumQuizLiteForJAWS + $NumBoardGame + $NumHopToTheTop"/>
            </xsl:when>
            <!-- From the games specified, no games can be displayed, so use default for this format -->
            <xsl:when test="$TotalGames &gt; 0">
                <xsl:value-of select="1"/>
            </xsl:when>
            <!-- No games specified -->
            <xsl:otherwise>
                <xsl:value-of select="0"/>
            </xsl:otherwise>
        </xsl:choose>
    </xsl:variable>
    <xsl:variable name="FirstGamePosition">
        <xsl:call-template name="GetFirstGamePosition">
            <xsl:with-param name="pos" select="1"/>
        </xsl:call-template>
    </xsl:variable>
    <xsl:variable name="GamePage">
        <xsl:choose>
            <xsl:when test="$NumGamesAvailable = 0">
                <xsl:value-of select="'None'"/>
            </xsl:when>
            <xsl:when test="$NumGamesAvailable &gt; 1">
                <xsl:value-of select="$DivCount + 2"/>
            </xsl:when>
            <xsl:otherwise>
                <xsl:value-of select="$DivCount + 1"/>
            </xsl:otherwise>
        </xsl:choose>
    </xsl:variable>
    <xsl:variable name="CertificatePage">
        <xsl:choose>
            <xsl:when test="$GamePage = 'None'">
                <xsl:value-of select="$DivCount + 1"/>
            </xsl:when>
            <xsl:otherwise>
                <xsl:value-of select="$GamePage + 1"/>
            </xsl:otherwise>
        </xsl:choose>
    </xsl:variable>
    <xsl:variable name="AckPage">
        <xsl:choose>
            <xsl:when test="count(/wc:Course/wc:Acknowledgment) = 0">
                <xsl:value-of select="0"/>
            </xsl:when>
            <xsl:otherwise>
                <xsl:value-of select="$ChapterCount + 1"/>
            </xsl:otherwise>
        </xsl:choose>
    </xsl:variable>
    <xsl:variable name="AckPrev" select="concat('javascript:NavigateDiv(', $AckPage, ',', $SingleQuote, 'NOACK', $SingleQuote, ')')"/>
    <xsl:variable name="AckNext" select="concat('javascript:NavigateDiv(', $AckPage, ',', string($AckPage + 1), ');')"/>
    <xsl:variable name="NoAckContinue" select="concat('javascript:g_bDoBookmarkUpdate=false;NavigateDiv(', $SingleQuote, 'NOACK', $SingleQuote, ',', string($AckPage + 1), ');reportNoAck(false);')"/>
    <xsl:variable name="elementPreview" select="count(/wc:Preview) &gt; 0"/>
    <xsl:variable name="ProgramName" select="//wc:Course/wc:Name"/>
    <xsl:variable name="Language">
        <xsl:choose>
            <xsl:when test="count(/wc:Preview) &gt; 0">
                <xsl:value-of select="number(/wc:Preview/@language)"/>
            </xsl:when>
            <xsl:otherwise>
                <xsl:value-of select="number(/wc:Course/@language)"/>
            </xsl:otherwise>
        </xsl:choose>
    </xsl:variable>

    <xsl:variable name="LanguageIsRtl">
        <xsl:choose>
            <xsl:when test="$Language = 1 or $Language = 32">
                <xsl:value-of select="1"/>
            </xsl:when>
            <xsl:otherwise>
                <xsl:value-of select="0"/>
            </xsl:otherwise>
        </xsl:choose>
    </xsl:variable>

    <xsl:variable name="HasFlash">
        <xsl:value-of select="//wc:Video/@variety='video/x-flv' or //wc:Illustration/@variety='application/x-shockwave-flash' or //wc:Audio/@variety='audio/x-flv'"/>
    </xsl:variable>
    <xsl:variable name="MinFlashVersion">8</xsl:variable>
    <!-- this could become a program parameter!! -->

    <!-- retrieve some company info -->
    <xsl:variable name="CompanyName" select="weo:GetCompanyInfo('name')"/>
    <xsl:variable name="CompanyAddress" select="weo:GetCompanyInfo('address1')"/>
    <xsl:variable name="CompanyCity" select="weo:GetCompanyInfo('address2')"/>
    <xsl:variable name="CompanyLogo" select="weo:GetCompanyInfo('logo')"/>
    <xsl:variable name="CompanyURL" select="weo:GetCompanyInfo('url')"/>
    <xsl:variable name="CompanyID" select="weo:GetCompanyInfo('id')"/>

    <!-- utility template to escape single (apostrophes) and double quotes in a string when used in javascript -->
    <!-- not needed for Offline -->
    <xsl:template name="cleanQuote">
        <xsl:param name="string" />
        <xsl:choose>
            <xsl:when test="$Offline = 'true'">
                <xsl:value-of select="$string" />
            </xsl:when>
            <xsl:when test="contains($string, $SingleQuote) and contains($string, $DoubleQuote)">
                <!-- need the previous test, otherwise if length for no quote is 0, and messes up -->
                <xsl:choose>
                    <xsl:when test="string-length(substring-before($string, $DoubleQuote)) &lt; string-length(substring-before($string, $SingleQuote))">
                        <!-- double quote is first -->
                        <xsl:value-of select="substring-before($string, $DoubleQuote)" />\"<xsl:call-template name="cleanQuote">
                            <xsl:with-param name="string" select="substring-after($string, $DoubleQuote)" />
                        </xsl:call-template>
                    </xsl:when>
                    <xsl:otherwise>
                        <!-- single quote is first -->
                        <xsl:value-of select="substring-before($string, $SingleQuote)" />\'<xsl:call-template name="cleanQuote">
                            <xsl:with-param name="string" select="substring-after($string, $SingleQuote)" />
                        </xsl:call-template>
                    </xsl:otherwise>
                </xsl:choose>
            </xsl:when>
            <xsl:when test="contains($string, $SingleQuote)">
                <!-- handle single quote -->
                <xsl:value-of select="substring-before($string, $SingleQuote)" />\'<xsl:call-template name="cleanQuote">
                    <xsl:with-param name="string" select="substring-after($string, $SingleQuote)" />
                </xsl:call-template>
            </xsl:when>
            <xsl:when test="contains($string, $DoubleQuote)">
                <!-- handle double quote -->
                <xsl:value-of select="substring-before($string, $DoubleQuote)" />\"<xsl:call-template name="cleanQuote">
                    <xsl:with-param name="string" select="substring-after($string, $DoubleQuote)" />
                </xsl:call-template>
            </xsl:when>
            <xsl:otherwise>
                <!-- doesn't contain any type of quote -->
                <xsl:value-of select="$string" />
            </xsl:otherwise>
        </xsl:choose>
    </xsl:template>

    <xsl:template name="undoCleanQuote">
        <xsl:param name="string" />
        <xsl:choose>
            <xsl:when test="contains($string, $EscapedSingleQuote) and contains($string, $EscapedDoubleQuote)">
                <!-- need the previous test, otherwise if length for no quote is 0, and messes up -->
                <xsl:choose>
                    <xsl:when test="string-length(substring-before($string, $EscapedDoubleQuote)) &lt; string-length(substring-before($string, $EscapedSingleQuote))">
                        <!-- double quote is first -->
                        <xsl:value-of select="substring-before($string, $EscapedDoubleQuote)" />&quot;<xsl:call-template name="undoCleanQuote">
                            <xsl:with-param name="string" select="substring-after($string, $EscapedDoubleQuote)" />
                        </xsl:call-template>
                    </xsl:when>
                    <xsl:otherwise>
                        <!-- single quote is first -->
                        <xsl:value-of select="substring-before($string, $EscapedSingleQuote)" />&apos;<xsl:call-template name="undoCleanQuote">
                            <xsl:with-param name="string" select="substring-after($string, $EscapedSingleQuote)" />
                        </xsl:call-template>
                    </xsl:otherwise>
                </xsl:choose>
            </xsl:when>
            <!-- remove any existing escaped quotes -->
            <xsl:when test="contains($string, $EscapedDoubleQuote)">
                <xsl:value-of select="substring-before($string, $EscapedDoubleQuote)" />&quot;<xsl:call-template name="undoCleanQuote">
                    <xsl:with-param name="string" select="substring-after($string, $EscapedDoubleQuote)" />
                </xsl:call-template>
            </xsl:when>
            <xsl:when test="contains($string, $EscapedSingleQuote)">
                <xsl:value-of select="substring-before($string, $EscapedSingleQuote)" />&apos;<xsl:call-template name="undoCleanQuote">
                    <xsl:with-param name="string" select="substring-after($string, $EscapedSingleQuote)" />
                </xsl:call-template>
            </xsl:when>
            <xsl:otherwise>
                <!-- doesn't contain any type of quote -->
                <xsl:value-of select="$string" />
            </xsl:otherwise>
        </xsl:choose>
    </xsl:template>

    <xsl:template name="GetFirstGamePosition">
        <xsl:param name="pos"/>
        <xsl:choose>
            <xsl:when test="$TotalGames &lt; $pos">
                <xsl:value-of select="0"/>
            </xsl:when>
            <xsl:when test="starts-with(/wc:Course/wc:Quiz/wc:Games/wc:Game[$pos]/@variety, 'Flash')">
                <xsl:call-template name="GetFirstGamePosition">
                    <xsl:with-param name="pos" select="$pos + 1"/>
                </xsl:call-template>
            </xsl:when>
            <xsl:otherwise>
                <xsl:value-of select="$pos"/>
            </xsl:otherwise>
        </xsl:choose>
    </xsl:template>

    <xsl:template match="wc:Preview">
        <xsl:if test="$Offline = 'true'">
            <xsl:message terminate="yes">
                <xsl:text>ERROR -> Preview AND Offline parameters are invalid together '</xsl:text>
            </xsl:message>
        </xsl:if>
        <xsl:call-template name="BuildCoursePages">
            <xsl:with-param name="PageType" select="translate($PageType, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz')"/>
        </xsl:call-template>
    </xsl:template>

    <xsl:template match="wc:Course">
        <xsl:call-template name="BuildCoursePages">
            <xsl:with-param name="PageType" select="translate($PageType, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz')"/>
        </xsl:call-template>
    </xsl:template>

    <!-- don't output anything we haven't called... -->
    <xsl:template match="*"/>

    <xsl:template name="BuildCoursePages">
        <xsl:param name="PageType"/>
        <xsl:text disable-output-escaping="yes">
			&lt;HTML</xsl:text>
        <xsl:if test="$LanguageIsRtl = 1"> dir="rtl"</xsl:if>
        <xsl:text disable-output-escaping="yes">&gt;
			</xsl:text>
        <xsl:call-template name="BuildPages">
            <xsl:with-param name="coursePreview" select="boolean('preview' = $PageType) and count(/wc:Course) &gt; 0"/>
        </xsl:call-template>
        <xsl:text disable-output-escaping="yes">
			&lt;/HTML&gt;
			</xsl:text>
    </xsl:template>

    <xsl:template name="BuildPages">
        <xsl:param name="coursePreview"/>

        <xsl:call-template name="BuildHead"/>

        <body id="idBody" onLoad="setTimeout('init()', 100)" onFocus="gotFocus()" onBlur="lostFocus()">

            <xsl:if test="$TestXSLT = 'true'">
                <div id="TestWarningDiv" style="display:block">
                    <font size="3" color="red">
                        <b>WARNING: This is Test XSL!!!</b>
                    </font>
                </div>
                Start:
                <div id="StartTimeDiv" style="display:block">
                </div>
                End:
                <div id="EndTimeDiv" style="display:block">
                </div>
                Elapsed:
                <div id="ElapsedDiv" style="display:block">
                </div>
            </xsl:if>

            <xsl:choose>
                <xsl:when test="$Offline = 'true'">
                    <xsl:call-template name="BuildOfflineScript"/>

                    <div id="TOC" style="display:block">
                        <xsl:call-template name="BuildOfflineTableOfContentsLayout"/>
                    </div>

                    <xsl:call-template name="BuildTheOfflineChapters"/>

                    <div id="pageBreak" style="display:none;page-break-before:always"/>
                    <xsl:call-template name="BuildOfflineQuizLayout"/>
                </xsl:when>
                <xsl:otherwise>
                    <DIV id="divWARN" align="CENTER" style="position:absolute;display:none">
                        <form>
                            <div class="WarningContainer">
                                <div class="WarningTextLayout">
                                    <span id="idWarnText" class="WarningText"></span>
                                </div>
                                <div class="WarningButtonLayout">
                                    <form>
                                        <span>
                                            <input id="idWarnBtn1" class="WarningButton" type="button" onclick="WarnContinue()" value="btn1"/>
                                            <input id="idWarnBtn2" class="WarningButton" type="button" onclick="RecheckConnectivity('WARN')" value="btn2"/>
                                        </span>
                                    </form>
                                </div>
                            </div>
                        </form>
                    </DIV>
                    <!-- DR [05/18/04] Introductory DIV to avoid blank screen -->
                    <DIV id="divINTRO" align="CENTER" style="padding-top:60px;width:165px;margin:0 auto;display:block">
                        <div class="introContainer" align="center" cellpadding="8">
                            <div id="tdIntroLoading" align="center">
                                <H3>
                                    <xsl:call-template name="BuildLocalizedString">
                                        <xsl:with-param name="KeyName" select="'LoadingIntro'"/>
                                    </xsl:call-template>
                                </H3>
                                <br/>
                                <img align="center" src="{$ImagePath}loading.gif" border="0" vspace="16" alt=""/>
                            </div>
                            <!--<xsl:if test="$HasFlash='true'">-->
                            <div id="tdIntroLoading1" align="center">
                                <!--<div id="FlashUpdate"></div>-->
                                <!--<xsl:call-template name="AddFlashCheck"/>-->
                            </div>
                            <!--</xsl:if>-->
                        </div>
                    </DIV>

                    <xsl:call-template name="BuildScript">
                        <xsl:with-param name="coursePreview" select="$coursePreview"/>
                    </xsl:call-template>

                    <xsl:if test="$elementPreview">
                        <xsl:call-template name="BuildElementPreview"/>
                    </xsl:if>

                    <xsl:if test="$LMSClientPath != 'noLMS' and not($coursePreview)">
                        <xsl:call-template name="BuildBookMarkPageLayout"/>
                    </xsl:if>

                    <xsl:call-template name="BuildTheChapters"/>

                    <xsl:call-template name="BuildTheAcknowledgment"/>
                    <xsl:if test="wc:Acknowledgment/wc:Refusal">
                        <xsl:call-template name="BuildTheRefusal"/>
                    </xsl:if>

                    <xsl:if test="count(/wc:Course/wc:Quiz) &gt; 0">
                        <!-- if only one game choice, Ack page goes directly to it! -->
                        <xsl:if test="$NumGamesAvailable &gt; 1">
                            <xsl:call-template name="BuildChooseGames"/>
                        </xsl:if>

                        <xsl:call-template name="BuildGames"/>
                    </xsl:if>

                    <xsl:call-template name="BuildTheCertificate"/>
                </xsl:otherwise>
            </xsl:choose>

        </body>
    </xsl:template>

    <xsl:template name="AddChapterIllustration">
        <xsl:for-each select="wc:Illustration">
            <xsl:call-template name="BuildChapterIllustration">
                <xsl:with-param name="ChapterNum" select="count(preceding::wc:Chapter)+1"/>
            </xsl:call-template>
        </xsl:for-each>
    </xsl:template>

    <xsl:template name="AddLinkBulletin">
        <xsl:for-each select="wc:LinkBulletins/wc:LinkBulletin">
            <xsl:call-template name="BuildDocLink">
                <xsl:with-param name="ChapterNum" select="count(preceding::wc:Chapter)+1"/>
            </xsl:call-template>
        </xsl:for-each>
    </xsl:template>

    <xsl:template name="AddHeading">
        <div class="headingText">
            <xsl:apply-templates select="wc:Heading/node()"/>
        </div>
    </xsl:template>

    <xsl:template name="AddHeadingContinued">
        <xsl:if test="@continuation = 'true'">
            <div class="headingContinuedText">
                <xsl:call-template name="BuildLocalizedString">
                    <xsl:with-param name="KeyName" select="'Continued'"/>
                </xsl:call-template>
            </div>
        </xsl:if>
    </xsl:template>

    <xsl:template name="AddPithyQuote">
        <div class="pithyQuoteText">
            <xsl:apply-templates select="wc:PithyQuote/node()"/>
        </div>
    </xsl:template>

    <xsl:template name="AddKeyword">
        <div class="keywordText">
            <xsl:apply-templates select="wc:Keyword/node()"/>
        </div>
    </xsl:template>

    <xsl:template name="AddAudioButton">
        <span class="audioButton" style="margin-top:-5px;">
            <xsl:text disable-output-escaping="yes">
				&lt;a href=&quot;javascript:MediaPlayer.audio.play(</xsl:text>
            <xsl:value-of select="count(preceding::wc:Chapter)+1"/>
            <xsl:text disable-output-escaping="yes">)&quot; &gt;&lt;img src=&quot;</xsl:text>
            <xsl:value-of select="$ImagePath"/>
            <xsl:text disable-output-escaping="yes">playaudio.gif&quot; border=&quot;0&quot; &gt;&lt;/a&gt;
			</xsl:text>
        </span>
    </xsl:template>

    <xsl:template name="AddHighlightButton">
        <span class="highlightButton">
            <xsl:text disable-output-escaping="yes">
				&lt;a href=&quot;javascript:setHighlight(</xsl:text>
            <xsl:value-of select="count(preceding::wc:Chapter)+1"/>
            <xsl:text disable-output-escaping="yes">)&quot; &gt;&lt;img src=&quot;</xsl:text>
            <xsl:value-of select="$ImagePath"/>
            <xsl:text disable-output-escaping="yes">highlight.gif&quot; border=&quot;0&quot; &gt;&lt;/a&gt;
			</xsl:text>
        </span>
    </xsl:template>

    <xsl:template name="AddFooterText">
        <xsl:choose>
            <xsl:when test="wc:Footer">
                <div class="footerText">
                    <xsl:apply-templates select="wc:Footer/node()"/>
                </div>
            </xsl:when>
            <xsl:when test="/wc:Course/wc:Footer">
                <div class="footerText">
                    <xsl:apply-templates select="/wc:Course/wc:Footer/node()"/>
                </div>
            </xsl:when>
            <xsl:otherwise>
                <!--			<div class="footerText">
				This is stuff <b>for the footer</b> area!!
			</div> -->
            </xsl:otherwise>
        </xsl:choose>
    </xsl:template>

    <xsl:template name="AddChapterVideo">
        <xsl:for-each select="wc:Video">
            <xsl:call-template name="BuildChapterVideo"/>
        </xsl:for-each>
    </xsl:template>

    <xsl:template name="AddWideChapterVideo">
        <xsl:for-each select="wc:Video">
            <xsl:call-template name="BuildWideChapterVideo"/>
        </xsl:for-each>
    </xsl:template>

    <xsl:template name="AddChapterAudio">
        <xsl:for-each select="wc:Audio">
            <xsl:call-template name="BuildAudio">
                <xsl:with-param name="ChapterNum" select="count(preceding::wc:Chapter)+1"/>
            </xsl:call-template>
        </xsl:for-each>
    </xsl:template>

    <xsl:template name="AddChapterDiscussion">
        <xsl:choose>
            <xsl:when test="wc:Survey">
                <div class="chapterSurveyLayout">
                    <xsl:for-each select="wc:Survey">
                        <xsl:call-template name="BuildSurvey">
                            <xsl:with-param name="ChapterNum" select="count(preceding::wc:Chapter)+1"/>
                        </xsl:call-template>
                    </xsl:for-each>
                </div>
            </xsl:when>
            <xsl:otherwise>
                <div class="chapterDiscussionText">
                    <xsl:for-each select="wc:Discussion">
                        <xsl:call-template name="BuildDiscussion"/>
                    </xsl:for-each>
                </div>
            </xsl:otherwise>
        </xsl:choose>
    </xsl:template>

    <xsl:template name="AddNavigation">
        <xsl:choose>
            <xsl:when test="$Offline = 'true'">
                <xsl:call-template name="BuildOfflineNavigation">
                    <xsl:with-param name="Paginate" select="not(@pagination) or @pagination = 'true'"/>
                </xsl:call-template>
            </xsl:when>
            <xsl:otherwise>
                <xsl:call-template name="BuildNavigation">
                    <xsl:with-param name="Paginate" select="not(@pagination) or @pagination = 'true'"/>
                </xsl:call-template>
            </xsl:otherwise>
        </xsl:choose>
    </xsl:template>

    <xsl:template name="AddCompanyLogo">
        <div class="logo">
            <xsl:text disable-output-escaping="yes">&lt;img src="</xsl:text>
            <xsl:value-of select="$MediaPath"/>
            <xsl:value-of select="$CompanyLogo"/>
            <xsl:text>" alt="</xsl:text>
            <xsl:value-of select="$CompanyName"/>
            <xsl:text disable-output-escaping="yes">"/&gt;</xsl:text>
        </div>
    </xsl:template>

    <xsl:template name="AddCopyright">
        <div class="chapterCopyrightText">
            <xsl:call-template name="BuildCopyright"/>
        </div>
    </xsl:template>

    <xsl:template name="AddMemorandumTitle">
        <div class="memorandumTitleText">
            <xsl:call-template name="BuildLocalizedString">
                <xsl:with-param name="KeyName" select="'Memorandum'"/>
            </xsl:call-template>
        </div>
    </xsl:template>

    <xsl:template name="AddMemorandumToLabel">
        <span class="memorandumToLabelText">
            <xsl:call-template name="BuildLocalizedString">
                <xsl:with-param name="KeyName" select="'To'"/>
            </xsl:call-template>
        </span>
    </xsl:template>

    <xsl:template name="AddMemorandumName">
        <span class="memorandumNameText">
            <span id="FirstName">firstname</span>
            <xsl:value-of select="$Space"/>
            <span id="LastName">lastname</span>
        </span>
    </xsl:template>

    <xsl:template name="AddMemorandumDateLabel">
        <span class="memorandumDateLabelText">
            <xsl:call-template name="BuildLocalizedString">
                <xsl:with-param name="KeyName" select="'Date'"/>
            </xsl:call-template>
        </span>
    </xsl:template>

    <xsl:template name="AddMemorandumDate">
        <span id="CurDate" class="memorandumDateText">curDate</span>
    </xsl:template>

    <xsl:template name="AddMemorandumReLabel">
        <span class="memorandumReLabelText">
            <xsl:call-template name="BuildLocalizedString">
                <xsl:with-param name="KeyName" select="'Re'"/>
            </xsl:call-template>
        </span>
    </xsl:template>
    <xsl:template name="AddMemorandumReText">
        <span class="memorandumReText">
            <xsl:call-template name="BuildLocalizedString">
                <xsl:with-param name="KeyName" select="'TrainingProgram'"/>
            </xsl:call-template>
        </span>
        <span class="memorandumProgramNameText">
            <xsl:text>"</xsl:text>
            <xsl:value-of select="$ProgramName"/>
            <xsl:text>"</xsl:text>
        </span>
    </xsl:template>

    <xsl:template name="AddMemorandumVideo">
        <xsl:for-each select="wc:Video">
            <xsl:call-template name="BuildMemorandumVideo"/>
        </xsl:for-each>
    </xsl:template>

    <xsl:template name="AddMemorandumDiscussion">
        <div class="memorandumDiscussionText">
            <xsl:for-each select="wc:Discussion">
                <xsl:call-template name="BuildDiscussion"/>
            </xsl:for-each>
        </div>
    </xsl:template>

    <xsl:template name="AddMemorandumIllustration">
        <xsl:for-each select="wc:Illustration">
            <xsl:call-template name="BuildMemorandumIllustration">
                <xsl:with-param name="ChapterNum" select="count(preceding::wc:Chapter)+1"/>
            </xsl:call-template>
        </xsl:for-each>
    </xsl:template>

    <xsl:template name="BuildHead">
        <HEAD>
            <xsl:text disable-output-escaping="yes">
&lt;meta name="apple-mobile-web-app-capable"" content="yes" /&gt;</xsl:text>
            <xsl:text disable-output-escaping="yes">&lt;META name="XSLT Version" content="</xsl:text>
            <xsl:value-of select="$LastModified"/>
            <xsl:text disable-output-escaping="yes">"&gt;</xsl:text>
            <TITLE>
                <xsl:value-of select="wc:Name"/>
                <!--
wc:Course
   added optional <Description> element (not rendered so ignore it)
-->
            </TITLE>

            <!-- NOTE: do not use <script .... /> -->
            <script type="text/javascript" src="{$StaticHtmlPath}AddObject.js"></script>
            <script type="text/javascript" src="{$StaticHtmlPath}swfobject.js"></script>
            <script type="text/javascript" src="{$StaticHtmlPath}MediaPlayer.js"></script>
            <link rel="stylesheet" type="text/css" href="{$StylePath}{$SystemCSS}"/>
            <xsl:if test="$ProgramCSS != ''">
                <link rel="stylesheet" type="text/css" href="{$StylePath}{$ProgramCSS}"/>
            </xsl:if>
            <xsl:text disable-output-escaping="yes">&lt;STYLE TYPE="text/css"&gt;
ul { list-style : url(</xsl:text>
            <xsl:value-of select="$ImagePath"/>
            <xsl:text disable-output-escaping="yes">bullet.gif) outside; }
</xsl:text>
            <xsl:if test="$LanguageIsRtl = 1">
                .chapterDiscussionLayout {text-align : right; }
                .questionFeedback {text-align : right; }
                .keywordLayout {float : right; text-align : right; }
                .chapterSurveyLayout {text-align : right; }
            </xsl:if>
            <xsl:text disable-output-escaping="yes">&lt;/STYLE&gt;</xsl:text>

            <script type="text/javascript">
                var nCurChapterTime = 0;
                var beginTime, endTime;
                var bTimingValid = false;
                var objQueryString = getQueryString(this);

                function getMyTime(d)
                {
                var s = "";
                s += d.getHours();
                s += ":";
                s += d.getMinutes();
                s += ":";
                s += d.getSeconds();

                s = d.getTime();
                return s;
                }

                function startChapterTiming()
                {
                var status = document.getElementById("TestWarningDiv");
                if (status != null &amp;&amp; typeof(status) == "object")
                status.innerHTML = status.innerHTML + "start ";

                bTimingValid = true;
                nCurChapterTime = 0;
                endTime = null;
                beginTime = new Date();
                }

                function evaluateChapterTiming(curChapter)
                {
                if (0 == g_arrMinChapterTimes[curChapter-1])
                return false;
                else
                {
                //	alert("time spent on chapter is " + nCurChapterTime);
                if (beginTime != null &amp;&amp; endTime != null)
                {
                var status = document.getElementById("StartTimeDiv");
                if (status != null &amp;&amp; typeof(status) == "object")
                {
                var s = getMyTime(beginTime);
                status.innerHTML = s;
                }
                status = document.getElementById("EndTimeDiv");
                if (status != null &amp;&amp; typeof(status) == "object")
                {
                var s = getMyTime(endTime);
                status.innerHTML = s;
                }
                status = document.getElementById("ElapsedDiv");
                if (status != null &amp;&amp; typeof(status) == "object")
                {
                status.innerHTML = nCurChapterTime;
                }
                }

                var status = document.getElementById("TestWarningDiv");
                if (status != null &amp;&amp; typeof(status) == "object")
                status.innerHTML = status.innerHTML + "eval ";

                return (nCurChapterTime &gt;= g_arrMinChapterTimes[curChapter-1]*1000);
                }
                }

                function stopChapterTiming()
                {
                if (bTimingValid)
                {
                var status = document.getElementById("TestWarningDiv");
                if (status != null &amp;&amp; typeof(status) == "object")
                status.innerHTML = status.innerHTML + "stop ";

                endTime = new Date();
                nCurChapterTime += (endTime.getTime() - beginTime.getTime());
                }

                bTimingValid = false;
                }

                function pauseChapterTiming()
                {
                if (bTimingValid)
                {
                var status = document.getElementById("TestWarningDiv");
                if (status != null &amp;&amp; typeof(status) == "object")
                status.innerHTML = status.innerHTML + "pause ";

                endTime = new Date();
                nCurChapterTime += (endTime.getTime() - beginTime.getTime());

                bTimingValid = false;
                }
                }

                function continueChapterTiming()
                {
                if (!bTimingValid)
                {
                var status = document.getElementById("TestWarningDiv");
                if (status != null &amp;&amp; typeof(status) == "object")
                status.innerHTML = status.innerHTML + "continue ";

                endTime = null;
                beginTime = new Date();

                bTimingValid = true;
                }
                }

                function gotFocus()
                {
                continueChapterTiming();
                }

                function lostFocus()
                {
                pauseChapterTiming();
                }

                // Function:   getQueryString
                // Purpose:    Parses the querystring and returns an object
                //             with the resulting parameters.
                function getQueryString(win)
                {
                var qs = new Object();
                var strQS = win.location.search.substring(1).replace(/\+/g, " ");
                var arrParams = strQS.split("&amp;");
                for (var i in arrParams)
                {
                var key, val;
                var n = arrParams[i].indexOf("=");
                if (n != -1)
                {
                key = arrParams[i].substring(0, n).toUpperCase();
                val = unescape(arrParams[i].substring(n + 1));
                }
                else
                {
                key = arrParams[i].toUpperCase();
                val = "";
                }

                qs[key] = val;
                }
                return qs;
                }

            </script>

        </HEAD>
    </xsl:template>

    <xsl:template name="BuildCopyright">
        <xsl:text disable-output-escaping="yes">Copyright &amp;copy; &lt;span id='CopyrightYears' name='CopyrightYears'&gt;&lt;/span&gt;. All rights reserved.</xsl:text>
    </xsl:template>

    <xsl:template name="BuildDocLink">
        <xsl:param name="ChapterNum"/>
        <xsl:variable name="title">
            <xsl:call-template name="AddBulletinTitle">
                <xsl:with-param name="BulletinTitle" select="@variety"/>
            </xsl:call-template>
        </xsl:variable>
        <xsl:choose>
            <xsl:when test="wc:URL">
                <xsl:text disable-output-escaping="yes">&lt;a href="javascript:void(0)" onmouseout="window.status=''" onmouseover="window.status='</xsl:text>
                <xsl:call-template name="BuildLocalizedString">
                    <xsl:with-param name="KeyName" select="'Clickformore'"/>
                </xsl:call-template>
                <xsl:text>'; return true" </xsl:text>
                <xsl:call-template name="AddDocLinkOnClickUrl"/>
                <xsl:text disable-output-escaping="yes">&gt;</xsl:text>
                <xsl:text disable-output-escaping="yes">&lt;img class="docLinkImage" title="</xsl:text>
                <xsl:value-of select="$title"/>
                <xsl:text>" src="</xsl:text>
                <xsl:value-of select="$ImagePath"/>
                <xsl:value-of select="@variety"/>
                <xsl:text>.gif" alt="</xsl:text>
                <xsl:value-of select="$title"/>
                <xsl:text disable-output-escaping="yes">" /&gt;</xsl:text>
                <xsl:text disable-output-escaping="yes">&lt;/a&gt;</xsl:text>
            </xsl:when>
            <xsl:when test="wc:Body or wc:Illustration">
                <xsl:text disable-output-escaping="yes">&lt;a href="javascript:void(0)" onmouseout="window.status=''" onmouseover="window.status='</xsl:text>
                <xsl:call-template name="BuildLocalizedString">
                    <xsl:with-param name="KeyName" select="'Clickformore'"/>
                </xsl:call-template>
                <xsl:text>'; return true" </xsl:text>
                <xsl:call-template name="AddDocLinkOnClickBody">
                    <xsl:with-param name="ChapterNum" select="$ChapterNum"/>
                </xsl:call-template>
                <xsl:text disable-output-escaping="yes">&gt;</xsl:text>
                <xsl:text disable-output-escaping="yes">&lt;img class="docLinkImage" title="</xsl:text>
                <xsl:value-of select="$title"/>
                <xsl:text>" src="</xsl:text>
                <xsl:value-of select="$ImagePath"/>
                <xsl:value-of select="@variety"/>
                <xsl:text>.gif" alt="</xsl:text>
                <xsl:value-of select="$title"/>
                <xsl:text disable-output-escaping="yes">" /&gt;</xsl:text>
                <xsl:text disable-output-escaping="yes">&lt;/a&gt;</xsl:text>
            </xsl:when>
            <xsl:otherwise>
                <xsl:message terminate="yes">
                    <xsl:text>ERROR -> LinkBulletin in Chapter '</xsl:text>
                    <xsl:value-of select="preceding::wc:Chapter/wc:Heading"/>
                    <xsl:text>' does not contain a URL or Body/Illustration!!</xsl:text>
                </xsl:message>
            </xsl:otherwise>
        </xsl:choose>
    </xsl:template>

    <xsl:template name="AddDocLinkOnClickUrl">
        <xsl:choose>
            <xsl:when test="$Offline = 'true'">
                <xsl:text>onClick="gotoElement('</xsl:text>
                <xsl:value-of select="@id"/>
                <xsl:text>Def', 'div</xsl:text>
                <xsl:value-of select="count(preceding::wc:Chapter)+1"/>
                <xsl:text disable-output-escaping="yes">');"</xsl:text>
            </xsl:when>
            <xsl:otherwise>
                <xsl:text>onClick="window.open('</xsl:text>
                <xsl:value-of select="wc:URL"/>
                <xsl:text disable-output-escaping="yes">');"</xsl:text>
            </xsl:otherwise>
        </xsl:choose>
    </xsl:template>

    <xsl:template name="AddDocLinkOnClickBody">
        <xsl:param name="ChapterNum"/>
        <xsl:choose>
            <xsl:when test="$Offline = 'true'">
                <xsl:text>onClick="gotoElement('</xsl:text>
                <xsl:value-of select="@id"/>
                <xsl:text>Def', 'div</xsl:text>
                <xsl:value-of select="count(preceding::wc:Chapter)+1"/>
                <xsl:text disable-output-escaping="yes">');"</xsl:text>
            </xsl:when>
            <xsl:otherwise>
                <xsl:text>onClick="popUpBulletin('l','</xsl:text>
                <xsl:value-of select="$ChapterNum"/>
                <xsl:text>-</xsl:text>
                <xsl:value-of select="@id"/>
                <xsl:text>','0',</xsl:text>
                <xsl:value-of select="@height"/>
                <xsl:text>,</xsl:text>
                <xsl:value-of select="@width"/>
                <xsl:text disable-output-escaping="yes">,null)"</xsl:text>
            </xsl:otherwise>
        </xsl:choose>
    </xsl:template>

    <!-- 
	Note that if the "src" file doesn't exist, Flash will hang when the page is run. TPMS should guarantee that the file exists....
-->
    <xsl:template name="BuildChapterIllustration">
        <xsl:param name="ChapterNum"/>
        <div class="chapterIllustration">
            <xsl:choose>
                <xsl:when test="@variety='application/x-shockwave-flash'">
                    <xsl:text disable-output-escaping="yes">
					&lt;div id="chapter</xsl:text>
                    <xsl:value-of select="$ChapterNum"/>
                    <xsl:text disable-output-escaping="yes">Flash" class="chapterIllustrationImage"&gt;
					&lt;/div&gt;
						&lt;script type="text/javascript"&gt;
						var str = "&lt;OBJECT ID='FlashPlayer' " +
						"CLASSID='CLSID:D27CDB6E-AE6D-11cf-96B8-444553540000' " +
						"CODEBASE='http://download.macromedia.com/pub/shockwave/cabs/flash/swflash.cab#version=</xsl:text>
                    <xsl:value-of select="$MinFlashVersion"/>
                    <xsl:text disable-output-escaping="yes">,0,0,0' " +
						</xsl:text>
                    <xsl:if test="@width">
                        <xsl:text>"WIDTH='</xsl:text>
                        <xsl:value-of select="@width"/>
                        <xsl:text>' " +</xsl:text>
                    </xsl:if>
                    <xsl:if test="@height">
                        <xsl:text>"HEIGHT='</xsl:text>
                        <xsl:value-of select="@height"/>
                        <xsl:text>' " +</xsl:text>
                    </xsl:if>
                    <xsl:text disable-output-escaping="yes">
						"TYPE='application/x-oleobject' " +
						"STANDBY='Loading Macromedia Flash Player...'&gt;" +
							"&lt;PARAM NAME='movie' value='</xsl:text>
                    <xsl:value-of select="$MediaPath"/>
                    <xsl:value-of select="@src"/>
                    <xsl:text disable-output-escaping="yes">'&gt;" +
							"&lt;PARAM NAME='quality' value='high'&gt;" +
							"&lt;PARAM NAME='bgcolor' VALUE='#FFFFFF'&gt;" +
						"&lt;embed name='FlashPlayer' src='</xsl:text>
                    <xsl:value-of select="$MediaPath"/>
                    <xsl:value-of select="@src"/>
                    <xsl:text disable-output-escaping="yes">' quality='high' bgcolor='#FFFFFF' " +
						</xsl:text>
                    <xsl:if test="@width">
                        <xsl:text>"WIDTH='</xsl:text>
                        <xsl:value-of select="@width"/>
                        <xsl:text>' " +</xsl:text>
                    </xsl:if>
                    <xsl:if test="@height">
                        <xsl:text>"HEIGHT='</xsl:text>
                        <xsl:value-of select="@height"/>
                        <xsl:text>' </xsl:text>
                    </xsl:if>
                    <xsl:text disable-output-escaping="yes">allowScriptAccess='sameDomain' " +
						"type='application/x-shockwave-flash' " +
						"pluginspage='http://download.macromedia.com/pub/shockwave/cabs/flash/swflash.cab#version=</xsl:text>
                    <xsl:value-of select="$MinFlashVersion"/>
                    <xsl:text disable-output-escaping="yes">,0,0,0' /&gt;" +
						"&lt;/OBJECT&gt;"

						AddObject("chapter</xsl:text>
                    <xsl:value-of select="$ChapterNum"/>
                    <xsl:text disable-output-escaping="yes">Flash", str);
						&lt;/script&gt;
					</xsl:text>
                </xsl:when>
                <xsl:otherwise>
                    <xsl:text disable-output-escaping="yes">&lt;img style="border:6px solid white; -webkit-box-shadow: 2px 2px 2px #333;" src="</xsl:text>
                    <xsl:value-of select="$MediaPath"/>
                    <xsl:value-of select="@src"/>
                    <xsl:text>" </xsl:text>
                    <xsl:if test="@width">
                        <xsl:text>width="</xsl:text>
                        <xsl:value-of select="@width"/>
                        <xsl:text>" </xsl:text>
                    </xsl:if>
                    <xsl:if test="@height">
                        <xsl:text>height="</xsl:text>
                        <xsl:value-of select="@height"/>
                        <xsl:text>" </xsl:text>
                    </xsl:if>
                    <xsl:if test="wc:AlternateText">
                        <xsl:text>alt="</xsl:text>
                        <xsl:value-of select="wc:AlternateText"/>
                        <xsl:text>" </xsl:text>
                    </xsl:if>
                    <xsl:text disable-output-escaping="yes"> /&gt;</xsl:text>
                </xsl:otherwise>
            </xsl:choose>
            <xsl:if test="wc:Caption">
                <div class="chapterIllustrationCaption">
                    <xsl:value-of select="wc:Caption"/>
                </div>
            </xsl:if>
        </div>
    </xsl:template>

    <xsl:template name="BuildMemorandumIllustration">
        <xsl:param name="ChapterNum"/>
        <div class="memorandumIllustration">
            <xsl:choose>
                <xsl:when test="@variety='application/x-shockwave-flash'">
                    <xsl:text disable-output-escaping="yes">
					&lt;div id="chapter</xsl:text>
                    <xsl:value-of select="$ChapterNum"/>
                    <xsl:text disable-output-escaping="yes">Flash" class="chapterIllustrationImage"&gt;
					&lt;/div&gt;
						&lt;script type="text/javascript"&gt;
						var str = "&lt;OBJECT ID='FlashPlayer' " +
						"CLASSID='CLSID:D27CDB6E-AE6D-11cf-96B8-444553540000' " +
						"CODEBASE='http://download.macromedia.com/pub/shockwave/cabs/flash/swflash.cab#version=</xsl:text>
                    <xsl:value-of select="$MinFlashVersion"/>
                    <xsl:text disable-output-escaping="yes">,0,0,0' " +
						</xsl:text>
                    <xsl:if test="@width">
                        <xsl:text>"WIDTH='</xsl:text>
                        <xsl:value-of select="@width"/>
                        <xsl:text>' " +</xsl:text>
                    </xsl:if>
                    <xsl:if test="@height">
                        <xsl:text>"HEIGHT='</xsl:text>
                        <xsl:value-of select="@height"/>
                        <xsl:text>' " +</xsl:text>
                    </xsl:if>
                    <xsl:text disable-output-escaping="yes">
						"TYPE='application/x-oleobject' " +
						"STANDBY='Loading Macromedia Flash Player...'&gt;" +
							"&lt;PARAM NAME='movie' value='</xsl:text>
                    <xsl:value-of select="$MediaPath"/>
                    <xsl:value-of select="@src"/>
                    <xsl:text disable-output-escaping="yes">'&gt;" +
							"&lt;PARAM NAME='quality' value='high'&gt;" +
							"&lt;PARAM NAME='bgcolor' VALUE='#FFFFFF'&gt;" +
						"&lt;embed name='FlashPlayer' src='</xsl:text>
                    <xsl:value-of select="$MediaPath"/>
                    <xsl:value-of select="@src"/>
                    <xsl:text disable-output-escaping="yes">' quality='high' bgcolor='#FFFFFF' " +
						</xsl:text>
                    <xsl:if test="@width">
                        <xsl:text>"WIDTH='</xsl:text>
                        <xsl:value-of select="@width"/>
                        <xsl:text>' " +</xsl:text>
                    </xsl:if>
                    <xsl:if test="@height">
                        <xsl:text>"HEIGHT='</xsl:text>
                        <xsl:value-of select="@height"/>
                        <xsl:text>' </xsl:text>
                    </xsl:if>
                    <xsl:text disable-output-escaping="yes">allowScriptAccess='sameDomain' " +
						"type='application/x-shockwave-flash' " +
						"pluginspage='http://download.macromedia.com/pub/shockwave/cabs/flash/swflash.cab#version=</xsl:text>
                    <xsl:value-of select="$MinFlashVersion"/>
                    <xsl:text disable-output-escaping="yes">,0,0,0' /&gt;" +
						"&lt;/OBJECT&gt;"

						AddObject("chapter</xsl:text>
                    <xsl:value-of select="$ChapterNum"/>
                    <xsl:text disable-output-escaping="yes">Flash", str);
						&lt;/script&gt;
					</xsl:text>
                </xsl:when>
                <xsl:otherwise>
                    <xsl:text disable-output-escaping="yes">&lt;img class="memorandumIllustration" src="</xsl:text>
                    <xsl:value-of select="$MediaPath"/>
                    <xsl:value-of select="@src"/>
                    <xsl:text>" </xsl:text>
                    <xsl:if test="@width">
                        <xsl:text>width="</xsl:text>
                        <xsl:value-of select="@width"/>
                        <xsl:text>" </xsl:text>
                    </xsl:if>
                    <xsl:if test="@height">
                        <xsl:text>height="</xsl:text>
                        <xsl:value-of select="@height"/>
                        <xsl:text>" </xsl:text>
                    </xsl:if>
                    <xsl:if test="wc:AlternateText">
                        <xsl:text>alt="</xsl:text>
                        <xsl:value-of select="wc:AlternateText"/>
                        <xsl:text>" </xsl:text>
                    </xsl:if>
                    <xsl:text disable-output-escaping="yes"> /&gt;</xsl:text>
                </xsl:otherwise>
            </xsl:choose>
            <xsl:if test="wc:Caption">
                <div class="memorandumIllustrationCaption">
                    <xsl:value-of select="wc:Caption"/>
                </div>
            </xsl:if>
        </div>
    </xsl:template>

    <xsl:template name="BuildMemorandumVideo">
        <div class="memorandumVideo">
            <xsl:call-template name="BuildVideo">
                <xsl:with-param name="ChapterNum" select="count(preceding::wc:Chapter)+1"/>
            </xsl:call-template>
            <xsl:if test="wc:Caption">
                <xsl:text disable-output-escaping="yes">
				&lt;div class="memorandumVideoCaption"</xsl:text>
                <xsl:if test="@width">
                    <xsl:text> style="width:</xsl:text>
                    <xsl:value-of select="@width"/>
                    <xsl:text disable-output-escaping="yes">px"/&gt;</xsl:text>
                </xsl:if>
                <xsl:value-of select="wc:Caption"/>
                <xsl:text disable-output-escaping="yes">
				&lt;/div&gt;</xsl:text>
            </xsl:if>
        </div>
    </xsl:template>

    <xsl:template name="BuildChapterVideo">
        <div class="chapterVideo">
            <xsl:call-template name="BuildVideo">
                <xsl:with-param name="ChapterNum" select="count(preceding::wc:Chapter)+1"/>
            </xsl:call-template>
            <xsl:if test="wc:Caption">
                <xsl:text disable-output-escaping="yes">
				&lt;div class="chapterVideoCaption"</xsl:text>
                <xsl:if test="@width">
                    <xsl:text> style="width:</xsl:text>
                    <xsl:value-of select="@width"/>
                    <xsl:text disable-output-escaping="yes">px"/&gt;</xsl:text>
                </xsl:if>
                <xsl:value-of select="wc:Caption"/>
                <xsl:text disable-output-escaping="yes">
				&lt;/div&gt;</xsl:text>
            </xsl:if>
        </div>
    </xsl:template>

    <xsl:template name="BuildWideChapterVideo">
        <div class="chapterWideVideo">
            <xsl:call-template name="BuildVideo">
                <xsl:with-param name="ChapterNum" select="count(preceding::wc:Chapter)+1"/>
            </xsl:call-template>
            <xsl:if test="wc:Caption">
                <xsl:text disable-output-escaping="yes">
				&lt;div class="chapterWideVideoCaption"</xsl:text>
                <xsl:if test="@width">
                    <xsl:text> style="width:</xsl:text>
                    <xsl:value-of select="@width"/>
                    <xsl:text disable-output-escaping="yes">px"/&gt;</xsl:text>
                </xsl:if>
                <xsl:value-of select="wc:Caption"/>
                <xsl:text disable-output-escaping="yes">
				&lt;/div&gt;</xsl:text>
            </xsl:if>
        </div>
    </xsl:template>

    <xsl:template name="BuildAudio">
        <xsl:param name="ChapterNum"/>
         <xsl:text disable-output-escaping="yes">&lt;div id="AudioContainer</xsl:text>
        <xsl:value-of select="$ChapterNum"/>
        <xsl:text disable-output-escaping="yes">" style=""&gt;</xsl:text>
        <xsl:text disable-output-escaping="yes">&lt;/div&gt;</xsl:text>
        <xsl:text disable-output-escaping="yes">&lt;script type="text/javascript"&gt;
			MediaPlayer.audio.add(fixStaticPath('</xsl:text>
        <xsl:value-of select="$MediaPath"/>
        <xsl:value-of select="@src"/>
        <xsl:text>'), </xsl:text>
        <xsl:value-of select="$ChapterNum"/>
        <xsl:text disable-output-escaping="yes">);
			MediaPlayer.audio.flashPlayerSrc ='</xsl:text>
        <xsl:value-of select="$StaticHtmlPath"/>
        <xsl:text disable-output-escaping="yes">niftyplayer.swf';
				
			&lt;/script&gt;</xsl:text>
    </xsl:template>

    <xsl:template name="BuildVideo">
        <xsl:param name="ChapterNum"/>
        <xsl:text disable-output-escaping="yes">&lt;div id="VideoContainer</xsl:text>
        <xsl:value-of select="$ChapterNum"/>
        <xsl:text disable-output-escaping="yes">" style="border:1px solid black;cursor:pointer;</xsl:text>
        <xsl:if test="@width">
            <xsl:text>width:</xsl:text>
            <xsl:value-of select="@width"/>
            <xsl:text>;</xsl:text>
        </xsl:if>
        <xsl:if test="@height">
            <xsl:text>height:</xsl:text>
            <xsl:value-of select="@height"/>
            <xsl:text>;</xsl:text>
        </xsl:if>
        <xsl:text disable-output-escaping="yes">" &gt;</xsl:text>
        <xsl:text disable-output-escaping="yes">&lt;script type="text/javascript"&gt;
			
			MediaPlayer.video.add(fixStaticPath('</xsl:text>
        <xsl:value-of select="$MediaPath"/>
        <xsl:value-of select="@src"/>
        <xsl:text>'), </xsl:text>
        <xsl:value-of select="$ChapterNum"/>
        <xsl:text disable-output-escaping="yes">, '</xsl:text>
        <xsl:value-of select="@variety"/>
        <xsl:text disable-output-escaping="yes">', </xsl:text>
        <xsl:value-of select="ancestor::wc:Chapter/@autoplay"/>
        <xsl:text disable-output-escaping="yes">, '</xsl:text>
        <xsl:variable name="StreamUrl">
            <xsl:value-of select="@stream"/>
        </xsl:variable>
        <xsl:text disable-output-escaping="yes">', 'VideoContainer</xsl:text>
        <xsl:value-of select="$ChapterNum"/>
        <xsl:text disable-output-escaping="yes">', '</xsl:text>
        <xsl:value-of select="@width"/>
        <xsl:text disable-output-escaping="yes">', '</xsl:text>
        <xsl:value-of select="@height"/>
        <xsl:text disable-output-escaping="yes">');
			MediaPlayer.video.flashPlayerSrc = '</xsl:text>
        <xsl:value-of select="$StaticHtmlPath"/>
        <xsl:text disable-output-escaping="yes">flvplayer.swf';

			&lt;/script&gt;
			</xsl:text>
        <xsl:text disable-output-escaping="yes">&lt;/div&gt;</xsl:text>
    </xsl:template>


    <xsl:template name="BuildDiscussion">
        <xsl:apply-templates/>
    </xsl:template>

    <xsl:template name="BuildSurvey">
        <xsl:param name="ChapterNum"/>

        <xsl:text disable-output-escaping="yes">
		&lt;div id="surveyContainer</xsl:text>
        <xsl:value-of select="$ChapterNum"/>
        <xsl:text disable-output-escaping="yes">"&gt;
			&lt;div class="surveyNotAnswered" id="idSurveyNotAnswered</xsl:text>
        <xsl:value-of select="$ChapterNum"/>
        <xsl:text disable-output-escaping="yes">" style="display:none"&gt;
			</xsl:text>
        <xsl:call-template name="BuildLocalizedString">
            <xsl:with-param name="KeyName" select="'UnansweredSurveyWarning'"/>
        </xsl:call-template>
        <xsl:text disable-output-escaping="yes">
			&lt;/div&gt;
			</xsl:text>
        <xsl:for-each select="wc:PivotQuestion">
            <xsl:call-template name="AddSurveyQuestion">
                <xsl:with-param name="ChapterNum" select="$ChapterNum"/>
            </xsl:call-template>
        </xsl:for-each>
        <xsl:text disable-output-escaping="yes">
			&lt;div class="surveyQuestionSetLayout" id="surveyQuestionSet</xsl:text>
        <xsl:value-of select="$ChapterNum"/>
        <xsl:text>"</xsl:text>
        <xsl:if test="wc:PivotQuestion">
            <xsl:text> style="display:none"</xsl:text>
        </xsl:if>
        <xsl:text disable-output-escaping="yes">&gt;</xsl:text>
        <xsl:for-each select="wc:SurveyQuestions/wc:SurveyQuestion">
            <xsl:call-template name="AddSurveyQuestion">
                <xsl:with-param name="ChapterNum" select="$ChapterNum"/>
            </xsl:call-template>
        </xsl:for-each>
        <xsl:text disable-output-escaping="yes">
			&lt;/div&gt;
		&lt;/div&gt;
		</xsl:text>
    </xsl:template>

    <xsl:template name="AddSurveyQuestionBody">
        <xsl:for-each select="wc:Body">
            <xsl:call-template name="OutputText"/>
        </xsl:for-each>
    </xsl:template>

    <xsl:template name="AddSurveyQuestion">
        <xsl:param name="ChapterNum"/>
        <xsl:param name="QuestionNum" select="position()"/>

        <xsl:choose>
            <xsl:when test="@variety = 'MultipleChoiceMultipleAnswers'">
                <div class="surveyQuestionLayout">
                    <xsl:text disable-output-escaping="yes">
			&lt;div class="surveyQuestionText" id="SurveyQuestion-</xsl:text>
                    <xsl:value-of select="@id"/>
                    <xsl:text>-</xsl:text>
                    <xsl:value-of select="$ChapterNum"/>
                    <xsl:text>-</xsl:text>
                    <xsl:value-of select="$QuestionNum"/>
                    <xsl:text disable-output-escaping="yes">"&gt;&lt;span class="surveyNotAnsweredIndicator" style="display:none" id="indicator</xsl:text>
                    <xsl:value-of select="$ChapterNum"/>
                    <xsl:text>-</xsl:text>
                    <xsl:value-of select="$QuestionNum"/>
                    <xsl:text disable-output-escaping="yes">"&gt;
				</xsl:text>
                    <xsl:call-template name="BuildLocalizedString">
                        <xsl:with-param name="KeyName" select="'UnansweredSurveyIndicator'"/>
                    </xsl:call-template>
                    <xsl:text disable-output-escaping="yes">
			&lt;/span&gt;</xsl:text>
                    <xsl:call-template name="AddSurveyQuestionBody"/>
                    <xsl:text disable-output-escaping="yes">&lt;/div&gt;
			&lt;div class="multipleAnswerText" id="SurveyAnswer</xsl:text>
                    <xsl:value-of select="$ChapterNum"/>
                    <xsl:text>-</xsl:text>
                    <xsl:value-of select="$QuestionNum"/>
                    <xsl:text disable-output-escaping="yes">"&gt;
				&lt;table border="0" cellpadding="2" style="display:block"&gt;</xsl:text>
                    <xsl:for-each select="wc:Choices/wc:Choice">
                        <xsl:call-template name="AddCheckChoice">
                            <xsl:with-param name="ChapterNum" select="$ChapterNum"/>
                            <xsl:with-param name="QuestionNum" select="$QuestionNum"/>
                        </xsl:call-template>
                    </xsl:for-each>
                    <xsl:text disable-output-escaping="yes">
				&lt;/table&gt;
			&lt;/div&gt;
			</xsl:text>
                </div>
            </xsl:when>
            <xsl:when test="@variety = 'MultipleChoiceOneAnswer'">
                <div class="surveyQuestionLayout">
                    <xsl:text disable-output-escaping="yes">
			&lt;div class="surveyQuestionText" id="SurveyQuestion-</xsl:text>
                    <xsl:value-of select="@id"/>
                    <xsl:text>-</xsl:text>
                    <xsl:value-of select="$ChapterNum"/>
                    <xsl:text>-</xsl:text>
                    <xsl:value-of select="$QuestionNum"/>
                    <xsl:text disable-output-escaping="yes">"&gt;&lt;span class="surveyNotAnsweredIndicator" style="display:none" id="indicator</xsl:text>
                    <xsl:value-of select="$ChapterNum"/>
                    <xsl:text>-</xsl:text>
                    <xsl:value-of select="$QuestionNum"/>
                    <xsl:text disable-output-escaping="yes">"&gt;
				</xsl:text>
                    <xsl:call-template name="BuildLocalizedString">
                        <xsl:with-param name="KeyName" select="'UnansweredSurveyIndicator'"/>
                    </xsl:call-template>
                    <xsl:text disable-output-escaping="yes">
			&lt;/span&gt;</xsl:text>
                    <xsl:call-template name="AddSurveyQuestionBody"/>
                    <xsl:text disable-output-escaping="yes">&lt;/div&gt;
			&lt;div class="singleAnswerText" id="SurveyAnswer</xsl:text>
                    <xsl:value-of select="$ChapterNum"/>
                    <xsl:text>-</xsl:text>
                    <xsl:value-of select="$QuestionNum"/>
                    <xsl:text disable-output-escaping="yes">"&gt;
				&lt;table border="0" cellpadding="2" style="display:block"&gt;</xsl:text>
                    <xsl:for-each select="wc:Choices/wc:Choice">
                        <xsl:call-template name="AddRadioChoice">
                            <xsl:with-param name="ChapterNum" select="$ChapterNum"/>
                            <xsl:with-param name="QuestionNum" select="$QuestionNum"/>
                        </xsl:call-template>
                    </xsl:for-each>
                    <xsl:text disable-output-escaping="yes">
				&lt;/table&gt;
			&lt;/div&gt;
			</xsl:text>
                </div>
            </xsl:when>
            <xsl:when test="@variety = 'TextLine'">
                <div class="surveyQuestionLayout">
                    <xsl:text disable-output-escaping="yes">
			&lt;div class="surveyQuestionText" id="SurveyQuestion-</xsl:text>
                    <xsl:value-of select="@id"/>
                    <xsl:text>-</xsl:text>
                    <xsl:value-of select="$ChapterNum"/>
                    <xsl:text>-</xsl:text>
                    <xsl:value-of select="position()"/>
                    <xsl:text disable-output-escaping="yes">"&gt;&lt;span class="surveyNotAnsweredIndicator" style="display:none" id="indicator</xsl:text>
                    <xsl:value-of select="$ChapterNum"/>
                    <xsl:text>-</xsl:text>
                    <xsl:value-of select="position()"/>
                    <xsl:text disable-output-escaping="yes">"&gt;
				</xsl:text>
                    <xsl:call-template name="BuildLocalizedString">
                        <xsl:with-param name="KeyName" select="'UnansweredSurveyIndicator'"/>
                    </xsl:call-template>
                    <xsl:text disable-output-escaping="yes">
			&lt;/span&gt;</xsl:text>
                    <xsl:call-template name="AddSurveyQuestionBody"/>
                    <xsl:text disable-output-escaping="yes">&lt;/div&gt;
			&lt;div class="textLineAnswerText" id="SurveyAnswer</xsl:text>
                    <xsl:value-of select="$ChapterNum"/>
                    <xsl:text>-</xsl:text>
                    <xsl:value-of select="position()"/>
                    <xsl:text disable-output-escaping="yes">"&gt;&lt;input type="text" id="shortResponse" maxlength="80" size="60" /&gt;&lt;/div&gt;
			</xsl:text>
                </div>
            </xsl:when>
            <xsl:when test="@variety = 'TextEssay'">
                <div class="surveyQuestionLayout">
                    <xsl:text disable-output-escaping="yes">
			&lt;div class="surveyQuestionText" id="SurveyQuestion-</xsl:text>
                    <xsl:value-of select="@id"/>
                    <xsl:text>-</xsl:text>
                    <xsl:value-of select="$ChapterNum"/>
                    <xsl:text>-</xsl:text>
                    <xsl:value-of select="position()"/>
                    <xsl:text disable-output-escaping="yes">"&gt;&lt;span class="surveyNotAnsweredIndicator" style="display:none" id="indicator</xsl:text>
                    <xsl:value-of select="$ChapterNum"/>
                    <xsl:text>-</xsl:text>
                    <xsl:value-of select="position()"/>
                    <xsl:text disable-output-escaping="yes">"&gt;
				</xsl:text>
                    <xsl:call-template name="BuildLocalizedString">
                        <xsl:with-param name="KeyName" select="'UnansweredSurveyIndicator'"/>
                    </xsl:call-template>
                    <xsl:text disable-output-escaping="yes">
			&lt;/span&gt;</xsl:text>
                    <xsl:call-template name="AddSurveyQuestionBody"/>
                    <xsl:text disable-output-escaping="yes">&lt;/div&gt;
			&lt;div class="textAreaAnswerText" id="SurveyAnswer</xsl:text>
                    <xsl:value-of select="$ChapterNum"/>
                    <xsl:text>-</xsl:text>
                    <xsl:value-of select="position()"/>
                    <xsl:text disable-output-escaping="yes">"&gt;&lt;textarea id="longResponse" rows="5" cols="48"&gt;&lt;/textarea&gt;&lt;/div&gt;
			</xsl:text>
                </div>
            </xsl:when>
            <xsl:when test="@variety = 'Boolean'">
                <div class="surveyQuestionLayout">
                    <xsl:text disable-output-escaping="yes">
			&lt;div class="surveyQuestionText" id="SurveyQuestion-</xsl:text>
                    <xsl:value-of select="@id"/>
                    <xsl:text>-</xsl:text>
                    <xsl:value-of select="$ChapterNum"/>
                    <xsl:text>-</xsl:text>
                    <xsl:value-of select="position()"/>
                    <xsl:text disable-output-escaping="yes">"&gt;&lt;span class="surveyNotAnsweredIndicator" style="display:none" id="indicator</xsl:text>
                    <xsl:value-of select="$ChapterNum"/>
                    <xsl:text>-</xsl:text>
                    <xsl:value-of select="position()"/>
                    <xsl:text disable-output-escaping="yes">"&gt;
				</xsl:text>
                    <xsl:call-template name="BuildLocalizedString">
                        <xsl:with-param name="KeyName" select="'UnansweredSurveyIndicator'"/>
                    </xsl:call-template>
                    <xsl:text disable-output-escaping="yes">
			&lt;/span&gt;</xsl:text>
                    <xsl:call-template name="AddSurveyQuestionBody"/>
                    <xsl:text disable-output-escaping="yes">&lt;/div&gt;
			&lt;div class="booleanAnswerText" id="SurveyAnswer</xsl:text>
                    <xsl:value-of select="$ChapterNum"/>
                    <xsl:text>-</xsl:text>
                    <xsl:value-of select="position()"/>
                    <xsl:text disable-output-escaping="yes">"&gt;
				&lt;table border="0" cellpadding="2" style="display:block"&gt;
					&lt;tr id="Row</xsl:text>
                    <xsl:value-of select="$ChapterNum"/>
                    <xsl:text>-</xsl:text>
                    <xsl:value-of select="$QuestionNum"/>
                    <xsl:text disable-output-escaping="yes">-1"&gt;
						&lt;td width="8" valign="top"&gt;
							&lt;input align="right" type="radio" id="Choice</xsl:text>
                    <xsl:value-of select="$ChapterNum"/>
                    <xsl:text>-</xsl:text>
                    <xsl:value-of select="$QuestionNum"/>
                    <xsl:text disable-output-escaping="yes">-1" name="RadioGroup"/&gt;
						&lt;/td&gt;
						&lt;td width="95%" align="left"&gt;
								&lt;div id="Answer</xsl:text>
                    <xsl:value-of select="$ChapterNum"/>
                    <xsl:text>-</xsl:text>
                    <xsl:value-of select="$QuestionNum"/>
                    <xsl:text disable-output-escaping="yes">-1"&gt;</xsl:text>
                    <xsl:call-template name="BuildLocalizedString">
                        <xsl:with-param name="KeyName" select="'Yes'"/>
                    </xsl:call-template>
                    <xsl:text disable-output-escaping="yes">&lt;/div&gt;
						&lt;/td&gt;
					&lt;/tr&gt;
					&lt;tr id="Row</xsl:text>
                    <xsl:value-of select="$ChapterNum"/>
                    <xsl:text>-</xsl:text>
                    <xsl:value-of select="$QuestionNum"/>
                    <xsl:text disable-output-escaping="yes">-2"&gt;
						&lt;td width="8" valign="top"&gt;
							&lt;input align="right" type="radio" id="Choice</xsl:text>
                    <xsl:value-of select="$ChapterNum"/>
                    <xsl:text>-</xsl:text>
                    <xsl:value-of select="$QuestionNum"/>
                    <xsl:text disable-output-escaping="yes">-2" name="RadioGroup"/&gt;
						&lt;/td&gt;
						&lt;td width="95%" align="left"&gt;
								&lt;div id="Answer</xsl:text>
                    <xsl:value-of select="$ChapterNum"/>
                    <xsl:text>-</xsl:text>
                    <xsl:value-of select="$QuestionNum"/>
                    <xsl:text disable-output-escaping="yes">-2"&gt;</xsl:text>
                    <xsl:call-template name="BuildLocalizedString">
                        <xsl:with-param name="KeyName" select="'No'"/>
                    </xsl:call-template>
                    <xsl:text disable-output-escaping="yes">&lt;/div&gt;
						&lt;/td&gt;
					&lt;/tr&gt;
				&lt;/table&gt;
			&lt;/div&gt;
			</xsl:text>
                </div>
            </xsl:when>
            <xsl:otherwise>
                <div class="pivotQuestionLayout">
                    <xsl:text disable-output-escaping="yes">
			&lt;div class="pivotQuestionText" id="SurveyQuestion-</xsl:text>
                    <xsl:value-of select="../@id"/>
                    <xsl:text>-</xsl:text>
                    <xsl:value-of select="$ChapterNum"/>
                    <xsl:text disable-output-escaping="yes">-0"&gt;&lt;span class="surveyNotAnsweredIndicator" style="display:none" id="indicator</xsl:text>
                    <xsl:value-of select="$ChapterNum"/>
                    <xsl:text disable-output-escaping="yes">-0"&gt;
				</xsl:text>
                    <xsl:call-template name="BuildLocalizedString">
                        <xsl:with-param name="KeyName" select="'UnansweredSurveyIndicator'"/>
                    </xsl:call-template>
                    <xsl:text disable-output-escaping="yes">
			&lt;/span&gt;</xsl:text>
                    <xsl:call-template name="AddSurveyQuestionBody"/>
                    <xsl:text disable-output-escaping="yes">&lt;/div&gt;
			&lt;div class="pivotAnswerText" id="SurveyAnswer</xsl:text>
                    <xsl:value-of select="$ChapterNum"/>
                    <xsl:text disable-output-escaping="yes">-0"&gt;
				&lt;table id="surveyPivotQuestionTable" border="0" cellpadding="2" style="display:block"&gt;</xsl:text>
                    <xsl:for-each select="wc:Choices/wc:Choice">
                        <xsl:call-template name="AddPivotChoice">
                            <xsl:with-param name="ChapterNum" select="$ChapterNum"/>
                        </xsl:call-template>
                    </xsl:for-each>
                    <xsl:text disable-output-escaping="yes">
				&lt;/table&gt;
			&lt;/div&gt;
			</xsl:text>
                </div>
            </xsl:otherwise>
        </xsl:choose>
    </xsl:template>

    <xsl:template name="OutputText">
        <xsl:apply-templates/>
    </xsl:template>

    <xsl:template name="AddPivotChoice">
        <xsl:param name="ChapterNum"/>
        <xsl:param name="ChoiceNum" select="position()"/>

        <xsl:text disable-output-escaping="yes">
		&lt;tr id="Row</xsl:text>
        <xsl:value-of select="$ChapterNum"/>
        <xsl:text>-0-</xsl:text>
        <xsl:value-of select="$ChoiceNum"/>
        <xsl:text disable-output-escaping="yes">"&gt;
			&lt;td width="8" valign="top"&gt;
				&lt;input align="right" type="radio" id="PivotChoice</xsl:text>
        <xsl:value-of select="$ChapterNum"/>
        <xsl:text>-0-</xsl:text>
        <xsl:value-of select="$ChoiceNum"/>
        <xsl:text disable-output-escaping="yes">" name="PivotRadioGroup</xsl:text>
        <xsl:value-of select="$ChapterNum"/>
        <xsl:text>" onClick="pickedPivotAnswer(</xsl:text>
        <xsl:value-of select="$ChapterNum"/>
        <xsl:text disable-output-escaping="yes">, </xsl:text>
        <xsl:value-of select="@isTrigger"/>
        <xsl:text disable-output-escaping="yes">)"/&gt;
			&lt;/td&gt;
			&lt;td width="95%" align="left"&gt;
					&lt;div id="Answer</xsl:text>
        <xsl:value-of select="$ChapterNum"/>
        <xsl:text>-0-</xsl:text>
        <xsl:value-of select="$ChoiceNum"/>
        <xsl:text disable-output-escaping="yes">"&gt;</xsl:text>
        <xsl:call-template name="AddSurveyQuestionBody"/>
        <xsl:text disable-output-escaping="yes">&lt;/div&gt;
			&lt;/td&gt;
		&lt;/tr&gt;
		</xsl:text>
    </xsl:template>

    <xsl:template name="AddRadioChoice">
        <xsl:param name="ChapterNum"/>
        <xsl:param name="QuestionNum"/>
        <xsl:param name="ChoiceNum" select="position()"/>
        <xsl:text disable-output-escaping="yes">
		&lt;tr id="Row</xsl:text>
        <xsl:value-of select="$ChapterNum"/>
        <xsl:text>-</xsl:text>
        <xsl:value-of select="$QuestionNum"/>
        <xsl:text>-</xsl:text>
        <xsl:value-of select="$ChoiceNum"/>
        <xsl:text disable-output-escaping="yes">"&gt;
			&lt;td width="8" valign="top"&gt;
				&lt;input align="right" type="radio" id="Choice</xsl:text>
        <xsl:value-of select="$ChapterNum"/>
        <xsl:text>-</xsl:text>
        <xsl:value-of select="$QuestionNum"/>
        <xsl:text>-</xsl:text>
        <xsl:value-of select="$ChoiceNum"/>
        <xsl:text disable-output-escaping="yes">" name="RadioGroup-</xsl:text>
        <xsl:value-of select="../../@id"/>
        <xsl:text>-</xsl:text>
        <xsl:value-of select="$ChapterNum"/>
        <xsl:text disable-output-escaping="yes">" onclick="handleClick('</xsl:text>
        <xsl:value-of select="$ChapterNum"/>
        <xsl:text>-</xsl:text>
        <xsl:value-of select="$QuestionNum"/>
        <xsl:text>-</xsl:text>
        <xsl:value-of select="$ChoiceNum"/>
        <xsl:text disable-output-escaping="yes">')"/&gt;
			&lt;/td&gt;
			&lt;td width="95%" align="left"&gt;
				&lt;div id="Answer</xsl:text>
        <xsl:value-of select="$ChapterNum"/>
        <xsl:text>-</xsl:text>
        <xsl:value-of select="$QuestionNum"/>
        <xsl:text>-</xsl:text>
        <xsl:value-of select="$ChoiceNum"/>
        <xsl:text disable-output-escaping="yes">"&gt;</xsl:text>
        <xsl:call-template name="AddSurveyQuestionBody"/>
        <xsl:text disable-output-escaping="yes">&lt;/div&gt;
			&lt;/td&gt;
		&lt;/tr&gt;
		</xsl:text>
        <xsl:if test="@hasTextInput = 'true'">
            <xsl:text disable-output-escaping="yes">
		&lt;tr id="Row</xsl:text>
            <xsl:value-of select="$ChapterNum"/>
            <xsl:text>-</xsl:text>
            <xsl:value-of select="$QuestionNum"/>
            <xsl:text>-</xsl:text>
            <xsl:value-of select="$ChoiceNum"/>
            <xsl:text disable-output-escaping="yes">Extra"&gt;
			&lt;td colspan="2"&gt;&lt;input type="text" id="SurveyQuestionExtraText</xsl:text>
            <xsl:value-of select="$ChapterNum"/>
            <xsl:text>-</xsl:text>
            <xsl:value-of select="$QuestionNum"/>
            <xsl:text>-</xsl:text>
            <xsl:value-of select="$ChoiceNum"/>
            <xsl:text disable-output-escaping="yes">" maxlength="80" size="60" disabled="true"/&gt;&lt;/td&gt;
		&lt;/tr&gt;
		</xsl:text>
        </xsl:if>
    </xsl:template>

    <xsl:template name="AddCheckChoice">
        <xsl:param name="ChapterNum"/>
        <xsl:param name="QuestionNum"/>
        <xsl:param name="ChoiceNum" select="position()"/>
        <xsl:text disable-output-escaping="yes">
		&lt;tr id="Row</xsl:text>
        <xsl:value-of select="$ChapterNum"/>
        <xsl:text>-</xsl:text>
        <xsl:value-of select="$QuestionNum"/>
        <xsl:text>-</xsl:text>
        <xsl:value-of select="$ChoiceNum"/>
        <xsl:text disable-output-escaping="yes">"&gt;
			&lt;td width="8" valign="top"&gt;
				&lt;input align="right" type="checkbox" id="Choice</xsl:text>
        <xsl:value-of select="$ChapterNum"/>
        <xsl:text>-</xsl:text>
        <xsl:value-of select="$QuestionNum"/>
        <xsl:text>-</xsl:text>
        <xsl:value-of select="$ChoiceNum"/>
        <xsl:text disable-output-escaping="yes">" onclick="handleClick('</xsl:text>
        <xsl:value-of select="$ChapterNum"/>
        <xsl:text>-</xsl:text>
        <xsl:value-of select="$QuestionNum"/>
        <xsl:text>-</xsl:text>
        <xsl:value-of select="$ChoiceNum"/>
        <xsl:text disable-output-escaping="yes">')"/&gt;
			&lt;/td&gt;
			&lt;td width="95%" align="left"&gt;
				&lt;div id="Answer</xsl:text>
        <xsl:value-of select="$ChapterNum"/>
        <xsl:text>-</xsl:text>
        <xsl:value-of select="$QuestionNum"/>
        <xsl:text>-</xsl:text>
        <xsl:value-of select="$ChoiceNum"/>
        <xsl:text disable-output-escaping="yes">"&gt;</xsl:text>
        <xsl:call-template name="AddSurveyQuestionBody"/>
        <xsl:text disable-output-escaping="yes">&lt;/div&gt;
			&lt;/td&gt;
		&lt;/tr&gt;
		</xsl:text>
        <xsl:if test="@hasTextInput = 'true'">
            <xsl:text disable-output-escaping="yes">
		&lt;tr id="Row</xsl:text>
            <xsl:value-of select="$ChapterNum"/>
            <xsl:text>-</xsl:text>
            <xsl:value-of select="$QuestionNum"/>
            <xsl:text>-</xsl:text>
            <xsl:value-of select="$ChoiceNum"/>
            <xsl:text disable-output-escaping="yes">Extra"&gt;
			&lt;td colspan="2"&gt;&lt;input type="text" id="SurveyQuestionExtraText</xsl:text>
            <xsl:value-of select="$ChapterNum"/>
            <xsl:text>-</xsl:text>
            <xsl:value-of select="$QuestionNum"/>
            <xsl:text>-</xsl:text>
            <xsl:value-of select="$ChoiceNum"/>
            <xsl:text disable-output-escaping="yes">" maxlength="80" size="60" disabled="true"/&gt;&lt;/td&gt;
		&lt;/tr&gt;
		</xsl:text>
        </xsl:if>
    </xsl:template>

    <xsl:template name="CopyStartTag">
        <xsl:param name="CurElement"/>

        <xsl:text disable-output-escaping="yes">&lt;</xsl:text>
        <xsl:value-of select="$CurElement"/>
        <xsl:for-each select="@*">
            <xsl:value-of select="$Space"/>
            <xsl:value-of select="name()"/>
            <xsl:choose>
                <xsl:when test="ancestor::wc:QuizQuestion or ancestor::wc:FinalQuizQuestion or ancestor::wc:PopQuestion or ancestor::wc:PopQuiz or ancestor::wc:PopBulletin or ancestor::wc:LinkBulletin or ancestor::wc:Term or ancestor::wc:MatchGame or ancestor::wc:Game">
                    <xsl:text>=\"</xsl:text>
                    <xsl:value-of select="."/>
                    <xsl:text>\"</xsl:text>
                </xsl:when>
                <xsl:otherwise>
                    <xsl:text>="</xsl:text>
                    <xsl:value-of select="."/>
                    <xsl:text>"</xsl:text>
                </xsl:otherwise>
            </xsl:choose>
        </xsl:for-each>
        <xsl:text disable-output-escaping="yes">&gt;</xsl:text>
    </xsl:template>

    <xsl:template name="CopyEndTag">
        <xsl:param name="CurElement"/>

        <xsl:text disable-output-escaping="yes">&lt;/</xsl:text>
        <xsl:value-of select="$CurElement"/>
        <xsl:text disable-output-escaping="yes">&gt;</xsl:text>
    </xsl:template>

    <xsl:template name="BuildElement">
        <xsl:param name="CurElement"/>

        <xsl:call-template name="CopyStartTag">
            <xsl:with-param name="CurElement" select="$CurElement"/>
        </xsl:call-template>

        <xsl:apply-templates/>

        <xsl:call-template name="CopyEndTag">
            <xsl:with-param name="CurElement" select="$CurElement"/>
        </xsl:call-template>
    </xsl:template>

    <!-- this template handles any text node and determines if it's used in a javascript environment, 
			if so, call cleanQuote -->
    <!-- note also, that when normalize-space() is called, it strips ALL leading & trailing whitespace 
			- this means that there is no space before & after richtext tags, so we insert some manually! -->
    <xsl:template match="text()">
        <xsl:variable name="initStr" select="string(.)"/>
        <xsl:variable name="finalStr" select="normalize-space(.)"/>
        <xsl:variable name="leadingStr" select="substring-before($initStr, $finalStr)"/>
        <xsl:variable name="trailingStr" select="substring-after($initStr, $finalStr)"/>
        <xsl:if test="substring($initStr, 1, 1) != substring($finalStr, 1, 1)">
            <xsl:value-of select="$Space"/>
        </xsl:if>

        <xsl:choose>
            <xsl:when test="ancestor::wc:QuizQuestion or ancestor::wc:FinalQuizQuestion or ancestor::wc:PopQuestion or ancestor::wc:PopQuizQuestion or ancestor::wc:PopQuiz or ancestor::wc:PopBulletin or ancestor::wc:LinkBulletin or ancestor::wc:Term or ancestor::wc:MatchGame or ancestor::wc:Game">
                <xsl:call-template name="cleanQuote">
                    <xsl:with-param name="string" select="$finalStr"/>
                </xsl:call-template>
            </xsl:when>
            <xsl:otherwise>
                <xsl:value-of select="$finalStr"/>
            </xsl:otherwise>
        </xsl:choose>

        <xsl:if test="substring($initStr, string-length($initStr)) != substring($finalStr, string-length($finalStr))">
            <xsl:value-of select="$Space"/>
        </xsl:if>
    </xsl:template>

    <!-- Start of BaseJS.xslt -->

    <xsl:template name="AddWindowJS">
        <xsl:text disable-output-escaping="yes">
var urlArgs;
var popupHandle;
var g_timer = 0;
var g_arrWrongAnswer;
var g_correctQuestions=0;
var g_totalQuestions=0;
var strLastName = "";
var strFirstName = "[Employee's Name]";

function GetGlobal(id)
{
	var str;
	
	switch (id)
	{
		case "FirstName":
			if (typeof(objInfo) == "object" &amp;&amp; objInfo != null &amp;&amp; objInfo.firstName)
				str = objInfo.firstName;
			else
				str = strFirstName;
			break;

		case "LastName":
			if (typeof(objInfo) == "object" &amp;&amp; objInfo != null &amp;&amp; objInfo.lastName)
				str = objInfo.lastName;
			else
				str = strLastName;
			break;

		case "CurDate":
			str = getCurDate();
			break;

		case "CopyrightYears":
			str = getCopyrightYears();
			break;

		default:
			return null;
			break;
	}
	
	return str;
}

function getCurDate()
{
	var today = new Date();
	return today.toLocaleDateString();
}

function runtimeSub(mainHTML)
{
	//get all span elements
	var newText;
	var spans = null;
	if (document.all)	// IE
		spans = mainHTML.document.all.tags("SPAN");
	else	// NS 7
		spans = mainHTML.document.getElementsByTagName("SPAN");

	if (spans != null)
	{
		if (typeof(spans.length) != "undefined")
		{
			for (i = 0; i &lt; spans.length; i++)
			{
				newText = GetGlobal(spans.item(i).id);
				if (newText != null &amp;&amp; (typeof(newText) == "object" || typeof(newText) == "string"))
					spans.item(i).innerHTML = newText;
			}
		}
		else
		{
			if (spans.id)
			{
				newText = GetGlobal(spans.id);
				if (newText != null &amp;&amp; (typeof(newText) == "object" || typeof(newText) == "string"))
					spans.innerHTML = newText;
			}
		}
	}
}

function getCopyrightYears()
{
	var str;
	var baseYear = "2000";
	var now = new Date();
	var thisYear = now.getFullYear();
	if (baseYear != thisYear)
		str = baseYear + " - " + thisYear;
	else
		str = thisYear;

	return str;
}

// Quick and dirty, probably not the best idea...
function fixStaticPath(path)
{
	var outp = path;
	if (path.substr(0,1) != "/")
	{
		var staticPath = "</xsl:text>
        <xsl:value-of select="$StaticHtmlPath"/>
        <xsl:text>";
		var inp = path;
		while (staticPath.substr(0,3) == "../" &amp;&amp; inp.substr(0,3) == "../")
		{
			staticPath = staticPath.substr(3);
			inp = inp.substr(3);
			outp = outp.substr(3);
		}
		var n = staticPath.indexOf("/");
		while (n > 0)
		{
			outp = "../" + outp;
			n = staticPath.indexOf("/", n+1);
		}
	}
	return outp;
}

function getStylesheetPath()
{
	return fixStaticPath('</xsl:text>
        <xsl:value-of select="$StylePath"/>
        <xsl:value-of select="$SystemCSS"/>
        <xsl:text>');
}

function getCustomStylesheetPath()
{
	</xsl:text>
        <xsl:choose>
            <xsl:when test="$ProgramCSS != ''">
                <xsl:text>
		return fixStaticPath('</xsl:text>
                <xsl:value-of select="$StylePath"/>
                <xsl:value-of select="$ProgramCSS"/>
                <xsl:text>');
		</xsl:text>
            </xsl:when>
            <xsl:otherwise>
                <xsl:text>
		return "";
		</xsl:text>
            </xsl:otherwise>
        </xsl:choose>
        <xsl:text>
}

function printWindow()
{
	var bV = parseInt(navigator.appVersion);
	if (bV >= 4)
		window.print();
}

</xsl:text>

    </xsl:template>

    <xsl:template name="jsDivNav">
        <xsl:text>
var g_highestPage = 0;
var g_curPage = 0;
var g_bDoBookmarkUpdate = true;
function NavigateDiv(curVal, nextVal)
{
	var curDivNum = 0;
	if (curVal != null)
	{
		var cur;
		if (typeof(curVal) == "number")
		{
			var temp = "div" + curVal;
			if (document.all)	// IE
				cur = document.all.item(temp);
			else	// NS 7
				cur = document.getElementById(temp);
		}
		else if (typeof(curVal) == "string")
		{
			if (document.all)	// IE
				cur = document.all.item("div" + curVal);
			else	// NS 7
				cur = document.getElementById("div" + curVal);
		}
		else
			cur = curVal;

		if (cur!= null &amp;&amp; typeof(cur) == "object")
		{
			// turn off multimedia BEFORE hiding div!
			var name = cur.id.substring(3, cur.id.length);
			MediaPlayer.ExternalMediaToggle(false, name);

			if (cur.style.display == "block")
			{
				cur.style.display = "none";
				curDivNum = parseInt(name);
				
				// always stop - just invalidates timing
				stopChapterTiming();
			}
		}
	}
	
	if (nextVal != null)
	{
		var next;
		if (typeof(nextVal) == "number")
		{
			var temp = "div" + nextVal;
			if (document.all)	// IE
				next = document.all.item(temp);
			else	// NS 7
				next = document.getElementById(temp);
		}
		else if (typeof(nextVal) == "string")
		{
			if (document.all)	// IE
				next = document.all.item("div" + nextVal);
			else	// NS 7
				next = document.getElementById("div" + nextVal);
		}
		else
			next = nextVal;
		
		if (next != null &amp;&amp; typeof(next) == "object")
		{
			var name = next.id.substring(3, next.id.length);
			if (name != "WARN")
			{
				</xsl:text>
        <xsl:if test="$Offline != 'true'">
            <xsl:text>
/*
				if (</xsl:text>
            <xsl:value-of select="$GameChoicePage"/>
            <xsl:text disable-output-escaping="yes"> &lt;= parseInt(name) &amp;&amp; parent.lmswin != null &amp;&amp; typeof(parent.lmswin) == "object" &amp;&amp; !parent.lmswin.bHasConnectitivity)
				{
					LostConnectivity(name);
					return;
				}
*/				
				// report to lms
				if (g_bDoBookmarkUpdate)
				{
					if (!updateBookmark(name))
						return;	// failed, don't continue with current navigation....
				}
				else
					g_bDoBookmarkUpdate = true;</xsl:text>
        </xsl:if>
        <xsl:text disable-output-escaping="yes">
				
				// save page values
				g_curPage = parseInt(name);
				if (g_curPage > g_highestPage)
					g_highestPage = g_curPage;	// set the highest page visited (this is same as bookmark and needed when no LMS)
			}

			var divCert = parseInt(</xsl:text>
        <xsl:value-of select="$CertificatePage"/>
        <xsl:text>);
			var gp = "</xsl:text>
        <xsl:value-of select="$GamePage"/>
        <xsl:text>";
			if (g_curPage == divCert)
			{
				if (parent.lmswin != null &amp;&amp; typeof(parent.lmswin) == "object")
				{
					var survey = document.getElementById("SurveyAnswers");
					if (survey != null &amp;&amp; typeof(survey) == "object")
						survey.style.display = "inline";
					
					if (false == parent.lmswin.bFinished)
					{
						if (gp == "None")
						{
							// no game, tell lms we're 'finished' with game
							if (!reportScore(1, 1, false))
								return;		// just return - no connectivity
						}							
						else
						{
							if (!reportScore(g_correctQuestions, g_totalQuestions, true))
								return;		// just return - no connectivity
						}
					}
					
					// tell lms we're completely done with program
					if (typeof(parent.lmswin.end) == "function")
						parent.lmswin.end();
				}
			}
			
			if (next.style.display == "none")
			{
//				restartAnimatedGifs(next);
				rewriteFlashIllustration(next);
				next.style.display = "block";

				var nextDivNum = parseInt(name);
				// start timing if next div is a chapter and it is new, i.e. as high or greater than bookmark
				if (nextDivNum &gt;= g_highestPage &amp;&amp; nextDivNum &gt;= 1 &amp;&amp; nextDivNum &lt;= </xsl:text>
        <xsl:value-of select="$ChapterCount"/>
        <xsl:text disable-output-escaping="yes">)
					startChapterTiming();

				MediaPlayer.ExternalMediaToggle(true, name);
			}

			top.window.scrollTo(0,1);
		}
		else
		{
//			restartAnimatedGifs(cur);
			rewriteFlashIllustration(cur);
			cur.style.display = "block";
		}
	}
                scroll(0,0)
}

function DoMultimedia(bStart, nChapter)
{
/***************************
Flash frames :
0-1 Loading flash movie ( not js callable )
2 	Stream video ( not js callable )
3		Progress download ( not js callable )
4		Unpause
5		Pause
6 	Go to start position (paused/not pause according to autostart param)
****************************/

	if (navigator.userAgent.indexOf("Mac OS X") != -1)
		return;	// can't do this if Mac!!

	var audio = document.getElementById("FlashAudio" + nChapter);
	var video = document.getElementById("FlashVideo" + nChapter);
	if ( audio != null &amp;&amp; typeof(audio) != "undefined")
	{
		var bAutoPlay = eval("bAutoPlayAudio" + nChapter);
		if(bStart &amp;&amp; bAutoPlay)
		{
			audio.GotoFrame(6);
			audio.GotoFrame(4);
		}
		else
		{
			audio.GotoFrame(5);
		}
	}
	
	if (video != null &amp;&amp; typeof(video) != "undefined")
	{
		if (bStart)
		{
			// should not need to do this is autostart is true....
			video.GotoFrame(6);	// go to beginning
			video.GotoFrame(4);	// then start
		}
		else
		{
			// should not need to do this is already finished....
			video.GotoFrame(5);	// stop
		}
	}
}

function setHighlight(chapNum)
{
	var curDiv = document.getElementById("div" + chapNum);
	var divDiscussion;
	var divColl = curDiv.getElementsByTagName("div");
	for(var i = 0; i &lt; divColl.length; i++)
	{
		if (divColl.item(i).className == "chapterDiscussionText")
		{
			divDiscussion = divColl.item(i);
			break;
		}
	}

	var spanColl = divDiscussion.getElementsByTagName("span");
	for(var i = 0; i &lt; spanColl.length; i++)
	{
  		if(spanColl.item(i).className == "highlight")
		{
			spanColl.item(i).className = "noHighlight";
		}
		else if(spanColl.item(i).className == "noHighlight")
		{
			spanColl.item(i).className = "highlight";
		}
	}
}

function rewriteFlashIllustration(blockElem)
{
	var coll = blockElem.getElementsByTagName("div");
	if (coll != null &amp;&amp; typeof(coll.length) != "undefined")
	{
		for (var divNum = 0; divNum &lt; coll.length; divNum++)
		{
			if ("chapterIllustrationImage" == coll.item(divNum).className)
			{
				var temp = coll.item(divNum).innerHTML;
				AddObject(coll.item(divNum).id, temp);
			}
		}
	}
}

function restartAnimatedGifs(blockElem)
{
	var coll = blockElem.getElementsByTagName("img");
	if (coll != null &amp;&amp; typeof(coll.length) != "undefined")
	{
		for (var imgNum = 0; imgNum &lt; coll.length; imgNum++)
		{
			var str = coll.item(imgNum).src;
			str = str.toLowerCase();
			if (-1 != str.indexOf(".gif"))
			{
//				coll.item(imgNum).src = "";
				coll.item(imgNum).src = coll.item(imgNum).src;
			}
		}
	}
}

function IsFreshContent()
{
	return (g_curPage == g_highestPage);
}

function printCertificate()
{
	var bHidden = false;
	var divPrint = document.getElementById("idPrintCertificate");
	var divInstruct = document.getElementById("idCloseInstruction");
	var divMail = document.getElementById("idOfflineForm");
	if (divPrint != null &amp;&amp; typeof(divPrint) == "object" &amp;&amp;
		divInstruct != null &amp;&amp; typeof(divInstruct) == "object" &amp;&amp;
		divMail != null &amp;&amp; typeof(divMail) == "object")
	{
		divPrint.style.visibility = "hidden";
		divInstruct.style.visibility = "hidden";
		divMail.style.display = "none";
		bHidden = true;
	}

	printWindow();

	if (bHidden)
	{
		divPrint.style.visibility = "visible";
		divInstruct.style.visibility = "visible";
		if (objInfo == null)
			divMail.style.display = "block";
	}
}

function playAudio(chapterNum)
{
	var chapterFlashAudioPlayer = document.getElementById("FlashAudio"+chapterNum);
	if(null != chapterFlashAudioPlayer)
	{
		chapterFlashAudioPlayer.GotoFrame(5);
		chapterFlashAudioPlayer.GotoFrame(6);
		chapterFlashAudioPlayer.GotoFrame(4);
	}
}

function doSurveyNavigation(fromChapter, toChapter)
{
	if (toChapter &gt; fromChapter)	//forward
	{
		var strChapter = fromChapter.toString();

		var chapterDiv = document.getElementById("div" + fromChapter);
		var innerDivs = chapterDiv.getElementsByTagName("div");
		for (var i = 0; i &lt; innerDivs.length; i++)
		{
			if (innerDivs[i].id != "" &amp;&amp; innerDivs[i].id.substr(0,14) == "SurveyQuestion" )
			{
				if (innerDivs[i].id.substr((innerDivs[i].id.length-1), (innerDivs[i].id.length-1)) == "0")	//Is it a pivot question
				{
					var inputs = document.getElementById("SurveyAnswer" + fromChapter + "-0").getElementsByTagName("input");
					var filled = false;	//assume none are filled out
					var selectedPivotChoice = 0;
					for (var j = 0; j &lt; inputs.length; j++)	//loop through inputs
					{
						if (inputs[j].checked)	//is it checked?
						{
							selectedPivotChoice = j + 1;	// report one-based
							filled = true;	//it's filled out
						}
					}
					if (filled)
					{
						// If a pivot answer is selected, the rest of survey is shown
						var bPivotOnly = (document.getElementById("surveyQuestionSet" + fromChapter).style.display != "block");
						var responses = checkForFilledSurvey(fromChapter, bPivotOnly);
						if (responses != null)
						{
							if (SendChapterSurvey(strChapter, "", responses))
							{
								//clearIndicatorText(fromChapter);??
								doNextNavigation(fromChapter.toString());	//continue to next page
							}
							
							return;
						}
						else
						{
							document.getElementById("idSurveyNotAnswered" + fromChapter).style.display = "block";
						}
					}
					else
					{
						document.getElementById("indicator" + fromChapter + "-0").style.display = "inline";
						document.getElementById("idSurveyNotAnswered" + fromChapter).style.display = "block";
					}
				}
				else	//Not a pivot question
				{
					var responses = checkForFilledSurvey(fromChapter, false);
					if (responses != null)
					{
						if (SendChapterSurvey(strChapter, "", responses))
						{
							clearIndicatorText(fromChapter);
							doNextNavigation(fromChapter.toString());	//continue to next page
						}
						
						return;
					}
					else
					{
						document.getElementById("idSurveyNotAnswered" + fromChapter).style.display = "block";
					}
				}
				
				// handled survey stuff, now just get out....
				i = innerDivs.length + 1;
			}
		}
	}
	
	if (toChapter &lt; fromChapter)	//backward
	{
		clearIndicatorText(fromChapter);
		NavigateDiv(fromChapter, toChapter);
	}
}

function clearIndicatorText(chapterNum)
{	
	var i = 0;
	var indicator;

	document.getElementById("idSurveyNotAnswered" + chapterNum).style.display = "none";

	if (document.getElementById("indicator" + chapterNum + "-0") == null)
		i++;

	for (i; (indicator = document.getElementById("indicator" + chapterNum + "-" + i)) != null; i++)	//as long as there are valid indicators
	{
		indicator.style.display = "none";	//turn their display off
	}
}

function checkForFilledSurvey(chapterNum, bCheckPivotOnly)
{
	var arrResult = new Array();	// each question has an element that contains revID, choices and responses
									//	so for question x, revID is at arrResult[3x], choices is at arrResult[3x+1] and responses is at arrResult[3x+2]
	var revID, choices, responses;	//	strings to put into arrResult element
	var idxQuestion = 0;			// array starts at 0, whether or not there is a pivot question
	var filledOut = true;	//overall boolean for function
	var checked = false;	//for radio and checkboxes
	var typeOfInput = "";
	var numQuestion = 0;
	var j = 0;
	var pivotAnswerName = "SurveyAnswer"+chapterNum + "-0";	//Pivot Question
	var pivotAnswer = document.getElementById(pivotAnswerName);
	var answer;
	var divQuestionSet = document.getElementById("surveyContainer" + chapterNum);
	var collSurvyDivs = divQuestionSet.getElementsByTagName("div");
	var numSurveyDivs = collSurvyDivs.length;
	var len, strQ, lenQ, strDivId;
	
	if (pivotAnswer == null)	// if there's a pivot start numQuestion at 0, otherwise start it at 1
		numQuestion++;

	for (numQuestion; (answer = document.getElementById("SurveyAnswer" + chapterNum + "-" + numQuestion)) != null; numQuestion++)	//as long as there are valid answer sections
	{
		var inputs = answer.getElementsByTagName("input");
		var textareas = answer.getElementsByTagName("textarea");

		if (inputs.length &gt; 0)
			typeOfInput = inputs[0].type;
		else if(textareas.length &gt; 0)
			typeOfInput = "textarea";
		else
			typeOfInput = "PROBLEM";

		choices = "";
		responses = "";
		strQ = numQuestion.toString();
		lenQ = strQ.length;

		switch (typeOfInput)
		{
			case "radio":
				checked = false;	//assume no radio button is checked
				for(j = 0; j &lt; inputs.length; j++)	//loop through inputs
				{
					if (inputs[j].type == "radio")	//is it a radio button
					{
						if (inputs[j].checked)	//is the button checked?
						{	
							checked = true;		// it is checked
							choices = j + 1;	// one-based index of choice
							
							// this is either "PivotChoice" or "Choice", so search for "Choice"
							var nStart = inputs[j].id.indexOf("Choice", 0);
							if (-1 == nStart)	// this isn't a choice???
								alert("Error finding radio button in checkForFilledSurvey, id = ''" + inputs[j].id);
							var strIndex = inputs[j].id.substring(nStart+6, inputs[j].id.length);
							var answerDiv = document.getElementById("Answer" + strIndex);
							responses = answerDiv.innerHTML.replace(/&lt;\/?[^&gt;]+(&gt;|$)/g, "");	// remove all tags
							
							if (bCheckPivotOnly &amp;&amp; 0 == numQuestion)
							{
								// within the surveyContainer of DIVs
								for (j = 0; j &lt; numSurveyDivs; j++)
								{
									strDivId = collSurvyDivs[j].id;
									if (strDivId.substring(0, 15) == "SurveyQuestion-")
									{
										// found a SurveyQuestion DIV, see if it is for this question
										len = strDivId.length;
										if (strDivId.substring(len - lenQ, len) == strQ)
										{
											// yep, extract the revID from it - has form "SurveyQuestion + revID + chapterNum + question"
											revID = strDivId.substring(15, strDivId.indexOf('-', 15));
											break;
										}
									}
								}
								arrResult[0] = revID;
								arrResult[01] = choices;
								arrResult[02] = responses;
								return arrResult;
							}
						}
					}
					else	//it's not a radio it should be text
					{	
						if (inputs[j-1].checked == true)	//is the corresponding button selected making the text box visible?
						{	
							if (inputs[j].value == '')	//is it blank
								checked = false;		//the survey is NOT filled out
							else
								responses += "-" + inputs[j].value;
						}
					}
				}
				
				if (!checked)
					document.getElementById("indicator" + chapterNum + "-" + numQuestion).style.display = "inline";
				else
					document.getElementById("indicator" + chapterNum + "-" + numQuestion).style.display = "none";
					
				filledOut = filledOut &amp;&amp; checked;
				break;

			case "checkbox":
				checked = false;
				for (j = 0; j &lt; inputs.length; j++)
				{
					if (inputs[j].type == "checkbox")
					{
						if (inputs[j].checked)
						{
							checked = true;
							if (choices != '')
								choices += '|';
							choices += j + 1;	// one-based index of choice
							document.getElementById("indicator" + chapterNum + "-" + numQuestion).style.display = "none";

							// this is "Choice" so extract from 6 to end
							var strIndex = inputs[j].id.substring(6, inputs[j].id.length);
							var answerDiv = document.getElementById("Answer" + strIndex);
							if (responses != '')
								responses += '|';
							responses += answerDiv.innerHTML.replace(/&lt;\/?[^&gt;]+(&gt;|$)/g, "");	// remove all tags
						}
						else
						{
							choices += '';	// always have a placeholder
						}
					}
					else
					{
						if (inputs[j-1].checked == true)
						{
							if (inputs[j].value == '')
							{
								filledOut = filledOut &amp;&amp; false;
								document.getElementById("indicator" + chapterNum + "-" + numQuestion).style.display = "inline";
							}
							else
							{
								responses += "-" + inputs[j].value;
								document.getElementById("indicator" + chapterNum + "-" + numQuestion).style.display = "none";
							}
						}
					}
				}
				
				if (!checked)
					document.getElementById("indicator" + chapterNum + "-" + numQuestion).style.display = "inline";
					
				filledOut = filledOut &amp;&amp; checked;
				break;
	
			case "text":
				if (inputs[0].value == '')
				{
					document.getElementById("indicator" + chapterNum + "-" + numQuestion).style.display = "inline";
					filledOut = filledOut &amp;&amp; false;
				}
				else
				{
					document.getElementById("indicator" + chapterNum + "-" + numQuestion).style.display = "none";
					choices = '';
					responses = inputs[0].value;
				}
				
				break;
			
			case "textarea":
				if (textareas[0].value == '')
				{
					document.getElementById("indicator" + chapterNum + "-" + numQuestion).style.display = "inline";
					filledOut = filledOut &amp;&amp; false;
				}
				else
				{
					document.getElementById("indicator" + chapterNum + "-" + numQuestion).style.display = "none";
					choices = '';
					responses = textareas[0].value;
				}
				
				break;
			
			default:
				break;
			
		}
	
		// within the surveyContainer of DIVs
		for (j = 0; j &lt; numSurveyDivs; j++)
		{
			strDivId = collSurvyDivs[j].id;
			if (strDivId.substring(0, 15) == "SurveyQuestion-")
			{
				// found a SurveyQuestion DIV, see if it is for this question
				len = strDivId.length;
				if (strDivId.substring(len - lenQ, len) == strQ)
				{
					// yep, extract the revID from it - has form "SurveyQuestion + revID + chapterNum + question"
					revID = strDivId.substring(15, strDivId.indexOf('-', 15));
					break;
				}
			}
		}
					
		arrResult[3 * idxQuestion] = revID;
		arrResult[3 * idxQuestion + 1] = choices;
		arrResult[3 * idxQuestion + 2] = responses;
		idxQuestion++;
	}

	if (filledOut)
	{	
		document.getElementById("idSurveyNotAnswered" + chapterNum).style.display = "none";
		return arrResult;
	}
	else
	{
		document.getElementById("idSurveyNotAnswered" + chapterNum).style.display = "block";
		return null;
	}
}

function pickedPivotAnswer(chapterNum, isTrigger)
{
	var qSet = document.getElementById("surveyQuestionSet" + chapterNum);
	if (qSet != null &amp;&amp; typeof(qSet) == "object")
	{
		if (isTrigger)
			qSet.style.display = "block";
		else
			qSet.style.display = "none";
	}
}

function handleClick(id)
{
	// id is "chapter"-"question"-"choice"
	// for radio, change clicked, disable the rest
	// for check change clicked only
	var bDisableAll = true;	// if radios, disable all other text boxes in group
	var bIsChecked = false;

	var clickedObj = document.getElementById("Choice" + id);
	if (clickedObj != null &amp;&amp; typeof(clickedObj) == "object")
	{
		if (clickedObj.type == "checkbox")
			bDisableAll = false;
			
		bIsChecked = clickedObj.checked;
	}

	// now go up to common parent to retrieve all text inputs that are hopefully "optional"
	//	this is "SurveyAnswer" + chapter and question only, remove choice
	var end = id.lastIndexOf("-"); // if end isn't valid - big trouble!
	var containingId = id.substr(0, end);
	var containingObj = document.getElementById("SurveyAnswer" + containingId);
	if (containingObj != null &amp;&amp; typeof(containingObj) == "object")
	{
		var coll = containingObj.getElementsByTagName("INPUT");
		for (var i = 0; i &lt; coll.length; i++)
		{
			var curId = coll[i].id;
			if (-1 != curId.indexOf("SurveyQuestionExtraText"))
			{
				if (curId == ("SurveyQuestionExtraText" + id))	// this is textbox whose button is clicked
					coll[i].disabled = !bIsChecked;
				else if (bDisableAll)
					coll[i].disabled = true;
			}
		}
	}
}

</xsl:text>
    </xsl:template>

    <!-- End of BaseJS.xslt -->
    <!-- Start of RichText.xslt -->

    <!-- can contain br, em, strong, sub, sup -->
    <xsl:template match="wc:a">
        <xsl:choose>
            <xsl:when test="starts-with(@href, 'term:')">
                <!--	MS doesn't allow xsl:param inside of xsl:template, except as input!!!!-->
                <xsl:variable name="TermOrd" select="substring-after(@href, 'term:')"/>
                <xsl:variable name="NodeText" select="."/>
                <xsl:if test="count(ancestor::wc:Chapter/wc:Terms/wc:Term) &lt; 1">
                    <xsl:message terminate="yes">
                        <xsl:text>ERROR - > Chapter '</xsl:text>
                        <xsl:value-of select="preceding::wc:Chapter/wc:Heading"/>
                        <xsl:text>' does not contain any Terms!!</xsl:text>
                    </xsl:message>
                </xsl:if>

                <xsl:for-each select="ancestor::wc:Chapter/wc:Terms/wc:Term">
                    <xsl:if test="position() = $TermOrd">
                        <xsl:choose>
                            <xsl:when test="@variety='LegalAnnotation'">
                                <xsl:value-of select="$NodeText"/>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:call-template name="AddTermLink">
                                    <xsl:with-param name="TermOrd" select="$TermOrd"/>
                                    <xsl:with-param name="NodeText" select="$NodeText"/>
                                </xsl:call-template>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:if>
                </xsl:for-each>
            </xsl:when>
            <xsl:when test="starts-with(@href, 'linkbulletin:')">
                <!--	MS doesn't allow xsl:param inside of xsl:template, except as input!!!!-->
                <xsl:variable name="NodeText" select="."/>
                <xsl:variable name="LinkID" select="substring-after(@href, 'linkbulletin:')"/>
                <xsl:if test="count(ancestor::wc:Chapter/wc:LinkBulletins/wc:LinkBulletin) &lt; 1">
                    <xsl:message terminate="yes">
                        <xsl:text>ERROR - > Chapter '</xsl:text>
                        <xsl:value-of select="preceding::wc:Chapter/wc:Heading"/>
                        <xsl:text>' does not contain any LinkBulletins!!</xsl:text>
                    </xsl:message>
                </xsl:if>

                <xsl:for-each select="ancestor::wc:Chapter/wc:LinkBulletins/wc:LinkBulletin">
                    <xsl:if test="@ordinal = $LinkID">
                        <xsl:text disable-output-escaping="yes">&lt;a</xsl:text>
                        <xsl:call-template name="AddStartLinkBulletin">
                            <xsl:with-param name="LinkID" select="$LinkID"/>
                        </xsl:call-template>
                        <xsl:text disable-output-escaping="yes">&gt;</xsl:text>
                        <xsl:value-of select="$NodeText"/>
                        <xsl:text disable-output-escaping="yes">&lt;/a&gt;</xsl:text>
                    </xsl:if>
                </xsl:for-each>
            </xsl:when>
            <xsl:when test="starts-with(@href, 'navigate:')">
                <!--	MS doesn't allow xsl:param inside of xsl:template, except as input!!!!-->
                <xsl:variable name="NavType" select="substring-after(@href, 'navigate:')"/>
                <xsl:variable name="CurChapter" select="count(preceding::wc:Chapter)+1"/>
                <xsl:choose>
                    <xsl:when test="$NavType = 'previous'">
                        <xsl:choose>
                            <xsl:when test="$CurChapter &lt;= 1">
                                <xsl:message terminate="yes">
                                    <xsl:text>ERROR -> Cannot use navigate:previous in first Chapter </xsl:text>
                                </xsl:message>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text disable-output-escaping="yes">&lt;form&gt;&lt;input type='button' value='</xsl:text>
                                <xsl:apply-templates/>
                                <xsl:text>' onClick='NavigateDiv(</xsl:text>
                                <xsl:value-of select="$CurChapter"/>
                                <xsl:text>, </xsl:text>
                                <xsl:value-of select="$CurChapter - 1"/>
                                <xsl:text disable-output-escaping="yes">)'&gt;&lt;/form&gt;</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:when>
                    <xsl:when test="$NavType = 'next'">
                        <xsl:text disable-output-escaping="yes">
				&lt;form&gt;&lt;input type='button' value='</xsl:text>
                        <xsl:apply-templates/>
                        <xsl:text>' </xsl:text>
                        <xsl:call-template name="AddNextChapterOnClick">
                            <xsl:with-param name="CurChapter" select="$CurChapter"/>
                        </xsl:call-template>
                        <xsl:text disable-output-escaping="yes">&gt;&lt;/form&gt;</xsl:text>
                    </xsl:when>
                    <xsl:when test="$NavType = 'exitChapters'">
                        <xsl:text disable-output-escaping="yes">
				&lt;form&gt;&lt;input type='button' value='</xsl:text>
                        <xsl:apply-templates/>
                        <xsl:text>' </xsl:text>
                        <xsl:call-template name="AddExitChaptersOnClick">
                            <xsl:with-param name="CurChapter" select="$CurChapter"/>
                        </xsl:call-template>
                        <xsl:text disable-output-escaping="yes">&gt;&lt;/form&gt;</xsl:text>
                    </xsl:when>
                    <xsl:when test="starts-with($NavType, 'moveForward(')">
                        <xsl:variable name="tempChap" select="substring-after($NavType, 'moveForward(')"/>
                        <xsl:variable name="movement" select="substring-before($tempChap, ')')"/>
                        <xsl:if test="not($movement &gt;= 1)">
                            <xsl:message terminate="yes">
                                <xsl:text>ERROR -> Invalid parameter specified for moveForward '</xsl:text>
                            </xsl:message>
                        </xsl:if>
                        <xsl:variable name="NewChapter" select="$CurChapter + $movement"/>
                        <xsl:text disable-output-escaping="yes">
				&lt;form&gt;&lt;input type='button' value='</xsl:text>
                        <xsl:apply-templates/>
                        <xsl:text>' </xsl:text>
                        <xsl:choose>
                            <xsl:when test="$NewChapter &gt; $ChapterCount">
                                <xsl:call-template name="AddExitChaptersOnClick">
                                    <xsl:with-param name="CurChapter" select="$CurChapter"/>
                                </xsl:call-template>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>' onClick='NavigateDiv(</xsl:text>
                                <xsl:value-of select="$CurChapter"/>
                                <xsl:text>, </xsl:text>
                                <xsl:value-of select="$NewChapter"/>
                                <xsl:text disable-output-escaping="yes">)'&gt;&lt;/form&gt;</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:when>
                    <xsl:when test="starts-with($NavType, 'moveBackward(')">
                        <xsl:variable name="tempChap" select="substring-after($NavType, 'moveBackward(')"/>
                        <xsl:variable name="movement" select="substring-before($tempChap, ')')"/>
                        <xsl:if test="not($movement &gt;= 1)">
                            <xsl:message terminate="yes">
                                <xsl:text>ERROR -> Invalid parameter specified for moveBackward '</xsl:text>
                            </xsl:message>
                        </xsl:if>
                        <xsl:variable name="NewChapter" select="$CurChapter - $movement"/>
                        <xsl:text disable-output-escaping="yes">
				&lt;form&gt;&lt;input type='button' value='</xsl:text>
                        <xsl:apply-templates/>
                        <xsl:text>' </xsl:text>
                        <xsl:choose>
                            <xsl:when test="$NewChapter &lt;= 1">
                                <xsl:text>onClick='NavigateDiv(</xsl:text>
                                <xsl:value-of select="$CurChapter"/>
                                <xsl:text>, 1)'</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>' onClick='NavigateDiv(</xsl:text>
                                <xsl:value-of select="$CurChapter"/>
                                <xsl:text>, </xsl:text>
                                <xsl:value-of select="$NewChapter"/>
                                <xsl:text disable-output-escaping="yes">)'&gt;&lt;/form&gt;</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:when>
                    <xsl:otherwise>
                        <xsl:message terminate="yes">
                            <xsl:text>ERROR - > Invalid navigate type '</xsl:text>
                            <xsl:value-of select="$NavType"/>
                            <xsl:text>'</xsl:text>
                        </xsl:message>
                    </xsl:otherwise>
                </xsl:choose>
            </xsl:when>
            <xsl:otherwise>
                <xsl:call-template name="BuildElement">
                    <xsl:with-param name="CurElement" select="name()"/>
                </xsl:call-template>
            </xsl:otherwise>
        </xsl:choose>
    </xsl:template>

    <xsl:template name="AddExitChaptersOnClick">
        <xsl:param name="CurChapter"/>
        <xsl:choose>
            <xsl:when test="$Offline = 'true'">
                <xsl:text>onClick='StartQuiz("div</xsl:text>
                <xsl:value-of select="$CurChapter"/>
                <xsl:text disable-output-escaping="yes">", "TOC")'</xsl:text>
            </xsl:when>
            <xsl:otherwise>
                <xsl:choose>
                    <xsl:when test="$AckPage = 0 and $GameChoicePage = $GamePage">
                        <xsl:text>onClick='NavigateDiv(</xsl:text>
                        <xsl:value-of select="$CurChapter"/>
                        <xsl:text>, </xsl:text>
                        <xsl:value-of select="$GameChoicePage"/>
                        <xsl:text disable-output-escaping="yes">);javascript:startGame(</xsl:text>
                        <xsl:value-of select="$FirstGamePosition"/>
                        <xsl:text>)'</xsl:text>
                    </xsl:when>
                    <xsl:when test="$AckPage = 0 and $GameChoicePage != $GamePage">
                        <xsl:text>onClick='NavigateDiv(</xsl:text>
                        <xsl:value-of select="$CurChapter"/>
                        <xsl:text>, </xsl:text>
                        <xsl:value-of select="$GameChoicePage"/>
                        <xsl:text disable-output-escaping="yes">)'</xsl:text>
                    </xsl:when>
                    <xsl:otherwise>
                        <xsl:text>onClick='NavigateDiv(</xsl:text>
                        <xsl:value-of select="$CurChapter"/>
                        <xsl:text>, </xsl:text>
                        <xsl:value-of select="$AckPage"/>
                        <xsl:text disable-output-escaping="yes">)'</xsl:text>
                    </xsl:otherwise>
                </xsl:choose>
            </xsl:otherwise>
        </xsl:choose>
    </xsl:template>

    <xsl:template name="AddNextChapterOnClick">
        <xsl:param name="CurChapter"/>
        <xsl:choose>
            <xsl:when test="$CurChapter + 1 = $AckPage">
                <xsl:text>onClick='NavigateDiv(</xsl:text>
                <xsl:value-of select="$CurChapter"/>
                <xsl:text>, </xsl:text>
                <xsl:value-of select="$AckPage"/>
                <xsl:text disable-output-escaping="yes">)'</xsl:text>
            </xsl:when>
            <xsl:when test="$CurChapter + 1 = $GameChoicePage">
                <xsl:choose>
                    <xsl:when test="$Offline = 'true'">
                        <xsl:text>onClick='StartQuiz("div</xsl:text>
                        <xsl:value-of select="$CurChapter"/>
                        <xsl:text disable-output-escaping="yes">", "TOC")'</xsl:text>
                    </xsl:when>
                    <xsl:when test="$GameChoicePage = $GamePage">
                        <xsl:text>onClick='NavigateDiv(</xsl:text>
                        <xsl:value-of select="$CurChapter"/>
                        <xsl:text>, </xsl:text>
                        <xsl:value-of select="$GameChoicePage"/>
                        <xsl:text disable-output-escaping="yes">);javascript:startGame(</xsl:text>
                        <xsl:value-of select="$FirstGamePosition"/>
                        <xsl:text>)'</xsl:text>
                    </xsl:when>
                    <xsl:otherwise>
                        <!-- test="$GameChoicePage != $GamePage" -->
                        <xsl:text>onClick='NavigateDiv(</xsl:text>
                        <xsl:value-of select="$CurChapter"/>
                        <xsl:text>, </xsl:text>
                        <xsl:value-of select="$GameChoicePage"/>
                        <xsl:text disable-output-escaping="yes">)'</xsl:text>
                    </xsl:otherwise>
                </xsl:choose>
            </xsl:when>
            <xsl:otherwise>
                <xsl:text>onClick='NavigateDiv(</xsl:text>
                <xsl:value-of select="$CurChapter"/>
                <xsl:text>, </xsl:text>
                <xsl:value-of select="$CurChapter + 1"/>
                <xsl:text disable-output-escaping="yes">)'</xsl:text>
            </xsl:otherwise>
        </xsl:choose>
    </xsl:template>

    <xsl:template name="AddTermLink">
        <xsl:param name="TermOrd" select="$TermOrd"/>
        <xsl:param name="NodeText" select="$NodeText"/>

        <xsl:choose>
            <xsl:when test="$Offline = 'true'">
                <xsl:text disable-output-escaping="yes">&lt;a</xsl:text>
                <xsl:call-template name="AddOfflineStartTermLink"/>
                <xsl:text disable-output-escaping="yes">&gt;</xsl:text>
                <xsl:value-of select="$NodeText"/>
                <xsl:text disable-output-escaping="yes">&lt;/a&gt;&lt;span class="superScript" style="display:none"&gt; </xsl:text>
                <xsl:value-of select="$TermOrd"/>
                <xsl:text disable-output-escaping="yes">&lt;/span&gt;</xsl:text>
            </xsl:when>
            <xsl:otherwise>
                <xsl:text disable-output-escaping="yes">&lt;a</xsl:text>
                <xsl:call-template name="AddStartTermLink">
                    <xsl:with-param name="TermOrd" select="$TermOrd"/>
                </xsl:call-template>
                <xsl:text disable-output-escaping="yes">&gt;</xsl:text>
                <xsl:value-of select="$NodeText"/>
                <xsl:text disable-output-escaping="yes">&lt;/a&gt;</xsl:text>
            </xsl:otherwise>
        </xsl:choose>
    </xsl:template>

    <xsl:template name="AddStartLinkBulletin">
        <xsl:param name="LinkID"/>
        <xsl:if test="$LinkID = @ordinal">
            <xsl:choose>
                <xsl:when test="$Offline = 'true'">
                    <xsl:text> class="offlineBulletinLinkText" href="javascript:void(0)" onClick="gotoElement('</xsl:text>
                    <xsl:value-of select="$LinkID"/>
                    <xsl:text>Def', 'div</xsl:text>
                    <xsl:value-of select="count(preceding::wc:Chapter)+1"/>
                    <xsl:text>')" onmouseover="window.status='</xsl:text>
                    <xsl:call-template name="BuildLocalizedString">
                        <xsl:with-param name="KeyName" select="'Clickformore'"/>
                    </xsl:call-template>
                    <xsl:text>'; return true"</xsl:text>
                </xsl:when>
                <xsl:otherwise>
                    <xsl:text> href="javascript:void('</xsl:text>
                    <xsl:value-of select="/wc:Course/@id"/>
                    <xsl:value-of select="@id"/>
                    <xsl:text>')" onmouseover="window.status='</xsl:text>
                    <xsl:call-template name="BuildLocalizedString">
                        <xsl:with-param name="KeyName" select="'Clickformore'"/>
                    </xsl:call-template>
                    <xsl:text>'; return true" onClick="popUpBulletin('l','</xsl:text>
                    <xsl:value-of select="count(preceding::wc:Chapter) + 1"/>
                    <xsl:text>-</xsl:text>
                    <xsl:value-of select="@id"/>
                    <xsl:text>','0',</xsl:text>
                    <xsl:value-of select="@height"/>
                    <xsl:text>,</xsl:text>
                    <xsl:value-of select="@width"/>
                    <xsl:text>)"</xsl:text>
                </xsl:otherwise>
            </xsl:choose>
        </xsl:if>
    </xsl:template>

    <!-- cannot contain anything -->
    <xsl:template match="wc:b">
        <xsl:call-template name="BuildElement">
            <xsl:with-param name="CurElement" select="name()"/>
        </xsl:call-template>
    </xsl:template>

    <!-- can contain a, br, p, h1, h2, h3, h4, h5, ul, ol, dl, pre, blockquote, table -->
    <xsl:template match="wc:blockquote">
        <xsl:call-template name="BuildElement">
            <xsl:with-param name="CurElement" select="name()"/>
        </xsl:call-template>
    </xsl:template>

    <!-- cannot contain anything -->
    <xsl:template match="wc:br">
        <br/>
    </xsl:template>

    <!-- can contain a, br, p, h1, h2, h3, ul, ol, dl, pre, blockquote, table, em, strong, sub, sup -->
    <xsl:template match="wc:dd">
        <xsl:call-template name="BuildElement">
            <xsl:with-param name="CurElement" select="name()"/>
        </xsl:call-template>
    </xsl:template>

    <!-- can contain dt, dd -->
    <xsl:template match="wc:dl">
        <xsl:call-template name="BuildElement">
            <xsl:with-param name="CurElement" select="name()"/>
        </xsl:call-template>
    </xsl:template>

    <!-- can contain a, br, em, i, b, u, strong, sub, sup, span -->
    <xsl:template match="wc:dt">
        <xsl:call-template name="BuildElement">
            <xsl:with-param name="CurElement" select="name()"/>
        </xsl:call-template>
    </xsl:template>

    <!-- can contain a, br, em, i, b, u, strong, sub, sup, span -->
    <xsl:template match="wc:em">
        <xsl:call-template name="BuildElement">
            <xsl:with-param name="CurElement" select="name()"/>
        </xsl:call-template>
    </xsl:template>

    <!-- can contain a, br, em, i, b, u, strong, sub, sup, span -->
    <xsl:template match="wc:h1">
        <xsl:call-template name="BuildElement">
            <xsl:with-param name="CurElement" select="name()"/>
        </xsl:call-template>
    </xsl:template>

    <!-- can contain a, br, em, i, b, u, strong, sub, sup, span -->
    <xsl:template match="wc:h2">
        <xsl:call-template name="BuildElement">
            <xsl:with-param name="CurElement" select="name()"/>
        </xsl:call-template>
    </xsl:template>

    <!-- can contain a, br, em, i, b, u, strong, sub, sup, span -->
    <xsl:template match="wc:h3">
        <xsl:call-template name="BuildElement">
            <xsl:with-param name="CurElement" select="name()"/>
        </xsl:call-template>
    </xsl:template>

    <!-- can contain a, br, em, i, b, u, strong, sub, sup, span -->
    <xsl:template match="wc:h4">
        <xsl:call-template name="BuildElement">
            <xsl:with-param name="CurElement" select="name()"/>
        </xsl:call-template>
    </xsl:template>

    <!-- can contain a, br, em, i, b, u, strong, sub, sup, span -->
    <xsl:template match="wc:h5">
        <xsl:call-template name="BuildElement">
            <xsl:with-param name="CurElement" select="name()"/>
        </xsl:call-template>
    </xsl:template>

    <!-- can contain a, br, em, i, b, u, strong, sub, sup, span -->
    <xsl:template match="wc:h6">
        <xsl:call-template name="BuildElement">
            <xsl:with-param name="CurElement" select="name()"/>
        </xsl:call-template>
    </xsl:template>

    <!-- can contain a, br, em, i, b, u, strong, sub, sup, span -->
    <xsl:template match="wc:h7">
        <xsl:call-template name="BuildElement">
            <xsl:with-param name="CurElement" select="name()"/>
        </xsl:call-template>
    </xsl:template>

    <!-- cannot contain anything -->
    <xsl:template match="wc:hr">
        <xsl:call-template name="BuildElement">
            <xsl:with-param name="CurElement" select="name()"/>
        </xsl:call-template>
    </xsl:template>

    <!-- cannot contain anything -->
    <xsl:template match="wc:i">
        <xsl:call-template name="BuildElement">
            <xsl:with-param name="CurElement" select="name()"/>
        </xsl:call-template>
    </xsl:template>

    <!-- can contain a, br, p, h1, h2, h3, ul, ol, dl, pre, blockquote, table, em, strong, sub, sup -->
    <xsl:template match="wc:li">
        <xsl:call-template name="BuildElement">
            <xsl:with-param name="CurElement" select="name()"/>
        </xsl:call-template>
    </xsl:template>

    <!-- can contain li -->
    <xsl:template match="wc:ol">
        <xsl:call-template name="BuildElement">
            <xsl:with-param name="CurElement" select="name()"/>
        </xsl:call-template>
    </xsl:template>

    <!-- can contain a, br, em, i, b, u, strong, sub, sup, span -->
    <xsl:template match="wc:p">
        <xsl:call-template name="BuildElement">
            <xsl:with-param name="CurElement" select="name()"/>
        </xsl:call-template>
    </xsl:template>

    <!-- can contain a, br, em, i, b, u, strong, sub, sup, span -->
    <xsl:template match="wc:pre">
        <xsl:call-template name="BuildElement">
            <xsl:with-param name="CurElement" select="name()"/>
        </xsl:call-template>
    </xsl:template>

    <xsl:template match="wc:span">
        <xsl:call-template name="BuildElement">
            <xsl:with-param name="CurElement" select="name()"/>
        </xsl:call-template>
    </xsl:template>

    <!-- can contain a, br, em, i, b, u, strong, sub, sup, span -->
    <xsl:template match="wc:strong">
        <xsl:call-template name="BuildElement">
            <xsl:with-param name="CurElement" select="name()"/>
        </xsl:call-template>
    </xsl:template>

    <!-- can contain a, br, em, i, b, u, strong, sub, sup, span -->
    <xsl:template match="wc:sub">
        <xsl:call-template name="BuildElement">
            <xsl:with-param name="CurElement" select="name()"/>
        </xsl:call-template>
    </xsl:template>

    <!-- can contain a, br, em, i, b, u, strong, sub, sup, span -->
    <xsl:template match="wc:sup">
        <xsl:call-template name="BuildElement">
            <xsl:with-param name="CurElement" select="name()"/>
        </xsl:call-template>
    </xsl:template>

    <!-- can contain tr -->
    <xsl:template match="wc:table">
        <xsl:call-template name="BuildElement">
            <xsl:with-param name="CurElement" select="name()"/>
        </xsl:call-template>
    </xsl:template>

    <!-- can contain a, br, p, h1, h2, h3, ul, ol, dl, pre, blockquote, table, em, strong, sub, sup -->
    <xsl:template match="wc:td">
        <xsl:call-template name="BuildElement">
            <xsl:with-param name="CurElement" select="name()"/>
        </xsl:call-template>
    </xsl:template>

    <!-- can contain a, br, p, h1, h2, h3, ul, ol, dl, pre, blockquote, table, em, strong, sub, sup -->
    <xsl:template match="wc:th">
        <xsl:call-template name="BuildElement">
            <xsl:with-param name="CurElement" select="name()"/>
        </xsl:call-template>
    </xsl:template>

    <!-- can contain th, td -->
    <xsl:template match="wc:tr">
        <xsl:call-template name="BuildElement">
            <xsl:with-param name="CurElement" select="name()"/>
        </xsl:call-template>
    </xsl:template>

    <!-- cannot contain anything -->
    <xsl:template match="wc:u">
        <xsl:call-template name="BuildElement">
            <xsl:with-param name="CurElement" select="name()"/>
        </xsl:call-template>
    </xsl:template>

    <!-- can contain li -->
    <xsl:template match="wc:ul">
        <xsl:call-template name="BuildElement">
            <xsl:with-param name="CurElement" select="name()"/>
        </xsl:call-template>
    </xsl:template>

    <!-- End of RichText.xslt -->
    <!-- Start of Localize.xslt -->

    <xsl:template name="BuildLocalizedStringWithParms">
        <xsl:param name="local"/>
        <xsl:param name="Parm1"></xsl:param>
        <xsl:param name="Parm2"></xsl:param>
        <xsl:param name="Parm3"></xsl:param>

        <xsl:choose>
            <xsl:when test="contains($local, '$')">
                <xsl:value-of select="substring-before($local, '$')" disable-output-escaping="yes"/>
                <xsl:variable name="remaining" select="substring-after($local, '$')"/>

                <xsl:choose>
                    <xsl:when test="starts-with($remaining, '1')">
                        <xsl:value-of select="$Parm1" disable-output-escaping="yes"/>
                    </xsl:when>
                    <xsl:when test="starts-with($remaining, '2')">
                        <xsl:value-of select="$Parm2" disable-output-escaping="yes"/>
                    </xsl:when>
                    <xsl:when test="starts-with($remaining, '3')">
                        <xsl:value-of select="$Parm3" disable-output-escaping="yes"/>
                    </xsl:when>
                    <xsl:otherwise>
                        <xsl:message terminate="yes">
                            <xsl:text>ERROR -> BuildLocalizedStringWithParms - Invalid parameter specifier '$</xsl:text>
                            <xsl:value-of select="substring($remaining, 1, 1)"/>
                            <xsl:text>' </xsl:text>
                        </xsl:message>
                    </xsl:otherwise>
                </xsl:choose>

                <xsl:call-template name="BuildLocalizedStringWithParms">
                    <xsl:with-param name="local" select="substring($remaining, 2)"/>
                    <xsl:with-param name="Parm1" select="$Parm1"/>
                    <xsl:with-param name="Parm2" select="$Parm2"/>
                    <xsl:with-param name="Parm3" select="$Parm3"/>
                </xsl:call-template>

            </xsl:when>
            <xsl:otherwise>
                <xsl:value-of select="$local" disable-output-escaping="yes"/>
            </xsl:otherwise>
        </xsl:choose>
    </xsl:template>

    <xsl:template name="BuildLocalizedString">
        <xsl:param name="KeyName"/>
        <xsl:param name="usedInJS" select="false()"/>
        <xsl:param name="Parm1"></xsl:param>
        <xsl:param name="Parm2"></xsl:param>
        <xsl:param name="Parm3"></xsl:param>

        <xsl:variable name="out">
            <xsl:call-template name="BuildLocalizedStringWithParms">
                <xsl:with-param name="local" select="weo:GetLocalizedString($KeyName,$Language)"/>
                <xsl:with-param name="Parm1" select="$Parm1"/>
                <xsl:with-param name="Parm2" select="$Parm2"/>
                <xsl:with-param name="Parm3" select="$Parm3"/>
            </xsl:call-template>
        </xsl:variable>

        <xsl:choose>
            <xsl:when test="$usedInJS">
                <xsl:call-template name="cleanQuote">
                    <xsl:with-param name="string" select="$out"/>
                </xsl:call-template>
            </xsl:when>
            <xsl:otherwise>
                <xsl:value-of select="$out" disable-output-escaping="yes"/>
            </xsl:otherwise>
        </xsl:choose>
    </xsl:template>

    <!-- End of Localize.xslt -->

    <!-- start of Interactive.xslt -->

    <xsl:template name="BuildTheChapters">
        <xsl:for-each select="wc:Chapters/wc:Chapter">
            <xsl:text disable-output-escaping="yes">&lt;DIV id="div</xsl:text>
            <xsl:value-of select="position()"/>
            <xsl:text>" title='</xsl:text>
            <xsl:value-of select="wc:Heading"/>
            <xsl:text>' class="chapterDivLayout</xsl:text>
            <xsl:choose>
                <xsl:when test="@variety = 'Memorandum'">
                    <xsl:text>Memorandum</xsl:text>
                </xsl:when>
                <xsl:when test="@variety = 'Wide'">
                    <xsl:text>Wide</xsl:text>
                </xsl:when>
                <xsl:otherwise>
                    <xsl:text>Standard" align="center</xsl:text>
                </xsl:otherwise>
            </xsl:choose>
            <xsl:text disable-output-escaping="yes">" style="display:none"&gt;</xsl:text>
            <xsl:choose>
                <xsl:when test="@variety = 'Memorandum'">
                    <xsl:call-template name="BuildMemorandumChapterLayout"/>
                </xsl:when>
                <xsl:when test="@variety = 'Wide'">
                    <xsl:call-template name="BuildWideChapterLayout"/>
                </xsl:when>
                <xsl:otherwise>
                    <xsl:call-template name="BuildStandardChapterLayout"/>

                    <!--
   add "variety" attribute which can be "Standard" or "Raw" (default to
Standard). Standard is the way it is now. Raw means the Discussion should
be translated directly to the HTML, without the chapter heading and
illustration. Raw mode will be used for the first page of the course,
which is usually in "Memorandum" style.
-->
                </xsl:otherwise>
            </xsl:choose>
            <xsl:text disable-output-escaping="yes">
			&lt;/DIV&gt;</xsl:text>
        </xsl:for-each>
    </xsl:template>

    <xsl:template name="BuildTheAcknowledgment">
        <xsl:for-each select="wc:Acknowledgment">
            <xsl:text disable-output-escaping="yes">&lt;DIV id="div</xsl:text>
            <xsl:value-of select="$AckPage"/>
            <xsl:text>" title='</xsl:text>
            <xsl:value-of select="wc:Heading"/>
            <xsl:text disable-output-escaping="yes">' style="position:absolute; top:'idBody.style.margin-top'; left:'idBody.style.margin-left'; display:none;"&gt;</xsl:text>
            <xsl:call-template name="BuildAcknowledgeLayout"/>
            <xsl:text disable-output-escaping="yes">&lt;/DIV&gt;</xsl:text>
        </xsl:for-each>
    </xsl:template>


    <xsl:template name="BuildTheRefusal">
        <xsl:text disable-output-escaping="yes">&lt;DIV id="divNOACK" title="Refuse to acknowledge" style="position:absolute; top:'idBody.style.margin-top'; left:'idBody.style.margin-left'; display:none;"&gt;</xsl:text>
        <xsl:call-template name="BuildRefusalLayout"/>
        <xsl:text disable-output-escaping="yes">&lt;/DIV&gt;</xsl:text>
    </xsl:template>

    <xsl:template name="BuildChooseGames">
        <xsl:text disable-output-escaping="yes">&lt;DIV id="div</xsl:text>
        <xsl:value-of select="$GameChoicePage"/>
        <xsl:text>" title="Choose a game" style="position:absolute; top:'idBody.style.margin-top'; left:'idBody.style.margin-left'; display:none;"&gt;</xsl:text>
        <xsl:call-template name="BuildChooseGameLayout"/>
        <xsl:text disable-output-escaping="yes">&lt;/DIV&gt;</xsl:text>
    </xsl:template>

    <xsl:template name="BuildGames">
        <xsl:text disable-output-escaping="yes">&lt;DIV id="div</xsl:text>
        <xsl:value-of select="$GamePage"/>
        <xsl:text disable-output-escaping="yes">" title="Please do not close this window" style="display:none;"&gt;</xsl:text>
        <xsl:call-template name="BuildGamePageLayout"/>
        <!-- no navigation for game -->
        <xsl:text disable-output-escaping="yes">&lt;/DIV&gt;</xsl:text>
    </xsl:template>

    <xsl:template name="AddGamePageText">
        <xsl:call-template name="BuildLocalizedString">
            <xsl:with-param name="KeyName" select="'DoNotClose'"/>
        </xsl:call-template>
    </xsl:template>

    <xsl:template name="BuildTheCertificate">
        <xsl:text disable-output-escaping="yes">&lt;DIV id="div</xsl:text>
        <xsl:value-of select="$CertificatePage"/>
        <xsl:text>" title='</xsl:text>
        <xsl:call-template name="BuildLocalizedString">
            <xsl:with-param name="KeyName" select="'CertificateofCompletion'"/>
        </xsl:call-template>
        <xsl:text>' class="chapterMainLayout certificateMainLayout" style="width:80%; display:none;"&gt;</xsl:text>
        <xsl:call-template name="BuildCertificateLayout"/>
        <xsl:text disable-output-escaping="yes">&lt;/DIV&gt;</xsl:text>
    </xsl:template>

    <xsl:template name="AddAckBody">
        <xsl:for-each select="wc:Body">
            <xsl:call-template name="OutputText"/>
        </xsl:for-each>
    </xsl:template>

    <xsl:template name="AddAckRefusalButton">
        <xsl:text disable-output-escaping="yes">&lt;input type="button" value="</xsl:text>
        <xsl:call-template name="BuildLocalizedString">
            <xsl:with-param name="KeyName" select="'AckNotAgree'"/>
        </xsl:call-template>
        <xsl:text>" onClick="</xsl:text>
        <xsl:value-of select="$AckPrev"/>
        <xsl:text disable-output-escaping="yes">"/&gt;</xsl:text>
    </xsl:template>

    <xsl:template name="AddAckAgreeButton">
        <xsl:text disable-output-escaping="yes">&lt;input type="button" value=" </xsl:text>
        <xsl:call-template name="BuildLocalizedString">
            <xsl:with-param name="KeyName" select="'AckAgree'"/>
        </xsl:call-template>
        <xsl:text> " onClick="</xsl:text>
        <xsl:value-of select="$AckNext"/>
        <xsl:if  test="$NumGamesAvailable = 1">
            <xsl:call-template name="AddStartOnlyGame"/>
        </xsl:if>
        <xsl:text disable-output-escaping="yes">"/&gt;</xsl:text>
    </xsl:template>

    <xsl:template name="AddRefusalHeading">
        <div class="headingText">
            <xsl:apply-templates select="wc:Heading/node()"/>
        </div>
    </xsl:template>

    <xsl:template name="AddRefusal">
        <div class="chapterDiscussionText">
            <xsl:for-each select="wc:Acknowledgment/wc:Refusal">
                <xsl:call-template name="OutputText"/>
            </xsl:for-each>
            <xsl:variable name="ExitOnRefusal">
                <xsl:value-of select="wc:Acknowledgment/@exitOnRefusal"/>
            </xsl:variable>
            <form>
                <div align="center">
                    <!-- if Previous btn enabled -->
                    <xsl:text disable-output-escaping="yes">&lt;input type="button" value="</xsl:text>
                    <xsl:call-template name="BuildLocalizedString">
                        <xsl:with-param name="KeyName" select="'Previous'"/>
                    </xsl:call-template>
                    <xsl:text>" onClick="NavigateDiv('NOACK', </xsl:text>
                    <xsl:value-of select="$AckPage"/>
                    <xsl:text disable-output-escaping="yes">)"/&gt;</xsl:text>
                    <xsl:choose>
                        <xsl:when test="$ExitOnRefusal = 'false'">
                            <xsl:text disable-output-escaping="yes">&lt;input type="button" value=" </xsl:text>
                            <xsl:call-template name="BuildLocalizedString">
                                <xsl:with-param name="KeyName" select="'Continue'"/>
                            </xsl:call-template>
                            <xsl:text> " onClick="</xsl:text>
                            <xsl:value-of select="$NoAckContinue"/>
                            <xsl:if  test="$NumGamesAvailable = 1">
                                <xsl:call-template name="AddStartOnlyGame"/>
                            </xsl:if>
                            <xsl:text disable-output-escaping="yes">"/&gt;</xsl:text>
                        </xsl:when>
                        <xsl:otherwise>
                            <xsl:text disable-output-escaping="yes">&lt;input type="button" value=" </xsl:text>
                            <xsl:call-template name="BuildLocalizedString">
                                <xsl:with-param name="KeyName" select="'Exit'"/>
                            </xsl:call-template>
                            <xsl:text disable-output-escaping="yes"> " onClick="reportNoAck(true);top.close()"/&gt;</xsl:text>
                        </xsl:otherwise>
                    </xsl:choose>
                </div>
            </form>
        </div>
    </xsl:template>

    <xsl:template name="AddChooseGameIntro">
        <td class="chapterDiscussionText">
            <xsl:for-each select="wc:Quiz/wc:Introduction">
                <xsl:call-template name="BuildQuizIntro"/>
            </xsl:for-each>
        </td>
    </xsl:template>

    <xsl:template name="AddGameChoices">
        <td class="chapterDiscussionText">
            <table border="0" cellpadding="6" cellspacing="0" width="95%" align="center">
                <xsl:call-template name="BuildGameChoices"/>
            </table>
        </td>
    </xsl:template>

    <xsl:template name="AddCertificatePrint">
        <a href="javascript:void(0)" onClick="javascript:printCertificate()">
            <xsl:call-template name="BuildLocalizedString">
                <xsl:with-param name="KeyName" select="'PrintThisCertificate'"/>
            </xsl:call-template>
        </a>
    </xsl:template>

    <xsl:template name="AddCertificateSurveyAnswers">
        <xsl:if test="//wc:Survey">
            <script type="text/javascript">
                function ShowSurveyAnswers()
                {
                if (objInfo != null)
                {
                var surveyurl = "";
                var aid = objInfo.student_id;
                var sid = objInfo.aicc_sid;
                var pid = objQueryString["PROGRAMID"];
                var str = this.location.pathname;
                var n = str.lastIndexOf("/");
                if (n > 0)
                {
                n = str.lastIndexOf("/", n-1);
                if (n > 0)
                {
                surveyurl = str.substring(0, n+1) + "training/surveyanswers.aspx";
                }
                }

                if (surveyurl == "")
                {
                alert("Something is very wrong getting SurveyUrl");
                }
                else
                {
                surveyurl += "?sid=";
                surveyurl += sid;
                surveyurl += "&amp;pid=";
                surveyurl += pid;
                surveyurl += "&amp;aid=";
                surveyurl += aid;
                }

                //				alert(surveyurl);
                document.getElementById("SurveyAnswers").href = surveyurl;
                }

                }
            </script>
            <span class="linkSpacer"/>
            <a id="SurveyAnswers" href="javascript:void(0)" target="_new" onClick="javascript:ShowSurveyAnswers()" style="display:none">
                <xsl:call-template name="BuildLocalizedString">
                    <xsl:with-param name="KeyName" select="'ShowSurveyAnswers'"/>
                </xsl:call-template>
            </a>
        </xsl:if>
    </xsl:template>

    <xsl:template name="AddCertificateHeader">
        <div class="certificateHeader">
            <xsl:call-template name="BuildLocalizedString">
                <xsl:with-param name="KeyName" select="'CertificateofCompletion'"/>
            </xsl:call-template>
        </div>
    </xsl:template>

    <xsl:template name="AddCertificateText">
        <div class="certificateText">
            <xsl:call-template name="BuildLocalizedString">
                <xsl:with-param name="KeyName" select="'Thiswillcertify'"/>
                <xsl:with-param name="Parm1" select="concat('&lt;span class=&quot;certificateStudentName&quot; id=&quot;FirstName&quot;&gt;firstname&lt;/span&gt;', $Space, '&lt;span class=&quot;certificateStudentName&quot; id=&quot;LastName&quot;&gt;lastname&lt;/span&gt;')"/>
                <xsl:with-param name="Parm2" select="concat('&lt;/div&gt;&lt;div class=&quot;certificateProgramName&quot;&gt;', $ProgramName, '&lt;/div&gt;&lt;div class=&quot;certificateText&quot;&gt;')"/>
                <xsl:with-param name="Parm3" select="'&lt;span id=&quot;CurDate&quot;&gt;&lt;/span&gt;'"/>
            </xsl:call-template>
        </div>
    </xsl:template>

    <xsl:template name="AddCertificateCustomClause">
        <div class="certificateText">
            <xsl:call-template name="BuildLocalizedString">
                <xsl:with-param name="KeyName" select="'CustomCertificateClause'"/>
            </xsl:call-template>
        </div>
    </xsl:template>

    <xsl:template name="AddCertificateCertifiedBy">
        <div class="certificateText">
            <xsl:call-template name="BuildLocalizedString">
                <xsl:with-param name="KeyName" select="'Certifiedby'"/>
            </xsl:call-template>
        </div>
    </xsl:template>

    <xsl:template name="AddCertificateCompanyLogo">
        <xsl:if test="$CompanyLogo != ''">
            <xsl:text disable-output-escaping="yes">&lt;div id=&quot;certLogo&quot; class=&quot;certificateLogo&quot; &gt;&lt;img src="</xsl:text>
            <xsl:value-of select="$MediaPath"/>
            <xsl:value-of select="$CompanyLogo"/>
            <xsl:text>" alt="</xsl:text>
            <xsl:value-of select="$CompanyName"/>
            <xsl:text disable-output-escaping="yes">"/&gt;&lt;/div&gt;</xsl:text>
        </xsl:if>
    </xsl:template>

    <xsl:template name="AddCertificateCompanyInfo">
        <p class="certificateCompanyInfo">
            <span class="certificateCompanyName">
                <xsl:value-of select="$CompanyName"/>
            </span>
            <br/>
            <xsl:value-of select="$CompanyAddress"/>
            <br/>
            <xsl:value-of select="$CompanyCity"/>
            <br/>
            <xsl:if test="$CompanyURL != ''">
                <xsl:text disable-output-escaping="yes">&lt;a target=&quot;_new&quot; class=&quot;certificateCompanyURL&quot; href=&quot;http://</xsl:text>
                <xsl:value-of select="$CompanyURL"/>
                <xsl:text disable-output-escaping="yes">&quot;&gt;</xsl:text>
                <xsl:value-of select="$CompanyURL"/>
                <xsl:text disable-output-escaping="yes">&lt;/a&gt;</xsl:text>
            </xsl:if>
        </p>
    </xsl:template>

    <xsl:template name="AddCertificateInstruction">
        <xsl:call-template name="BuildLocalizedString">
            <xsl:with-param name="KeyName" select="'CertificateInstruction'"/>
        </xsl:call-template>
    </xsl:template>

    <xsl:template name="AddCertificateOfflineForm">
        <form>
            <div class="certificateOfflineFormInstruction">
                <xsl:call-template name="BuildLocalizedString">
                    <xsl:with-param name="KeyName" select="'TrackingInstruction'"/>
                </xsl:call-template>
            </div>
            <div class="certificateOfflineFormUsername">
                <xsl:call-template name="BuildLocalizedString">
                    <xsl:with-param name="KeyName" select="'UsernamePrompt'"/>
                </xsl:call-template>
                <xsl:value-of select="$Space"/>
                <INPUT id="idUser" type="text" name="idUser" size="24" focus="true" style="vertical-align:middle"/>
            </div>
            <div class="certificateOfflineFormPassword">
                <xsl:call-template name="BuildLocalizedString">
                    <xsl:with-param name="KeyName" select="'PasswordPrompt'"/>
                </xsl:call-template>
                <xsl:value-of select="$Space"/>
                <INPUT id="idPassword" type="password" name="idPassword" size="26" style="vertical-align:middle"/>
            </div>
            <div class="certificateOfflineFormLink">
                <a id="idMailLink" onclick="javascript:loadOfflineMailHref()" href="javascript:void(0)">
                    <xsl:call-template name="BuildLocalizedString">
                        <xsl:with-param name="KeyName" select="'TrackingLink'"/>
                    </xsl:call-template>
                </a>
            </div>
        </form>
    </xsl:template>

    <xsl:template name="BuildPreviewInit">
        <xsl:param name="StartPage"/>
        <xsl:param name="Type"/>
        <xsl:text>
	function doFlashCheck()
	{
		init();
	}
	function init()
	{
                      try{
                         if((Browser.Platform.ios) || (Browser.Platform.android) ) {
                                 top.window.scrollTo(0, 1);
                         }
                      }catch(ex){}
		</xsl:text>
        <xsl:choose>
            <xsl:when test="$Type = 'PopBulletin'">
                <xsl:text disable-output-escaping="yes">
			popUpBulletin('p','</xsl:text>
                <xsl:value-of select="$StartPage"/>
                <xsl:text>-</xsl:text>
                <xsl:value-of select="//wc:PopBulletin/@id"/>
                <xsl:text>','0',</xsl:text>
                <xsl:value-of select="//wc:PopBulletin/@height"/>
                <xsl:text>,</xsl:text>
                <xsl:value-of select="//wc:PopBulletin/@width"/>
                <xsl:text disable-output-escaping="yes">,null);
			</xsl:text>
            </xsl:when>
            <xsl:when test="$Type = 'LinkBulletin'">
                <xsl:text disable-output-escaping="yes">
			popUpBulletin('l','</xsl:text>
                <xsl:value-of select="$StartPage"/>
                <xsl:text>-</xsl:text>
                <xsl:value-of select="//wc:LinkBulletin/@id"/>
                <xsl:text>','0',</xsl:text>
                <xsl:value-of select="//wc:LinkBulletin/@height"/>
                <xsl:text>,</xsl:text>
                <xsl:value-of select="//wc:LinkBulletin/@width"/>
                <xsl:text disable-output-escaping="yes">,null);
			</xsl:text>
            </xsl:when>
            <xsl:when test="$Type = 'PopQuestion'">
                <xsl:text disable-output-escaping="yes">
			popQuestion('</xsl:text>
                <xsl:value-of select="$StartPage"/>
                <xsl:text>',</xsl:text>
                <xsl:value-of select="//wc:PopQuestion/@height"/>
                <xsl:text>,</xsl:text>
                <xsl:value-of select="//wc:PopQuestion/@width"/>
                <xsl:text disable-output-escaping="yes">,null);
			</xsl:text>
            </xsl:when>
            <xsl:when test="$Type = 'PopQuizQuestion'">
                <xsl:text disable-output-escaping="yes">
			popQuestion('</xsl:text>
                <xsl:value-of select="$StartPage"/>
                <xsl:text>',</xsl:text>
                <xsl:value-of select="//wc:PopQuizQuestion/@height"/>
                <xsl:text>,</xsl:text>
                <xsl:value-of select="//wc:PopQuizQuestion/@width"/>
                <xsl:text disable-output-escaping="yes">,null);
			</xsl:text>
            </xsl:when>
            <xsl:when test="$Type = 'PopQuiz'">
                <xsl:text disable-output-escaping="yes">
			popQuestion('</xsl:text>
                <xsl:value-of select="$StartPage"/>
                <xsl:text>',</xsl:text>
                <xsl:value-of select="//wc:PopQuiz/@height"/>
                <xsl:text>,</xsl:text>
                <xsl:value-of select="//wc:PopQuiz/@width"/>
                <xsl:text>,null);
			</xsl:text>
            </xsl:when>
            <xsl:when test="$Type = 'Term'">
                <xsl:text disable-output-escaping="yes">
			popUpTerm('</xsl:text>
                <xsl:value-of select="$StartPage"/>
                <xsl:text>-</xsl:text>
                <xsl:value-of select="//wc:Term/@ordinal"/>
                <xsl:text>',</xsl:text>
                <xsl:value-of select="//wc:Term/@height"/>
                <xsl:text>,</xsl:text>
                <xsl:value-of select="//wc:Term/@width"/>
                <xsl:text disable-output-escaping="yes">,null);
			</xsl:text>
            </xsl:when>
            <xsl:when test="$Type = 'MatchGame'">
                <xsl:text disable-output-escaping="yes">
			popMatchGame('</xsl:text>
                <xsl:value-of select="$StartPage"/>
                <xsl:text>-</xsl:text>
                <xsl:value-of select="//wc:MatchGame/@id"/>
                <xsl:text disable-output-escaping="yes">',440,620,null);
			</xsl:text>
            </xsl:when>
            <xsl:when test="$Type = 'QuizQuestion'">
                <!-- also handles FinalQuizQuestion -->
                <xsl:text disable-output-escaping="yes">
			startGame(</xsl:text>
                <xsl:value-of select="$FirstGamePosition"/>
                <xsl:text>);
			</xsl:text>
            </xsl:when>
            <xsl:otherwise>
                <xsl:text>
			runtimeSub(window);
			NavigateDiv("INTRO", "</xsl:text>
                <xsl:value-of select="$StartPage"/>
                <xsl:text>");
			</xsl:text>
            </xsl:otherwise>
        </xsl:choose>
        <xsl:text>
	}
	function updateBookmark(name)
	{
		return true;
	}
	function reportNoAck(bExit)
	{
	}
	function reportScore(correctQuestions, totalQuestions, bGame)
	{
	}
	function earlyExit()
	{
	}
	function SendChapterSurvey(strChapter, strSurveyQuestion, responses)
	{
		return true;
	}
	
	</xsl:text>
    </xsl:template>

    <xsl:template name="BuildGameChoices">
        <xsl:for-each select="/wc:Course/wc:Quiz/wc:Games/wc:Game">
            <xsl:if test="(@variety = 'QuizLite' or @variety = 'BothQuizLite') and not(preceding-sibling::wc:Game/@variety = 'QuizLite') and not(preceding-sibling::wc:Game/@variety = 'BothQuizLite')">
                <xsl:call-template name="AddGameChoice"/>
            </xsl:if>
            <xsl:if test="(@variety = 'CheezChase' or @variety = 'BothCheezChase') and not(preceding-sibling::wc:Game/@variety = 'CheezChase') and not(preceding-sibling::wc:Game/@variety = 'BothCheezChase')">
                <xsl:call-template name="AddGameChoice"/>
            </xsl:if>
            <xsl:if test="(@variety = 'CEO' or @variety = 'BothCEO') and not(preceding-sibling::wc:Game/@variety = 'CEO') and not(preceding-sibling::wc:Game/@variety = 'BothCEO')">
                <xsl:call-template name="AddGameChoice"/>
            </xsl:if>
            <xsl:if test="@variety = 'QuizLiteForJAWS' and not(preceding-sibling::wc:Game/@variety = 'QuizLiteForJAWS')">
                <xsl:call-template name="AddGameChoice"/>
            </xsl:if>
            <xsl:if test="@variety = 'BoardGame' and not(preceding-sibling::wc:Game/@variety = 'BoardGame')">
                <xsl:call-template name="AddGameChoice"/>
            </xsl:if>
            <xsl:if test="@variety = 'HopToTheTop' and not(preceding-sibling::wc:Game/@variety = 'HopToTheTop')">
                <xsl:call-template name="AddGameChoice"/>
            </xsl:if>
        </xsl:for-each>
    </xsl:template>

    <xsl:template name="AddGameChoice">
        <!-- What to do with Course/Quiz/Games/Game[$pos]/Parameters	?? -->
        <tr valign="top">
            <td>
                <xsl:choose>
                    <xsl:when test="$GameChoicePage = 0">
                        <a href="{position()}">
                            <img src="{$ImagePath}check.gif" border="0" hspace="1" vspace="1" alt=""/>
                        </a>
                    </xsl:when>
                    <xsl:otherwise>
                        <a href="javascript:void(0)" onClick="javascript:NavigateDiv({$GameChoicePage}, {$GamePage}); javascript:startGame({position()});">
                            <img src="{$ImagePath}check.gif" border="0" hspace="1" vspace="1" alt=""/>
                        </a>
                    </xsl:otherwise>
                </xsl:choose>
            </td>
            <td>
                <font size="-1">
                    <b>
                        <font color="maroon">
                            <xsl:choose>
                                <xsl:when test="$GameChoicePage = 0">
                                    <a href="{position()}">
                                        <xsl:value-of select="wc:Name"/>
                                    </a>
                                </xsl:when>
                                <xsl:otherwise>
                                    <a href="javascript:void(0)" onClick="javascript:NavigateDiv({$GameChoicePage}, {$GamePage}); javascript:startGame({position()});">
                                        <xsl:value-of select="wc:Name"/>
                                    </a>
                                </xsl:otherwise>
                            </xsl:choose>
                        </font>
                    </b>
                    : <xsl:value-of select="wc:Description"/>
                </font>
            </td>
        </tr>
    </xsl:template>

    <xsl:template name="BuildScript">
        <xsl:param name="coursePreview"/>

        <script type="text/javascript">
            <xsl:call-template name="AddWindowJS"/>
            <xsl:call-template name="AddInteractiveJS"/>
        </script>

        <xsl:choose>
            <xsl:when test="$LMSClientPath != 'noLMS' and not($coursePreview) and not($elementPreview)">
                <xsl:text disable-output-escaping="yes">&lt;script type="text/javascript"&gt;</xsl:text>
                <xsl:call-template name="AddLMSSupport"/>
                <xsl:text disable-output-escaping="yes">&lt;/script&gt;</xsl:text>
            </xsl:when>
            <xsl:otherwise>
                <xsl:text disable-output-escaping="yes">&lt;script type="text/javascript"&gt;</xsl:text>
                <xsl:choose>
                    <xsl:when test="$elementPreview">
                        <xsl:choose>
                            <!-- IMPORTANT: make sure that the containING element is before the containED element!! -->
                            <xsl:when test="//wc:Chapter">
                                <xsl:call-template name="BuildPreviewInit">
                                    <xsl:with-param name="StartPage" select="'1'"/>
                                </xsl:call-template>
                            </xsl:when>
                            <xsl:when test="//wc:PopBulletin">
                                <xsl:call-template name="BuildPreviewInit">
                                    <xsl:with-param name="Type" select="'PopBulletin'"/>
                                    <xsl:with-param name="StartPage" select="'1'"/>
                                </xsl:call-template>
                            </xsl:when>
                            <xsl:when test="//wc:LinkBulletin">
                                <xsl:call-template name="BuildPreviewInit">
                                    <xsl:with-param name="StartPage" select="'1'"/>
                                    <xsl:with-param name="Type" select="'LinkBulletin'"/>
                                </xsl:call-template>
                            </xsl:when>
                            <xsl:when test="//wc:MatchGame">
                                <xsl:call-template name="BuildPreviewInit">
                                    <xsl:with-param name="StartPage" select="'1'"/>
                                    <xsl:with-param name="Type" select="'MatchGame'"/>
                                </xsl:call-template>
                            </xsl:when>
                            <xsl:when test="//wc:PopQuestion">
                                <xsl:call-template name="BuildPreviewInit">
                                    <xsl:with-param name="StartPage" select="'1'"/>
                                    <xsl:with-param name="Type" select="'PopQuestion'"/>
                                </xsl:call-template>
                            </xsl:when>
                            <xsl:when test="//wc:PopQuiz">
                                <xsl:call-template name="BuildPreviewInit">
                                    <xsl:with-param name="StartPage" select="'1'"/>
                                    <xsl:with-param name="Type" select="'PopQuiz'"/>
                                </xsl:call-template>
                            </xsl:when>
                            <xsl:when test="//wc:PopQuizQuestion">
                                <xsl:call-template name="BuildPreviewInit">
                                    <xsl:with-param name="StartPage" select="'1'"/>
                                    <xsl:with-param name="Type" select="'PopQuizQuestion'"/>
                                </xsl:call-template>
                            </xsl:when>
                            <xsl:when test="//wc:LipSync">
                                <xsl:call-template name="BuildPreviewInit">
                                    <xsl:with-param name="StartPage" select="'1'"/>
                                    <xsl:with-param name="Type" select="'LipSync'"/>
                                </xsl:call-template>
                            </xsl:when>
                            <xsl:when test="//wc:Term">
                                <xsl:call-template name="BuildPreviewInit">
                                    <xsl:with-param name="StartPage" select="'1'"/>
                                    <xsl:with-param name="Type" select="'Term'"/>
                                </xsl:call-template>
                            </xsl:when>
                            <xsl:when test="//wc:QuizQuestion or //wc:FinalQuizQuestion">
                                <xsl:call-template name="BuildPreviewInit">
                                    <xsl:with-param name="StartPage" select="'1'"/>
                                    <xsl:with-param name="Type" select="'QuizQuestion'"/>
                                </xsl:call-template>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:message terminate="yes">
                                    <xsl:text>ERROR -> Unsupported element to Preview.</xsl:text>
                                </xsl:message>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:when>
                    <xsl:otherwise>
                        <xsl:call-template name="BuildPreviewInit">
                            <xsl:with-param name="StartPage" select="'1'"/>
                        </xsl:call-template>
                    </xsl:otherwise>
                </xsl:choose>
                <xsl:text disable-output-escaping="yes">&lt;/script&gt;</xsl:text>
            </xsl:otherwise>
        </xsl:choose>

        <!-- maybe should only check if body or illustration -->
        <xsl:if test="count(wc:Chapters//wc:PopBulletin) &gt; 0 or count(wc:Chapters//wc:LinkBulletin) &gt; 0">
            <script type="text/javascript">
                <xsl:call-template name="StartBulletinCommon"/>
            </script>
        </xsl:if>

        <xsl:if test="count(wc:Chapters//wc:PopBulletin/wc:Body) &gt; 0 or count(wc:Chapters//wc:PopBulletin/wc:Illustration) &gt; 0">
            <script type="text/javascript">
                <xsl:call-template name="StartBulletinPopup"/>
                <xsl:call-template name="AddChapterBulletinPopup">
                    <xsl:with-param name="ChapterBulletinNum" select="1"/>
                </xsl:call-template>
                <xsl:call-template name="EndBulletinCommon"/>
            </script>
        </xsl:if>

        <xsl:if test="count(wc:Chapters//wc:LinkBulletin/wc:Body) &gt; 0 or count(wc:Chapters//wc:LinkBulletin/wc:Illustration) &gt; 0">
            <script type="text/javascript">
                <xsl:call-template name="StartBulletinLink"/>
                <xsl:call-template name="AddChapterBulletinLink">
                    <xsl:with-param name="ChapterBulletinNum" select="1"/>
                </xsl:call-template>
                <xsl:call-template name="EndBulletinCommon"/>
            </script>
        </xsl:if>

        <xsl:if test="count(wc:Chapters//wc:Terms) &gt; 0">
            <script type="text/javascript">
                <xsl:call-template name="StartTermPopup"/>
                <xsl:call-template name="AddChapterTermPopup">
                    <xsl:with-param name="ChapterTermNum" select="1"/>
                </xsl:call-template>
                <xsl:call-template name="EndTermPopup"/>
            </script>
        </xsl:if>

        <xsl:if test="count(/wc:Course//wc:PopQuestion) &gt; 0 or count(/wc:Course//wc:PopQuiz) &gt; 0">
            <script type="text/javascript">
                <xsl:call-template name="StartPopQuestionIndex"/>
                <xsl:call-template name="AddChapterPopQuestionIndex">
                    <xsl:with-param name="ChapterPopQuestionNum" select="1"/>
                </xsl:call-template>
                <xsl:call-template name="EndPopQuestionIndex"/>

                <xsl:call-template name="StartPopQuestionText"/>
                <xsl:call-template name="AddChapterPopQuestion">
                    <xsl:with-param name="ChapterPopQuestionNum" select="1"/>
                </xsl:call-template>
                <xsl:call-template name="EndPopQuestionText"/>
            </script>
        </xsl:if>

        <xsl:if test="count(/wc:Course//wc:MatchGame) &gt; 0">
            <script type="text/javascript">
                <xsl:call-template name="StartMatchGame"/>
                <xsl:call-template name="AddChapterMatchGame">
                    <xsl:with-param name="ChapterMatchGameNum" select="1"/>
                </xsl:call-template>
                <xsl:call-template name="EndMatchGame"/>
            </script>
        </xsl:if>

        <xsl:if test="count(/wc:Course/wc:Quiz) &gt; 0 or count(//wc:PopQuestion) &gt; 0 or count(//wc:PopQuizQuestion) &gt; 0 or count(//wc:PopQuiz) &gt; 0">
            <script type="text/javascript">
                <xsl:call-template name="jsStartGame"/>
                <xsl:for-each select="wc:Quiz/wc:Games/wc:Game">
                    <xsl:call-template name="jsAddGame">
                        <xsl:with-param name="variety" select="@variety"/>
                    </xsl:call-template>
                </xsl:for-each>
                <xsl:call-template name="jsEndGame"/>
                <xsl:call-template name="jsPlayGame"/>
            </script>
        </xsl:if>
        <xsl:if test="count(wc:Chapters//wc:Chapter) &gt; 0">
            <script type="text/javascript">
                <xsl:call-template name="GetChapterMinTimes"/>
                <xsl:call-template name="StartNextNavigation"/>
                <xsl:call-template name="AddNextNavigation"/>
                <xsl:call-template name="EndNextNavigation"/>
            </script>
        </xsl:if>

        <script type="text/javascript">
            <xsl:call-template name="jsDivNav"/>
        </script>
    </xsl:template>

    <xsl:template name="GetChapterMinTimes">
        <xsl:text>var g_arrMinChapterTimes = new Array();</xsl:text>
        <xsl:for-each select="wc:Chapters/wc:Chapter">
            <xsl:call-template name="SetupChapterMinTime"/>
        </xsl:for-each>
    </xsl:template>

    <xsl:template name="SetupChapterMinTime">
        <xsl:text>
		var time = 0;
		</xsl:text>
        <xsl:if test="@minimumTimeSec">
            <xsl:text>
			time = </xsl:text>
            <xsl:value-of select="@minimumTimeSec"/>
            <xsl:text>;
			</xsl:text>
        </xsl:if>
        <xsl:text>
		g_arrMinChapterTimes.push(time);
		</xsl:text>
    </xsl:template>

    <xsl:template name="StartNextNavigation">
        <xsl:text>
function doNextNavigation(nChapter)
{
// called when 'next' btn is clicked
// evaluate - timer valid and cur eq bookmark and cur is chapter and next gt cur (always cause we hit the next btn)
	var numChap = parseInt(nChapter);
	if (numChap == g_highestPage &amp;&amp; numChap &gt;= 1 &amp;&amp; numChap &lt;= </xsl:text>
        <xsl:value-of select="$ChapterCount"/>
        <xsl:text disable-output-escaping="yes">)
	{
		if (!evaluateChapterTiming(numChap))
		{
			// did not exceed minimum time (or min time was 0) - display popup
			var bDoPopup = true;
			switch (nChapter)
			{
					</xsl:text>
    </xsl:template>

    <xsl:template name="AddNextNavigation">
        <xsl:for-each select="wc:Chapters/wc:Chapter">
            <xsl:call-template name="CaseNextNavigation"/>
        </xsl:for-each>
    </xsl:template>

    <xsl:template name="CaseNextNavigation">
        <xsl:param name="PageLabel" select="string(position())"/>
        <!-- this is text -->
        <xsl:text>
				case "</xsl:text>
        <xsl:value-of select="$PageLabel"/>
        <xsl:text>":
				</xsl:text>
        <xsl:choose>
            <xsl:when test="wc:PopBulletin">
                <xsl:choose>
                    <xsl:when test="wc:PopBulletin/wc:URL">
                        <xsl:text>NavigateDiv(</xsl:text>
                        <xsl:value-of select="$PageLabel"/>
                        <xsl:text>, </xsl:text>
                        <xsl:value-of select="$PageLabel + 1"/>
                        <xsl:text>);window.open('</xsl:text>
                        <xsl:value-of select="wc:PopBulletin/wc:URL"/>
                        <xsl:text disable-output-escaping="yes">');</xsl:text>
                    </xsl:when>
                    <xsl:otherwise>
                        <xsl:text>popUpBulletin('p','</xsl:text>
                        <xsl:value-of select="$PageLabel"/>
                        <xsl:text>-</xsl:text>
                        <xsl:value-of select="wc:PopBulletin/@id"/>
                        <xsl:text disable-output-escaping="yes">','1',</xsl:text>
                        <xsl:value-of select="wc:PopBulletin/@height"/>
                        <xsl:text>,</xsl:text>
                        <xsl:value-of select="wc:PopBulletin/@width"/>
                        <xsl:text disable-output-escaping="yes">,null);</xsl:text>
                    </xsl:otherwise>
                </xsl:choose>
            </xsl:when>
            <xsl:when test="wc:PopQuestion">
                <xsl:text>popQuestion('</xsl:text>
                <xsl:value-of select="$PageLabel"/>
                <xsl:text disable-output-escaping="yes">',</xsl:text>
                <xsl:value-of select="wc:PopQuestion/@height"/>
                <xsl:text>,</xsl:text>
                <xsl:value-of select="wc:PopQuestion/@width"/>
                <xsl:text disable-output-escaping="yes">,null);</xsl:text>
            </xsl:when>
            <xsl:when test="wc:PopQuiz">
                <xsl:text>popQuestion('</xsl:text>
                <xsl:value-of select="$PageLabel"/>
                <xsl:text disable-output-escaping="yes">',</xsl:text>
                <xsl:value-of select="wc:PopQuiz/@height"/>
                <xsl:text>,</xsl:text>
                <xsl:value-of select="wc:PopQuiz/@width"/>
                <xsl:text disable-output-escaping="yes">,null);</xsl:text>
            </xsl:when>
            <xsl:when test="wc:MatchGame">
                <xsl:text>popMatchGame('</xsl:text>
                <xsl:value-of select="$PageLabel"/>
                <xsl:text>-</xsl:text>
                <xsl:value-of select="wc:MatchGame/@id"/>
                <xsl:text disable-output-escaping="yes">',440,620,null);</xsl:text>
            </xsl:when>
            <xsl:otherwise>
                <xsl:choose>
                    <xsl:when test="$PageLabel = $DivCount and count(//wc:Acknowledgment) = 0 and $NumGamesAvailable = 1">
                        <!-- count(//wc:Quiz) &gt; 0 and -->
                        <xsl:text>NavigateDiv(</xsl:text>
                        <xsl:value-of select="$PageLabel"/>
                        <xsl:text>, </xsl:text>
                        <xsl:value-of select="$PageLabel + 1"/>
                        <xsl:text>);</xsl:text>
                        <xsl:call-template name="AddStartOnlyGame"/>
                    </xsl:when>
                    <xsl:otherwise>
                        <xsl:text>bDoPopup = false;	// did not execute anything for this chapter, just do normal navigation</xsl:text>
                    </xsl:otherwise>
                </xsl:choose>
            </xsl:otherwise>
        </xsl:choose>

        <xsl:text>
					break;
				</xsl:text>
    </xsl:template>

    <xsl:template name="EndNextNavigation">
        <xsl:text>
				default:
					bDoPopup = false;
					break;	// invalid chapter, just do normal navigation
			}	// switch
			
			if (bDoPopup)
				return;			// executed something
		}
	}
	
	NavigateDiv(numChap, numChap + 1);
}
		</xsl:text>
    </xsl:template>

    <xsl:template name="BuildNavigation">
        <xsl:param name="Paginate"/>
        <xsl:param name="PageLabel" select="string(position())"/>
        <!-- this is text -->
        <xsl:param name="ChapterNum" select="position()"/>
        <!-- this is a number -->
        <xsl:param name="HasAudio" select="boolean(count(wc:Audio) &gt; 0)"/>
        <xsl:param name="HasVideo" select="boolean(count(wc:Video) &gt; 0)"/>
        <xsl:param name="HasSurvey" select="boolean(count(wc:Survey) &gt; 0)"/>
        <!--		<div class="chapterNavigationText">	-->
        <xsl:if test="$Paginate">
            <table border="0" class="chapterNavigationText">
                <tr>
                    <td align="right">
                        <!-- use a div here as a placeholder when not displayed (i.e. page 1) -->
                        <xsl:text disable-output-escaping="yes">&lt;div</xsl:text>
                        <xsl:if test="$PageLabel = 1">
                            <xsl:text> style="visibility:hidden"</xsl:text>
                        </xsl:if>
                        <xsl:text disable-output-escaping="yes">&gt;</xsl:text>
                        <a href="javascript:void(0)">
                            <xsl:text disable-output-escaping="yes">&lt;img class="navigationImg" src="</xsl:text>
                            <xsl:value-of select="$ImagePath"/>
                            <xsl:text>previous.gif" border="0" alt="</xsl:text>
                            <xsl:call-template name="BuildLocalizedString">
                                <xsl:with-param name="KeyName" select="'PreviousPage'"/>
                            </xsl:call-template>
                            <xsl:text disable-output-escaping="yes">" onClick="</xsl:text>
                            <xsl:choose>
                                <xsl:when test="$HasSurvey">
                                    <xsl:text>doSurveyNavigation(</xsl:text>
                                    <xsl:value-of select="$ChapterNum"/>
                                    <xsl:text>, </xsl:text>
                                    <xsl:value-of select="$ChapterNum - 1"/>
                                    <xsl:text disable-output-escaping="yes">)"/&gt;</xsl:text>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:if test="$HasAudio">
                                        <xsl:text>MediaPlayer.ExternalMediaToggle(false, </xsl:text>
                                        <xsl:value-of select="$ChapterNum"/>
                                        <xsl:text>);</xsl:text>
                                    </xsl:if>
                                    <xsl:text>NavigateDiv(</xsl:text>
                                    <xsl:value-of select="$PageLabel"/>
                                    <xsl:text>, </xsl:text>
                                    <xsl:value-of select="$PageLabel - 1"/>
                                    <xsl:text disable-output-escaping="yes">)"/&gt;</xsl:text>
                                </xsl:otherwise>
                            </xsl:choose>
                        </a>
                        <xsl:text disable-output-escaping="yes">&lt;/div&gt;</xsl:text>
                    </td>
                    <td valign="middle" align="center">
                        <xsl:call-template name="BuildLocalizedString">
                            <xsl:with-param name="KeyName" select="'PageOf'"/>
                            <xsl:with-param name="Parm1" select="$PageLabel"/>
                            <xsl:with-param name="Parm2" select="$DivCount"/>
                        </xsl:call-template>
                    </td>
                    <td align="left">
                        <xsl:choose>
                            <xsl:when test="$PageLabel &lt;= $DivCount">
                                <a href="javascript:void(0)">
                                    <xsl:text disable-output-escaping="yes">&lt;img class="navigationImg" src="</xsl:text>
                                    <xsl:value-of select="$ImagePath"/>
                                    <xsl:text>next.gif" border="0" alt="</xsl:text>
                                    <xsl:call-template name="BuildLocalizedString">
                                        <xsl:with-param name="KeyName" select="'NextPage'"/>
                                    </xsl:call-template>
                                    <xsl:text>" onClick="</xsl:text>
                                    <xsl:choose>
                                        <xsl:when test="$HasSurvey">
                                            <xsl:text>doSurveyNavigation(</xsl:text>
                                            <xsl:value-of select="$ChapterNum"/>
                                            <xsl:text>, </xsl:text>
                                            <xsl:value-of select="$ChapterNum+1"/>
                                            <xsl:text disable-output-escaping="yes">);"/&gt;</xsl:text>
                                        </xsl:when>
                                        <xsl:otherwise>
                                            <xsl:if test="$HasAudio or $HasVideo">
                                                <xsl:text>MediaPlayer.ExternalMediaToggle(false, </xsl:text>
                                                <xsl:value-of select="$ChapterNum"/>
                                                <xsl:text>);</xsl:text>
                                            </xsl:if>
                                            <xsl:text>doNextNavigation('</xsl:text>
                                            <xsl:value-of select="$PageLabel"/>
                                            <xsl:text disable-output-escaping="yes">');"/&gt;</xsl:text>
                                        </xsl:otherwise>
                                    </xsl:choose>
                                </a>
                            </xsl:when>
                            <xsl:otherwise>
                            </xsl:otherwise>
                        </xsl:choose>
                    </td>
                </tr>
            </table>
        </xsl:if>
        <!--		</div>	-->
    </xsl:template>

    <xsl:template name="AddStartOnlyGame">
        <xsl:text>javascript:startGame(</xsl:text>
        <xsl:value-of select="$FirstGamePosition"/>
        <xsl:text>);</xsl:text>
    </xsl:template>

    <xsl:template name="BuildQuizIntro">
        <xsl:apply-templates/>
    </xsl:template>

    <xsl:template name="AddFlashCheck">
        <xsl:text disable-output-escaping="yes">
&lt;script type="text/javascript"&gt;
// -----------------------------------------------------------------------------
// Globals
// Major version of Flash required
var requiredMajorVersion = </xsl:text>
        <xsl:value-of select="$MinFlashVersion"/>
        <xsl:text disable-output-escaping="yes">;
// Minor version of Flash required
var requiredMinorVersion = 0;
// Minor version of Flash required
var requiredRevision = 0;
// the version of javascript supported
var jsVersion = 1.0;
// -----------------------------------------------------------------------------
&lt;/script&gt;
&lt;script language="VBScript" type="text/vbscript"&gt;
// Visual basic helper required to detect Flash Player ActiveX control version information
Function VBGetSwfVer(i)
  on error resume next
  Dim swControl, swVersion
  swVersion = 0
  
  set swControl = CreateObject("ShockwaveFlash.ShockwaveFlash." + CStr(i))
  if (IsObject(swControl)) then
    swVersion = swControl.GetVariable("$version")
  end if
  VBGetSwfVer = swVersion
End Function
&lt;/script&gt;
&lt;script type="text/javascript"&gt;

// Detect Client Browser type
var isIE  = (navigator.appVersion.indexOf("MSIE") != -1) ? true : false;
var isWin = (navigator.appVersion.toLowerCase().indexOf("win") != -1) ? true : false;
var isOpera = (navigator.userAgent.indexOf("Opera") != -1) ? true : false;
var isFF = (navigator.userAgent.indexOf("Firefox") != -1) ? true : false;
jsVersion = 1.1;
// JavaScript helper required to detect Flash Player PlugIn version information
function JSGetSwfVer(i){
	// NS/Opera version &gt;= 3 check for Flash plugin in plugin array
	if (navigator.plugins != null &amp;&amp; navigator.plugins.length &gt; 0) {
		if (navigator.plugins["Shockwave Flash 2.0"] || navigator.plugins["Shockwave Flash"]) {
			var swVer2 = navigator.plugins["Shockwave Flash 2.0"] ? " 2.0" : "";
      		var flashDescription = navigator.plugins["Shockwave Flash" + swVer2].description;
			descArray = flashDescription.split(" ");
			tempArrayMajor = descArray[2].split(".");
			versionMajor = tempArrayMajor[0];
			versionMinor = tempArrayMajor[1];
			if ( descArray[3] != "" ) {
				tempArrayMinor = descArray[3].split("r");
			} else {
				tempArrayMinor = descArray[4].split("r");
			}
      		versionRevision = tempArrayMinor[1] &gt; 0 ? tempArrayMinor[1] : 0;
            flashVer = versionMajor + "." + versionMinor + "." + versionRevision;
      	} else {
			flashVer = -1;
		}
	}
	// MSN/WebTV 2.6 supports Flash 4
	else if (navigator.userAgent.toLowerCase().indexOf("webtv/2.6") != -1) flashVer = 4;
	// WebTV 2.5 supports Flash 3
	else if (navigator.userAgent.toLowerCase().indexOf("webtv/2.5") != -1) flashVer = 3;
	// older WebTV supports Flash 2
	else if (navigator.userAgent.toLowerCase().indexOf("webtv") != -1) flashVer = 2;
	// Can't detect in all other cases
	else {
		
		flashVer = -1;
	}
	return flashVer;
} 

// When called with reqMajorVer, reqMinorVer, reqRevision returns true if that version or greater is available
function DetectFlashVer(reqMajorVer, reqMinorVer, reqRevision) 
{
 	reqVer = parseFloat(reqMajorVer + "." + reqRevision);
   	// loop backwards through the versions until we find the newest version	
	for (i=25;i&gt;0;i--) {	
		if (isIE &amp;&amp; isWin &amp;&amp; !isOpera) {
			versionStr = VBGetSwfVer(i);
		} else {
			versionStr = JSGetSwfVer(i);		
		}
		if (versionStr == -1 ) { 
			return false;
		} else if (versionStr != 0) {

			if(isIE &amp;&amp; isWin &amp;&amp; !isOpera) {
				tempArray         = versionStr.split(" ");
				tempString        = tempArray[1];
				versionArray      = tempString .split(",");				
			} else {
				versionArray      = versionStr.split(".");
			}
			versionMajor      = versionArray[0];
			versionMinor      = versionArray[1];
			versionRevision   = versionArray[2];
			
			versionString     = versionMajor + "." + versionRevision;   // 7.0r24 == 7.24
			versionNum        = parseFloat(versionString);
        	// is the major.revision &gt;= requested major.revision AND the minor version &gt;= requested minor
			if ( (versionMajor &gt; reqMajorVer) &amp;&amp; (versionNum &gt;= reqVer) ) {
				return true;
			} else {
				return ((versionNum &gt;= reqVer &amp;&amp; versionMinor &gt;= reqMinorVer) ? true : false );	
			}
		}
	}	
}

&lt;/script&gt;
</xsl:text>
    </xsl:template>

    <xsl:template name="AddInteractiveJS">
        <xsl:text>
function isRtlLanguage()
{
	var bRtl = false;
	</xsl:text>
        <xsl:if test="$LanguageIsRtl = 1">bRtl = true;</xsl:if>
        <xsl:text>
	return bRtl;
}
function closePopup()
{
	if (popupHandle != null)
	{
</xsl:text>
        <xsl:choose>
            <xsl:when test="$elementPreview">
                <xsl:text>
		if (!popupHandle.top.closed)
		{
			if (g_timer != 0)
			{
				clearTimeout(g_timer);
				g_timer = 0;
			}

			popupHandle.top.close();
		}
		popupHandle = null;
	</xsl:text>
            </xsl:when>
            <xsl:otherwise>
                <xsl:text>
		if (!popupHandle.closed)
		{
			if (g_timer != 0)
			{
				clearTimeout(g_timer);
				g_timer = 0;
			}

			popupHandle.close();
		}
		popupHandle = null;
	</xsl:text>
            </xsl:otherwise>
        </xsl:choose>
        <xsl:text>
	}
	
	urlArgs = null;		// cleanup this popup's arguments
}

// [DR] - the following is dynamically set to true if we're in Preview mode AND previewing a popup type (bulletin, term, or popquestion)
var popupPreview = </xsl:text>
        <xsl:value-of select="$elementPreview"/>
        <xsl:text>;

function popUp(url,name,width,height,resizable)
{
	// [DR]
	if (popupPreview)
	{
		top.resizeTo(width,height);
		top.resizeBy(width - top.popup.document.body.offsetWidth, height - top.popup.document.body.offsetHeight);
		popupHandle = top.popup;
		popupHandle.location = url;
	}
	else
	{
		closePopup();
		var properties = "toolbar=0,location=0,menubar=0,height="+height;
		properties = properties+",width="+width;
		properties = properties+",left="+30;
		properties = properties+",top="+30;
		properties = properties+",scrollbars=0";
		if (resizable)
			properties = properties+",resizable=yes";
		popupHandle = window.open(url,"",properties);
	}
	if (isRtlLanguage())
		popupHandle.document.dir = "rtl";
	// [DR] commented this out: popupHandle.document.title = name;
	//g_timer = setTimeout("startPopup()", 10);
	//return popupHandle;
}

// [DR] Warning: this can cause an infinite loop if the popup is not coded correctly
//function startPopup()
//{
//	if (typeof(popupHandle) == "object" &amp;&amp; popupHandle != null &amp;&amp; typeof(popupHandle.loaded) != "undefined" &amp;&amp; popupHandle.loaded &amp;&amp; (typeof(popupHandle.start) == "object" || typeof(popupHandle.start) == "function"))
//		popupHandle.start(this);
//	else
//		g_timer = setTimeout("startPopup()", 10);
//}	

function getArg(me, name)
{
	if (urlArgs == null)
	{
		urlArgs = new Object();
		var query = me.location.search.substring(1);	// get query string
		var pairs = query.split(',');				// break at comma
		for (var i = 0; i &lt; pairs.length; i++)
		{
			var pos = pairs[i].indexOf('=');		// look for "name=value"
			if (pos == -1)							// if not found,
				continue;							//	skip
								
			var argname = pairs[i].substring(0, pos);	// extract the name
			var value = pairs[i].substring(pos + 1);		// extract the value
			urlArgs[argname] = unescape(value);		// store as property
		}
	}
					
	return urlArgs[name];
}
	</xsl:text>

    </xsl:template>

    <!-- Start of LMS.xslt -->

    <xsl:template name="AddLMSSupport">
        <xsl:text>

var g_bDelayStart = false;
var g_bookmark = 1;
var g_highestBookmark = 0;
var g_gamePage = </xsl:text><xsl:value-of select="$GameChoicePage"/><xsl:text disable-output-escaping="yes">;

function reportNoAck(bExit)
{
	// Report to the LMS
	if (objInfo != null &amp;&amp; parent.lmswin != null)
	{
		if (typeof(parent.lmswin) == "object")
		{
			if (typeof(parent.lmswin.fail) == "function")
				parent.lmswin.fail(bExit);
		}
	}
}

function earlyExit()
{
	// Report to the LMS
	if (objInfo != null &amp;&amp; parent.lmswin != null)
	{
		if (typeof(parent.lmswin) == "object")
		{
			if (typeof(parent.lmswin.earlyExit) == "function")
				parent.lmswin.earlyExit();
		}
	}
}

function reportScore(correctQuestions, totalQuestions, bGame)
{
	// bGame = true if program has a game
	if (true == parent.lmswin.bNoLMS)
		return true;
		
	var nLMSResult = 999;	// general failure

	// Report score to the LMS
	if (objInfo != null &amp;&amp; parent.lmswin != null)
	{
		if (typeof(parent.lmswin) == "object")
		{
			if (typeof(parent.lmswin.finish) == "function")
			{
				try
				{
					nLMSResult = parent.lmswin.finish(correctQuestions, totalQuestions);
					</xsl:text><xsl:if test="$CompanyID = '125'">
            <xsl:text disable-output-escaping="yes">
						if (bGame)
							alert("Score: " + Math.round(correctQuestions * 100 / totalQuestions) + "%");
					</xsl:text>
        </xsl:if><xsl:text>
				}
				catch(e)
				{
				}
			}
		}
	}

	if (0 != nLMSResult)
		NoConnectivityAtCertificate(g_curPage - 1);
	
	return (0 == nLMSResult);
}

function LostSession()
{
	//"You have restarted this course from the Programs page and invalidate the current session.\nExit the program and start the program again.";
	var strWarning = "</xsl:text><xsl:call-template name="BuildLocalizedString">
            <xsl:with-param name="KeyName" select="'LostSession'"/>
            <xsl:with-param name="usedInJS" select="true()"/>
        </xsl:call-template><xsl:text>";
	NavigateWarning(strWarning, -1, false, true, false);
}

function NoConnectivityAtCertificate(fromDiv)
{
	//"You have previously lost connectivity - you cannot receive your Certificate unless you are online.\nExit the program or press Retry to try to reestablish connectivity.";
	var strWarning = "</xsl:text><xsl:call-template name="BuildLocalizedString">
            <xsl:with-param name="KeyName" select="'NoConnectivityAtCertificate'"/>
            <xsl:with-param name="usedInJS" select="true()"/>
        </xsl:call-template><xsl:text>";

	NavigateWarning(strWarning, fromDiv, false, true, true);
}

function NoConnectivityAtSurvey(fromDiv)
{
	//"You have lost connectivity - the Survey cannot be recorded unless you are online.\nExit the program or press Retry to try to reestablish connectivity.";
	var strWarning = "</xsl:text><xsl:call-template name="BuildLocalizedString">
            <xsl:with-param name="KeyName" select="'NoConnectivityAtSurvey'"/>
            <xsl:with-param name="usedInJS" select="true()"/>
        </xsl:call-template><xsl:text>";

	NavigateWarning(strWarning, fromDiv, false, true, true);
}

function LostConnectivity(strWantedPage)
{
	var divCert = parseInt(</xsl:text><xsl:value-of select="$CertificatePage"/><xsl:text>);
	if (divCert == parseInt(strWantedPage))
		return NoConnectivityAtCertificate(divCert - 1);
		
	//"You have lost connectivity. You may continue with the program but not the Game and will not receive a Certificate unless connectivity is restored.\nExit the program or press Continue to continue with the program.";
	var strWarning = "</xsl:text><xsl:call-template name="BuildLocalizedString">
            <xsl:with-param name="KeyName" select="'LostConnectivity'"/>
            <xsl:with-param name="usedInJS" select="true()"/>
        </xsl:call-template><xsl:text>";
	NavigateWarning(strWarning, strWantedPage, true, true, false);
}

function GainedConnectivity(strWantedPage)
{
	//"You have regained connectivity.\nPress Continue to finish the program.";
	var strWarning = "</xsl:text><xsl:call-template name="BuildLocalizedString">
            <xsl:with-param name="KeyName" select="'GainedConnectivity'"/>
            <xsl:with-param name="usedInJS" select="true()"/>
        </xsl:call-template><xsl:text>";
	NavigateWarning(strWarning, strWantedPage, true, false, false);
}

var divWarnContinuePrev, divWarnContinueNext;
function WarnContinue()
{
	NavigateDiv(divWarnContinuePrev, divWarnContinueNext);
}

function NavigateWarning(strWarning, div, bContinue, bExit, bRetry)
{
// note: there is no exit button - gives script warning trying to close window, display no button and just let user close it
	var divFrom = g_curPage;	// this div is probably hidden already - we came from NavigateDiv....
	var btn1 = document.getElementById("idWarnBtn1");
	var btn2 = document.getElementById("idWarnBtn2");
	var text = document.getElementById("idWarnText");
	text.innerHTML = strWarning;
	
	if (bContinue)
	{
		btn1.value = "</xsl:text><xsl:call-template name="BuildLocalizedString">
            <xsl:with-param name="KeyName" select="'Continue'"/>
        </xsl:call-template><xsl:text>";
		divWarnContinuePrev = "WARN";
		divWarnContinueNext = div;
		btn1.style.display = "inline";
	}
	else
		btn1.style.display = "none";
	
	if (bRetry)
	{
		btn2.value = "</xsl:text><xsl:call-template name="BuildLocalizedString">
            <xsl:with-param name="KeyName" select="'Retry'"/>
        </xsl:call-template><xsl:text disable-output-escaping="yes">";
		btn2.style.display = "inline";
		divFrom = div;
	}
	else
		btn2.style.display = "none";

	NavigateDiv(divFrom, "WARN");
}

function RecheckConnectivity(fromDiv)
{
	if (/*objInfo != null &amp;&amp; */parent.lmswin != null &amp;&amp; typeof(parent.lmswin) == "object" &amp;&amp; parent.lmswin.bFinished != null)
	{
		updateBookmark();	// make sure that connectivity is checked

		// either online or offline certificate
		if (true == parent.lmswin.bHasConnectitivity || true == parent.lmswin.bNoLMS)
		{
			NavigateDiv(fromDiv, g_curPage + 1);
			return;	// successful!
		}
	}

//if no objInfo, never connected ---- should be doing the email thing...
	var divCert = </xsl:text><xsl:value-of select="$CertificatePage"/>;<xsl:text disable-output-escaping="yes">
	if (divCert == g_curPage + 1)
		NoConnectivityAtCertificate(fromDiv);
	else
		NoConnectivityAtSurvey(fromDiv);
}

function gotoSelected()
{
	g_highestBookmark = 0;	// always reset bookmark to whatever the user picked
	
	var selectedDiv = "1";	// default to page 1
	if (document.LMSForm.bookmark[0].checked)
		selectedDiv = g_bookmark.toString();

	NavigateDiv("0", selectedDiv);</xsl:text>
        <xsl:if test="$NumGamesAvailable = 1">
            <!-- count(//wc:Acknowledgment) = 0 and count(//wc:Quiz) &gt; 0 and -->
            <xsl:text>
	if (selectedDiv == g_gamePage)
	</xsl:text>
            <xsl:call-template name="AddStartOnlyGame"/>
        </xsl:if><xsl:text disable-output-escaping="yes">
}

function getNewPlayer()
{
	window.open("http://www.macromedia.com/go/getflash");
	setTimeout("top.close()", 100);
}

function doFlashCheck()
{
init();return;
	</xsl:text>
        <xsl:if test="$HasFlash='true'">
            <xsl:text disable-output-escaping="yes">
	// Version check based upon the values entered above in "Globals"
	var hasReqestedVersion = DetectFlashVer(requiredMajorVersion, requiredMinorVersion, requiredRevision);

	// Check to see if a player with Flash Product Install is available and the version does not meet the requirements for playback
	if (!hasReqestedVersion)
	{
		// flash is too old or we can't detect the plugin
<!-- convert this to resources & put in div with class styles -->
		alternateContent = '&lt;br/&gt;This content requires an updated version of Macromedia Flash Player.';
		alternateContent += '&lt;br/&gt;Follow the instructions after clicking the button and close all other browser windows.&lt;br/&gt;';
		alternateContent += '&lt;br/&gt;For help, please contact your local IT helpdesk.&lt;br/&gt;';
		alternateContent += '&lt;br/&gt;&lt;input type="button" onclick="getNewPlayer()" value="Get the latest Flash player"&gt;';
		document.getElementById("FlashUpdate").innerHTML = alternateContent;  // insert non-flash content
	}
	else
	</xsl:text>
        </xsl:if>
        <xsl:text disable-output-escaping="yes">
	init();
}

// init() must be called from the onLoad() handler of the page
var objInfo;
var g_startTime;

function init()
{
	if (typeof(parent.lmswin) != "object" || parent.lmswin.bReady != true)
	{
		// LMS window not loaded yet; wait 100ms and try again
		setTimeout("init()", 100);
	}
	else
	{
		if (g_bDelayStart)
		{
			g_bDelayStart = false;
			setTimeout("init()", 1500);
		}
		else
		{
//			if (document.all)	// IE
//				document.body.style.overflow = "auto";

			// Call the LMS Launch function to initialize communication and get info
			objInfo = parent.lmswin.onLMSLaunch(parent);

			if (objInfo == null)
			{
				var len = 0;
				var strPrompt = "</xsl:text>
        <xsl:call-template name="BuildLocalizedString">
            <xsl:with-param name="KeyName" select="'NoLMSUserPrompt'"/>
        </xsl:call-template>
        <xsl:text disable-output-escaping="yes">";
		
				var strDefault = "</xsl:text>
        <xsl:call-template name="BuildLocalizedString">
            <xsl:with-param name="KeyName" select="'NoLMSUserDefault'"/>
        </xsl:call-template>
        <xsl:text disable-output-escaping="yes">";
		
				var strName = window.prompt(strPrompt, strDefault);
				if (strName == null || strName.length == 0)
					strName = window.prompt(strPrompt, strDefault);

				if (strName != null &amp;&amp; strName.length &gt; 0)
					strFirstName = strName;
			}

			// do after getting objInfo, is used here...
			runtimeSub(parent.main);

			// Check if we got a bookmark
			var startDiv = "1";
			if (objInfo != null)
			{
				var now = new Date();
				objInfo.startTime = now.toGMTString();

				// set objInfo, cause it's needed by updateBookmark
				parent.lmswin.objInfo = objInfo;

				// For backwards compatibility, support bookmark of "GC" to mean "Game Choice" page
				//	new functionality, -1 means game, -2 means podcast / game
				var bm = 0;
				if (typeof(objInfo.bookmark) != "undefined")
				{
					if (objInfo.bookmark == "-1" || objInfo.bookmark == "-2" || objInfo.bookmark == "GC")
						bm = g_gamePage; 
					else if (!isNaN(parseInt(objInfo.bookmark)))
						bm = parseInt(objInfo.bookmark);
					if (bm > 1)
					{
						g_bookmark = bm;
						updateBookmark(bm);	// update g_highestBookmark
						updateBookmarkDiv();
						startDiv = "0";
					}
				}
			}
			else
			{
				parent.lmswin.bNoLMS = true;
				parent.lmswin.bHasConnectitivity = false;
				g_startTime = new Date();
				var flagEnableTracking = objQueryString["OFFTRK"];
				if (flagEnableTracking == null || typeof(flagEnableTracking) == "undefined" || 1 == flagEnableTracking)
					document.getElementById("idOfflineForm").style.display = "block";
			}
			
			NavigateDiv("INTRO", startDiv);
		}
	}
}

function updateBookmarkDiv()
{
	var questionSpan, answerSpan1, answerSpan2;

	if (document.all)
	{
		questionSpan = spanQuestion;
		answerSpan1 = spanAnswer1;
		answerSpan2 = spanAnswer2;
	}
	else
	{
		var body = document.getElementById("idBody");
		questionSpan = document.getElementById("spanQuestion");
		answerSpan1 = document.getElementById("spanAnswer1");
		answerSpan2 = document.getElementById("spanAnswer2");
	}

	if (g_bookmark == g_gamePage)
	{
		if (objInfo.bookmark == "-2")
		{
			questionSpan.innerHTML = "</xsl:text>
        <xsl:call-template name="BuildLocalizedString">
            <xsl:with-param name="KeyName" select="'PodcastDownloaded'"/>
            <xsl:with-param name="usedInJS" select="true()"/>
        </xsl:call-template>
        <xsl:text>";

			answerSpan1.innerHTML = "</xsl:text>
        <xsl:call-template name="BuildLocalizedString">
            <xsl:with-param name="KeyName" select="'PodcastReviewed'"/>
        </xsl:call-template>
        <xsl:text>";

			answerSpan2.innerHTML = "</xsl:text>
        <xsl:call-template name="BuildLocalizedString">
            <xsl:with-param name="KeyName" select="'PodcastRestartCourse'"/>
        </xsl:call-template>
        <xsl:text>";
		}
		else
		{
			questionSpan.innerHTML = "</xsl:text>
        <xsl:call-template name="BuildLocalizedString">
            <xsl:with-param name="KeyName" select="'PreviouslyCompleted'"/>
        </xsl:call-template>
        <xsl:text>";

			answerSpan1.innerHTML = "</xsl:text>
        <xsl:call-template name="BuildLocalizedString">
            <xsl:with-param name="KeyName" select="'Proceedtogame'"/>
        </xsl:call-template>
        <xsl:text>";

			answerSpan2.innerHTML = "</xsl:text>
        <xsl:call-template name="BuildLocalizedString">
            <xsl:with-param name="KeyName" select="'BeginWithLesson'"/>
        </xsl:call-template>
        <xsl:text>";
		}
	}
	else
	{
		questionSpan.innerHTML = "</xsl:text>
        <xsl:call-template name="BuildLocalizedString">
            <xsl:with-param name="KeyName" select="'PreviouslyBegun'"/>
        </xsl:call-template>
        <xsl:text>";

		answerSpan1.innerHTML = "</xsl:text>
        <xsl:call-template name="BuildLocalizedString">
            <xsl:with-param name="KeyName" select="'Continuewith'"/>
        </xsl:call-template>
        <xsl:text>" + g_bookmark;

		answerSpan2.innerHTML = "</xsl:text>
        <xsl:call-template name="BuildLocalizedString">
            <xsl:with-param name="KeyName" select="'BeginWithLesson'"/>
        </xsl:call-template>
        <xsl:text disable-output-escaping="yes">";
	}
	
	//document.LMSForm.bookmark[0].value = " " + g_bookmark + " ";	// ??? DR
	document.LMSForm.bookmark[0].value = g_bookmark;
	document.LMSForm.bookmark[0].checked = true;
}

function updateBookmark(strPage)
{
	var lastBookmark = g_highestBookmark;
	if (strPage != null)
	{
		var nPage = parseInt(strPage);
		
		if (nPage > g_highestBookmark)
			g_highestBookmark = nPage;
	}

	// Report progress to the LMS
	if (objInfo != null &amp;&amp; parent.lmswin != null)
	{
		var nLMSResult = 999;	// general error

		if (typeof(parent.lmswin) == "object")
		{
			if (typeof(parent.lmswin.progress) == "function")
			{
				var str;
				if (g_highestBookmark >= g_gamePage)
				{
					// allowing navigatation to GamePage to display "do not close" message
					//	can be > g_gamePage (when more than one game - it is the game choice page)
					if (objInfo.bookmark == "-2")
						str = "-2";
					else
						str = "-1";
				}
				else
					str = g_highestBookmark.toString();

				try
				{
					if (typeof(strCurQuestionID) != "undefined" &amp;&amp; strCurQuestionID != null &amp;&amp; nAnswerMissedFirst != 0)
						nLMSResult = parent.lmswin.progress(str, strCurQuestionID, nAnswerMissedFirst);
					else
						nLMSResult = parent.lmswin.progress(str, 0, 0);
				}
				catch(e)
				{
					nLMSResult = 999;	// assume no connectivity
				}
			}

			if (0 != nLMSResult)
				g_highestBookmark = lastBookmark;	// reset bookmark if error, never got there....
				
			// if we got here on a survey, then that data has been recorded, so normal connectivity handling is ok
			if (3 == nLMSResult)
			{
				// session has been deleted - can't continue
				LostSession();
				return false;
				//alert("session has been deleted - can't continue!");
			}

			if (nLMSResult != 0 &amp;&amp; parent.lmswin.bHasConnectitivity || nLMSResult == 0 &amp;&amp; !parent.lmswin.bHasConnectitivity)
			{
				// only if changed...
				parent.lmswin.bHasConnectitivity = (0 == nLMSResult);

				if (0 == nLMSResult)
					GainedConnectivity(strPage);
				else
					LostConnectivity(strPage);
					
				return false;
			}
		}
	}
	else
	{
		// from quiz, strPage is not specified
		// don't send answers that weren't missed (== 0)
		if (null == strPage &amp;&amp; strCurQuestionID != null &amp;&amp; nAnswerMissedFirst != 0)
		{
			// do some offline tracking
			if (g_arrWrongAnswer == null &amp;&amp; typeof(g_arrWrongAnswer) != "object")
				g_arrWrongAnswer = new Array();
				
			var question = new Object();
			question["RevID"] = strCurQuestionID;
			question["index"] = nAnswerMissedFirst;
			g_arrWrongAnswer.push(question);
		}
	}
	
	return true;
}

function loadOfflineMailHref()
{
	var oUser = document.getElementById("idUser");
	var oPassword = document.getElementById("idPassword");
	var oLink = document.getElementById("idMailLink");
	if (oUser.value == "") // allow blank password || oPassword.value == "")
	{
		oLink.href="javascript:void(0)";
	}
	else
	{
		if (0 == g_totalQuestions)
		{
			g_correctQuestions = 1;
			g_totalQuestions = 1;
		}
		
		var strScore = g_correctQuestions + "," + g_totalQuestions;

		var strProgramID = objQueryString["PROGRAMID"];
		
		var str = "mailto:";
		str = str + "Tracker@WeComply.com";
		str = str + "?Subject=";
		str = str + "</xsl:text>
        <xsl:call-template name="BuildLocalizedString">
            <xsl:with-param name="KeyName" select="'OfflineTrackingSubject'"/>
        </xsl:call-template><xsl:text disable-output-escaping="yes">";
//WeComply Training Completion
		str = str + "&amp;body=";
		str = str + "</xsl:text>
        <xsl:call-template name="BuildLocalizedString">
            <xsl:with-param name="KeyName" select="'OfflineTrackingBodyLine1'"/>
        </xsl:call-template><xsl:text disable-output-escaping="yes">";
//YOU MUST SEND THIS E-MAIL TO TRANSMIT TRAINING RESULTS
		str = str + "%0A";
		str = str + "</xsl:text>
        <xsl:call-template name="BuildLocalizedString">
            <xsl:with-param name="KeyName" select="'OfflineTrackingBodyLine2'"/>
        </xsl:call-template><xsl:text disable-output-escaping="yes">";
//DO NOT MODIFY THE CONTENTS OF THIS MESSAGE.
		str = str + "%0A++==";
		var results = strScore + "," + strProgramID + "," + oUser.value + "," + oPassword.value + "," + </xsl:text><xsl:value-of select="$Language"/><xsl:text disable-output-escaping="yes"> + ",";
		var now = new Date();
		results = results + Date.parse(g_startTime) + "," + Date.parse(now) + ",";	// start, stoptime

		var nWrongs = 0;
		if (typeof(g_arrWrongAnswer) == "object" &amp;&amp; g_arrWrongAnswer != null)
			nWrongs = g_arrWrongAnswer.length;
			
		for (var nCur = 0; nCur &lt; nWrongs; nCur++)
		{
			results = results + g_arrWrongAnswer[nCur]["RevID"] + "=" + g_arrWrongAnswer[nCur]["index"];
			if ((nCur+1) &lt; nWrongs)
				results = results + "+";
		}

		results = results + ":" + GetChecksum(results);
		results = Encode(results);
		results = results + ":" + GetChecksum(results);

		str = str + results + "==++%0A";
		oLink.href = str;
		
		top.close();
	}
}

function GetChecksum(str)
{
// simply add up all the bytes - don't trucate (or negate?)
	var nVal = 0;
	var nLen = str.length;
	for (var nCur = 0; nCur &lt; nLen; nCur++)
	{
		nVal += str.charCodeAt(nCur);
	}
	
//	nVal *= -1;
//	nVal &amp;= 0xFF;
	var strVal = nVal.toString(16);

	return strVal;
}

function Encode(str)
{
	var arrOut = "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ.'";	// 64 chars
	// low 5
	// middle 5
	// high 6 (rest)
	var strOut = "";
	var nVal = 0;
	var nLen = str.length;
	for (var nCur = 0; nCur &lt; nLen; nCur++)
	{
		nVal = str.charCodeAt(nCur);
		strOut = strOut + arrOut.charAt(nVal &amp; 0x1f);
		nVal = nVal >>> 5;
		strOut = strOut + arrOut.charAt(nVal &amp; 0x1f);
		nVal = nVal >>> 5;
		strOut = strOut + arrOut.charAt(nVal);
	}

	return strOut;
}

function SendChapterSurvey(strChapter, strSurveyQuestion, responses)
{
	if (true == parent.lmswin.bNoLMS)
		return true;
		
	var nLMSResult = 999;	// general failure

	// Report score to the LMS
	if (objInfo != null &amp;&amp; parent.lmswin != null)
	{
		if (typeof(parent.lmswin) == "object")
		{
			if (typeof(parent.lmswin.svprogress) == "function")
			{
				try
				{
					if (typeof(responses.length) != "undefined")
					{
						var revId, choice, response, arrParams;
						for (var i = 0; i &lt; responses.length; i++)
						{
							// make sure responses are all strings
							revId = responses[i++].toString();
							choice = responses[i++].toString();
							response = AdjustSurveyResponse(responses[i].toString());

							nLMSResult = parent.lmswin.svprogress(strChapter, revId, choice, response);
							if (0 != nLMSResult)
							{
								break;
							}
						}
					}
					else
					{
					alert("error in SendChapterSurvey, not enough data");
						// just the pivot question, without a pivot selected - responses is just the selected choice
						// extract revision -  assumes SurveyQuestion-'revID'
						// make sure responses are all strings
						var revisionid = strSurveyQuestion.substring(15, strSurveyQuestion.indexOf('-', 15));
						nLMSResult = parent.lmswin.svprogress(strChapter, revisionid, responses.toString(), '');
					}
				}
				catch(e)
				{
				}
			}
		}
	}

	if (0 != nLMSResult)
		NoConnectivityAtSurvey(strChapter);
	
	return (0 == nLMSResult);
}

function AdjustSurveyResponse(responseIn)
{
	var i;
	var outStr = "";
	
	// replace all less than signs
	var arrParams = responseIn.split("&lt;");

	for (i = 0; i &lt; arrParams.length; i++)
	{
		outStr += arrParams[i];

		if (i &lt; (arrParams.length-1))
			outStr += "&amp;lt;";
	}
								
	// replace all greater than signs
	arrParams = outStr.split("&gt;");

	for (i = 0; i &lt; arrParams.length; i++)
	{
		if (0 == i)
			outStr = "";
			
		outStr += arrParams[i];

		if (i &lt; (arrParams.length-1))
			outStr += "&amp;gt;";
	}
								
	// strip all plus signs
	arrParams = outStr.split("+");

	for (i = 0; i &lt; arrParams.length; i++)
	{
		if (0 == i)
			outStr = "";
			
		outStr += arrParams[i];
	}
								
	// strip all equal signs
	arrParams = outStr.split("=");

	for (i = 0; i &lt; arrParams.length; i++)
	{
		if (0 == i)
			outStr = "";
			
		outStr += arrParams[i];
	}
	
	return outStr;
}

</xsl:text>
    </xsl:template>

    <xsl:template name="AddBookMarkSelection">
        <DIV id="div0" style="display:none;margin-top:15px">
            <form name="LMSForm">
                <div align="center" class="bookMarkSelectionBox" style="width:286px;margin-left:auto;
margin-right:auto;border: 2px solid #999999; padding:12px;margin-top:25px;">
                    <div align="center" class="chapterDiscussionText">
                        <b>
                            <font color="maroon">
                                <xsl:value-of select="$ProgramName"/>
                            </font>
                        </b>
                    </div>
                    <div class="chapterDiscussionText" align="left">
                        <font color="black">
                            <span id="spanQuestion"></span>
                        </font>
                    </div>
                    <div>
                        <div align="right" class="chapterDiscussionText" valign="top" style="float:left;">
                            <input type="Radio" id="bookmark" name="bookmark"/>
                        </div>
                        <div class="chapterDiscussionText" style="float:left;">
                            <font color="black">
                                <span id="spanAnswer1"></span>
                            </font>
                        </div>
                        <div style="clear:both;"></div>
                    </div>
                    <div>
                        <div align="right" class="chapterDiscussionText" valign="top" style="float:left;">
                            <input type="Radio" id="bookmark" name="bookmark" value="1"/>
                        </div>
                        <div class="chapterDiscussionText" style="float:left;">
                            <font color="black">
                                <span id="spanAnswer2"></span>
                            </font>
                        </div>
                        <div style="clear:both;padding-bottom:6px;"></div>
                    </div>
                    <div align="center" valign="top" style="padding-bottom:8px;">
                        <xsl:text disable-output-escaping="yes">&lt;input type="button" name="Begin" value="</xsl:text>
                        <xsl:call-template name="BuildLocalizedString">
                            <xsl:with-param name="KeyName" select="'Begin'"/>
                        </xsl:call-template>
                        <xsl:text disable-output-escaping="yes">" onClick="gotoSelected()"/&gt;</xsl:text>
                    </div>
                </div>
            </form>
        </DIV>
    </xsl:template>

    <!-- End of LMS.xslt -->
    <!-- Start of Bulletin.xslt -->

    <xsl:template name="StartBulletinCommon">
        <xsl:text>
function popUpBulletin(nType,nOrdinal,bNav,height,width,theEvent)
{
	var url = "</xsl:text>
        <xsl:value-of select='$StaticHtmlPath'/>
        <xsl:text>popupBulletin.htm";
	url = url + "?t=" + nType + ",o=" + nOrdinal + ",n=" + bNav;

	// [DR] Changed the following to use the popUp() function
	popUp(url, "", width, height, false);
}
		</xsl:text>
    </xsl:template>

    <xsl:template name="StartBulletinPopup">
        <xsl:text>
function getPopBulletinInfo(nOrdinal)
{
	var obj = new Object();
	switch (nOrdinal)
	{
		</xsl:text>
    </xsl:template>

    <xsl:template name="AddChapterBulletinPopup">
        <xsl:param name="ChapterBulletinNum"/>

        <xsl:if test="($ChapterBulletinNum &gt; 0) and ($ChapterBulletinNum &lt;= $ChapterCount)">
            <xsl:for-each select="wc:Chapters/wc:Chapter[$ChapterBulletinNum]/wc:PopBulletin">
                <xsl:if test="wc:Body or wc:Illustration or wc:Video and not(wc:URL)">
                    <xsl:call-template name="CaseBulletinPopup">
                        <xsl:with-param name="ChapterID" select="$ChapterBulletinNum"/>
                        <xsl:with-param name="BulletinImageSrc" select="concat($MediaPath, wc:Illustration/@src)"/>
                        <xsl:with-param name="BulletinImageWidth" select="wc:Illustration/@width"/>
                        <xsl:with-param name="BulletinImageHeight" select="wc:Illustration/@height"/>
                        <xsl:with-param name="BulletinAltText" select="wc:Illustration/wc:AlternateText"/>
                        <xsl:with-param name="BulletinTitle" select="@variety"/>
                        <xsl:with-param name="BulletinVideoSrc" select="wc:Video/@src"/>
                    </xsl:call-template>
                </xsl:if>
            </xsl:for-each>

            <xsl:call-template name="AddChapterBulletinPopup">
                <xsl:with-param name="ChapterBulletinNum" select="$ChapterBulletinNum + 1"/>
            </xsl:call-template>
        </xsl:if>
    </xsl:template>

    <xsl:template name="AddPreviewBulletinPopup">
        <xsl:param name="ChapterBulletinNum"/>

        <xsl:for-each select="wc:PopBulletin">
            <xsl:if test="wc:Body or wc:Illustration or wc:Video and not(wc:URL)">
                <xsl:call-template name="CaseBulletinPopup">
                    <xsl:with-param name="ChapterID" select="$ChapterBulletinNum"/>
                    <xsl:with-param name="BulletinImageSrc" select="concat($MediaPath, wc:Illustration/@src)"/>
                    <xsl:with-param name="BulletinImageWidth" select="wc:Illustration/@width"/>
                    <xsl:with-param name="BulletinImageHeight" select="wc:Illustration/@height"/>
                    <xsl:with-param name="BulletinAltText" select="wc:Illustration/wc:AlternateText"/>
                    <xsl:with-param name="BulletinTitle" select="@variety"/>
                    <xsl:with-param name="BulletinVideoSrc" select="wc:Video/@src"/>
                </xsl:call-template>
            </xsl:if>
        </xsl:for-each>
    </xsl:template>

    <xsl:template name="CaseBulletinPopup">
        <xsl:param name="ChapterID"/>
        <xsl:param name="BulletinImageSrc"/>
        <xsl:param name="BulletinImageWidth"/>
        <xsl:param name="BulletinImageHeight"/>
        <xsl:param name="BulletinAltText"/>
        <xsl:param name="BulletinTitle"/>
        <xsl:param name="BulletinVideoSrc"/>
        <xsl:text>
		case '</xsl:text>
        <xsl:value-of select="$ChapterID"/>
        <xsl:text>-</xsl:text>
        <xsl:value-of select="@id"/>
        <xsl:text>':
			obj["title"] = "</xsl:text>
        <xsl:call-template name="AddBulletinTitle">
            <xsl:with-param name="BulletinTitle" select="$BulletinTitle"/>
        </xsl:call-template>
        <xsl:text>";
			obj["name"] = "</xsl:text>
        <xsl:for-each select="wc:Name">
            <xsl:apply-templates/>
        </xsl:for-each>
        <xsl:text>";
			obj["desc"] = "</xsl:text>
        <xsl:for-each select="wc:Body">
            <xsl:apply-templates/>
        </xsl:for-each>
        <xsl:text>";
			</xsl:text>
        <xsl:if test="($BulletinTitle = 'News') and (wc:Headline)">
            <xsl:text>
				obj["headline"] = "</xsl:text>
            <xsl:for-each select="wc:Headline">
                <xsl:apply-templates/>
            </xsl:for-each>
            <xsl:text>";
				obj["subhead"] = "</xsl:text>
            <xsl:for-each select="wc:Subhead">
                <xsl:apply-templates/>
            </xsl:for-each>
            <xsl:text>";
				</xsl:text>
        </xsl:if>
        <xsl:text>
			obj["imgSrc"] = fixStaticPath("</xsl:text>
        <xsl:value-of select="$BulletinImageSrc"/>
        <xsl:text>");
			obj["imgWidth"] = "</xsl:text>
        <xsl:value-of select="$BulletinImageWidth"/>
        <xsl:text>";
			obj["imgHeight"] = "</xsl:text>
        <xsl:value-of select="$BulletinImageHeight"/>
        <xsl:text>";
			obj["imgAltText"] = "</xsl:text>
        <xsl:value-of select="$BulletinAltText"/>
        <xsl:text>";
			obj["imgSrcPrint"] = </xsl:text>
        <xsl:choose>
            <xsl:when test="@allowPrint = 'true'">
                <xsl:text>fixStaticPath('</xsl:text>
                <xsl:value-of select="$ImagePath"/>
                <xsl:text>printer.gif');</xsl:text>
            </xsl:when>
            <xsl:otherwise>
                <xsl:text>"";</xsl:text>
            </xsl:otherwise>
        </xsl:choose>
        <xsl:text>
			obj["curDiv"] = </xsl:text>
        <xsl:value-of select="$ChapterID"/>
        <xsl:text>;
			obj["nextDiv"] = </xsl:text>
        <xsl:value-of select="$ChapterID + 1"/>
        <xsl:text>;
			obj["closeWindow"] = "</xsl:text>
        <xsl:call-template name="BuildLocalizedString">
            <xsl:with-param name="KeyName" select="'CloseWindow'"/>
        </xsl:call-template>
        <xsl:text>";

		var strFlashVideoVars = fixStaticPath('</xsl:text>
        <xsl:value-of select="$MediaPath"/>
        <xsl:value-of select="$BulletinVideoSrc"/>
        <xsl:text disable-output-escaping="yes">');
		strFlashVideoVars = "res=" + strFlashVideoVars + "&amp;autostart=true&amp;protocol=http";
		var strFlash = '</xsl:text>
        <xsl:if test="$BulletinVideoSrc != ''">
            <xsl:text disable-output-escaping="yes">&lt;embed src="flvplayer.swf" quality="high" bgcolor="#999999" ';
		strFlash = strFlash + '</xsl:text>
            <xsl:if test="wc:Video/@width">
                <xsl:text>width="</xsl:text>
                <xsl:value-of select="wc:Video/@width"/>
                <xsl:text>" </xsl:text>
            </xsl:if>
            <xsl:if test="wc:Video/@height">
                <xsl:text>height="</xsl:text>
                <xsl:value-of select="wc:Video/@height"/>
                <xsl:text>" </xsl:text>
            </xsl:if>
            <xsl:text disable-output-escaping="yes">';
		strFlash = strFlash + 'FlashVars="' + strFlashVideoVars + '" Scale="exactfit" Menu="false" salign="1" ';
		strFlash = strFlash + 'swLiveConnect="true" id="idFlash" name="idFlash" ';
		strFlash = strFlash + 'allowScriptAccess="sameDomain" type="application/x-shockwave-flash" pluginspage="http://www.macromedia.com/go/getflashplayer" /&gt;</xsl:text>
        </xsl:if>
        <xsl:text>';
			obj["video"] = strFlash;

			break;
			</xsl:text>
    </xsl:template>

    <xsl:template name="EndBulletinCommon">
        <xsl:text>
		default:
			alert("No ordinal '" + nOrdinal + "' found");
			break;
	}
	return obj;
}
			</xsl:text>
    </xsl:template>

    <xsl:template name="StartBulletinLink">
        <xsl:text>
function getLinkBulletinInfo(nOrdinal)
{
	var obj = new Object();
	switch (nOrdinal)
	{
		</xsl:text>
    </xsl:template>

    <xsl:template name="AddChapterBulletinLink">
        <xsl:param name="ChapterBulletinNum"/>
        <xsl:if test="($ChapterBulletinNum &gt; 0) and ($ChapterBulletinNum &lt;= $ChapterCount)">
            <xsl:for-each select="wc:Chapters/wc:Chapter[$ChapterBulletinNum]/wc:LinkBulletins/wc:LinkBulletin">
                <xsl:if test="wc:Body or wc:Illustration or wc:Video and not(wc:URL)">
                    <xsl:call-template name="CaseBulletinLink">
                        <xsl:with-param name="ChapterID" select="$ChapterBulletinNum"/>
                        <xsl:with-param name="BulletinImageSrc" select="concat($MediaPath, wc:Illustration/@src)"/>
                        <xsl:with-param name="BulletinImageWidth" select="wc:Illustration/@width"/>
                        <xsl:with-param name="BulletinImageHeight" select="wc:Illustration/@height"/>
                        <xsl:with-param name="BulletinAltText" select="wc:Illustration/wc:AlternateText"/>
                        <xsl:with-param name="BulletinTitle" select="@variety"/>
                        <xsl:with-param name="BulletinVideoSrc" select="wc:Video/@src"/>
                    </xsl:call-template>
                </xsl:if>
            </xsl:for-each>

            <xsl:call-template name="AddChapterBulletinLink">
                <xsl:with-param name="ChapterBulletinNum" select="$ChapterBulletinNum + 1"/>
            </xsl:call-template>
        </xsl:if>
    </xsl:template>

    <xsl:template name="AddPreviewBulletinLink">
        <xsl:param name="ChapterBulletinNum"/>

        <xsl:for-each select="wc:LinkBulletin">
            <xsl:if test="wc:Body or wc:Illustration or wc:Video and not(wc:URL)">
                <xsl:call-template name="CaseBulletinLink">
                    <xsl:with-param name="ChapterID" select="$ChapterBulletinNum"/>
                    <xsl:with-param name="BulletinImageSrc" select="concat($MediaPath, wc:Illustration/@src)"/>
                    <xsl:with-param name="BulletinImageWidth" select="wc:Illustration/@width"/>
                    <xsl:with-param name="BulletinImageHeight" select="wc:Illustration/@height"/>
                    <xsl:with-param name="BulletinAltText" select="wc:Illustration/wc:AlternateText"/>
                    <xsl:with-param name="BulletinTitle" select="@variety"/>
                    <xsl:with-param name="BulletinVideoSrc" select="wc:Video/@src"/>
                </xsl:call-template>
            </xsl:if>
        </xsl:for-each>
    </xsl:template>

    <xsl:template name="CaseBulletinLink">
        <xsl:param name="ChapterID"/>
        <xsl:param name="BulletinImageSrc"/>
        <xsl:param name="BulletinImageWidth"/>
        <xsl:param name="BulletinImageHeight"/>
        <xsl:param name="BulletinAltText"/>
        <xsl:param name="BulletinTitle"/>
        <xsl:param name="BulletinVideoSrc"/>
        <xsl:text>
		case '</xsl:text>
        <xsl:value-of select="$ChapterID"/>
        <xsl:text>-</xsl:text>
        <xsl:value-of select="@id"/>
        <xsl:text>':
			obj["title"] = "</xsl:text>
        <xsl:call-template name="AddBulletinTitle">
            <xsl:with-param name="BulletinTitle" select="$BulletinTitle"/>
        </xsl:call-template>
        <xsl:text>";
			obj["name"] = "</xsl:text>
        <xsl:for-each select="wc:Name">
            <xsl:apply-templates/>
        </xsl:for-each>
        <xsl:text>";
			obj["desc"] = "</xsl:text>
        <xsl:for-each select="wc:Body">
            <xsl:apply-templates/>
        </xsl:for-each>
        <xsl:text>";
			</xsl:text>
        <xsl:if test="($BulletinTitle = 'News') and (wc:Headline)">
            <xsl:text>
				obj["headline"] = "</xsl:text>
            <xsl:for-each select="wc:Headline">
                <xsl:apply-templates/>
            </xsl:for-each>
            <xsl:text>";
				obj["subhead"] = "</xsl:text>
            <xsl:for-each select="wc:Subhead">
                <xsl:apply-templates/>
            </xsl:for-each>
            <xsl:text>";
				</xsl:text>
        </xsl:if>
        <xsl:text>
			obj["imgSrc"] = fixStaticPath("</xsl:text>
        <xsl:value-of select="$BulletinImageSrc"/>
        <xsl:text>");
			obj["imgWidth"] = "</xsl:text>
        <xsl:value-of select="$BulletinImageWidth"/>
        <xsl:text>";
			obj["imgHeight"] = "</xsl:text>
        <xsl:value-of select="$BulletinImageHeight"/>
        <xsl:text>";
			obj["imgAltText"] = "</xsl:text>
        <xsl:value-of select="$BulletinAltText"/>
        <xsl:text>";
			obj["imgSrcPrint"] = </xsl:text>
        <xsl:choose>
            <xsl:when test="@allowPrint = 'true'">
                <xsl:text>fixStaticPath('</xsl:text>
                <xsl:value-of select="$ImagePath"/>
                <xsl:text>printer.gif');</xsl:text>
            </xsl:when>
            <xsl:otherwise>
                <xsl:text>"";</xsl:text>
            </xsl:otherwise>
        </xsl:choose>
        <xsl:text>
			obj["curDiv"] = </xsl:text>
        <xsl:value-of select="$ChapterID"/>
        <xsl:text>;
			obj["nextDiv"] = </xsl:text>
        <xsl:value-of select="$ChapterID + 1"/>
        <xsl:text>;
			obj["closeWindow"] = "</xsl:text>
        <xsl:call-template name="BuildLocalizedString">
            <xsl:with-param name="KeyName" select="'CloseWindow'"/>
        </xsl:call-template>
        <xsl:text>";

		var strFlashVideoVars = fixStaticPath('</xsl:text>
        <xsl:value-of select="$MediaPath"/>
        <xsl:value-of select="$BulletinVideoSrc"/>
        <xsl:text disable-output-escaping="yes">');
		strFlashVideoVars = "res=" + strFlashVideoVars + "&amp;autostart=true&amp;protocol=http";
		var strFlash = '</xsl:text>
        <xsl:if test="$BulletinVideoSrc != ''">
            <xsl:text disable-output-escaping="yes">&lt;embed src="flvplayer.swf" quality="high" bgcolor="#999999" ';
		strFlash = strFlash + '</xsl:text>
            <xsl:if test="wc:Video/@width">
                <xsl:text>width="</xsl:text>
                <xsl:value-of select="wc:Video/@width"/>
                <xsl:text>" </xsl:text>
            </xsl:if>
            <xsl:if test="wc:Video/@height">
                <xsl:text>height="</xsl:text>
                <xsl:value-of select="wc:Video/@height"/>
                <xsl:text>" </xsl:text>
            </xsl:if>
            <xsl:text disable-output-escaping="yes">';
		strFlash = strFlash + 'FlashVars="' + strFlashVideoVars + '" Scale="exactfit" Menu="false" salign="1" ';
		strFlash = strFlash + 'swLiveConnect="true" id="idFlash" name="idFlash" ';
		strFlash = strFlash + 'allowScriptAccess="sameDomain" type="application/x-shockwave-flash" pluginspage="http://www.macromedia.com/go/getflashplayer" /&gt;</xsl:text>
        </xsl:if>
        <xsl:text>';
			obj["video"] = strFlash;

			break;
			</xsl:text>
    </xsl:template>

    <xsl:template name="AddBulletinTitle">
        <xsl:param name="BulletinTitle"/>
        <xsl:choose>
            <xsl:when test="$BulletinTitle = 'News'">
                <xsl:call-template name="BuildLocalizedString">
                    <xsl:with-param name="KeyName" select="'InTheNews'"/>
                </xsl:call-template>
            </xsl:when>
            <xsl:when test="$BulletinTitle = 'Code'">
                <xsl:call-template name="BuildLocalizedString">
                    <xsl:with-param name="KeyName" select="'CodeExcerpt'"/>
                </xsl:call-template>
            </xsl:when>
            <xsl:when test="$BulletinTitle = 'Policy'">
                <xsl:call-template name="BuildLocalizedString">
                    <xsl:with-param name="KeyName" select="'Policy'"/>
                </xsl:call-template>
            </xsl:when>
            <xsl:when test="$BulletinTitle = 'DosAndDonts'">
                <xsl:call-template name="BuildLocalizedString">
                    <xsl:with-param name="KeyName" select="'DosandDonts'"/>
                </xsl:call-template>
            </xsl:when>
            <xsl:when test="$BulletinTitle = 'CodeCompanion'">
                <xsl:call-template name="BuildLocalizedString">
                    <xsl:with-param name="KeyName" select="'CodeCompanion'"/>
                </xsl:call-template>
            </xsl:when>
            <xsl:when test="$BulletinTitle = 'FAQs'">
                <xsl:call-template name="BuildLocalizedString">
                    <xsl:with-param name="KeyName" select="'FAQs'"/>
                </xsl:call-template>
            </xsl:when>
            <xsl:otherwise>
                <xsl:message terminate="yes">
                    <xsl:text>ERROR -> LinkBulletin in Chapter '</xsl:text>
                    <xsl:value-of select="preceding::wc:Chapter/wc:Heading"/>
                    <xsl:text>' contains an unknown variety type - '</xsl:text>
                    <xsl:value-of select="$BulletinTitle"/>
                    <xsl:text>'</xsl:text>
                </xsl:message>
            </xsl:otherwise>
        </xsl:choose>
    </xsl:template>

    <!-- End of Bulletin.xslt -->
    <!-- Start of Term.xslt -->

    <xsl:template name="StartTermPopup">
        <xsl:text>
function popUpTerm(nOrdinal, height, width)
{
	var url = "</xsl:text>
        <xsl:value-of select="$StaticHtmlPath"/>
        <xsl:text>popupTerm.htm";
	url = url + "?o=" + nOrdinal;

	// [DR] Changed the following to use the popUp() function
	popUp(url, "", width, height, false);
}

function getTermInfo(nOrdinal)
{
	var obj = new Object();
	switch (nOrdinal)
	{
			</xsl:text>
    </xsl:template>

    <xsl:template name="AddChapterTermPopup">
        <xsl:param name="ChapterTermNum"/>

        <xsl:if test="($ChapterTermNum &gt; 0) and ($ChapterTermNum &lt;= $ChapterCount)">
            <xsl:for-each select="wc:Chapters/wc:Chapter[$ChapterTermNum]/wc:Terms/wc:Term">
                <!--				<xsl:choose>
					<xsl:when test="@variety='LegalAnnotation'">
						<xsl:value-of select="text()"/>
					</xsl:when>
					<xsl:otherwise>-->
                <xsl:call-template name="CaseTermPopup">
                    <xsl:with-param name="ChapterID" select="$ChapterTermNum"/>
                    <xsl:with-param name="TermOrdinal" select="@ordinal"/>
                </xsl:call-template>
                <!--					</xsl:otherwise>
				</xsl:choose>-->
            </xsl:for-each>
            <!--
   add "variety" attribute which can be "Standard" or "LegalAnnotation"
(default to Standard). Standard is the only kind that should be rendered.
LegalAnnotation should be ignored (i.e., if <a href="term:3"> is found in
the discussion, and <term ordinal=3 variety="LegalAnnotation">, then
instead of rendering as a hyperlink it is rendered as plain text).
LegalAnnotation will be for special use by editors.
-->

            <xsl:call-template name="AddChapterTermPopup">
                <xsl:with-param name="ChapterTermNum" select="$ChapterTermNum + 1"/>
            </xsl:call-template>
        </xsl:if>
    </xsl:template>

    <xsl:template name="AddPreviewTermPopup">
        <xsl:param name="ChapterTermNum"/>

        <xsl:for-each select="wc:Term">
            <xsl:call-template name="CaseTermPopup">
                <xsl:with-param name="ChapterID" select="$ChapterTermNum"/>
                <xsl:with-param name="TermOrdinal" select="@ordinal"/>
            </xsl:call-template>
        </xsl:for-each>
    </xsl:template>

    <xsl:template name="CaseTermPopup">
        <xsl:param name="ChapterID"/>
        <xsl:param name="TermOrdinal"/>
        <xsl:text>
		case "</xsl:text><xsl:value-of select="$ChapterID"/>-<xsl:value-of select="$TermOrdinal"/><xsl:text>":
			obj.title = "</xsl:text>
        <xsl:call-template name="BuildLocalizedString">
            <xsl:with-param name="KeyName" select="'HelpWindow'"/>
        </xsl:call-template>
        <xsl:text>";
			obj.btnName = "</xsl:text>
        <xsl:call-template name="BuildLocalizedString">
            <xsl:with-param name="KeyName" select="'CloseWindow'"/>
        </xsl:call-template>
        <xsl:text>";
			obj.name = "</xsl:text>
        <xsl:for-each select="wc:Name">
            <xsl:apply-templates/>
        </xsl:for-each>
        <xsl:text>";
			obj.def = "</xsl:text>
        <xsl:for-each select="wc:Definition">
            <xsl:apply-templates/>
        </xsl:for-each>
        <xsl:text>";
			obj.imgSrc = "";</xsl:text>
        <xsl:if test="wc:Illustration">
            <xsl:text disable-output-escaping="yes">
				obj.imgSrc = "&lt;img src='" + fixStaticPath("</xsl:text>
            <xsl:value-of select="$MediaPath"/>
            <xsl:value-of select="wc:Illustration/@src"/>
            <xsl:text>") + "' width='" + </xsl:text>
            <xsl:value-of select="wc:Illustration/@width"/>
            <xsl:text> + "' height='" + </xsl:text>
            <xsl:value-of select="wc:Illustration/@height"/>
            <xsl:text> + "' ";</xsl:text>
            <xsl:if test="wc:Illustration/wc:AlternateText">
                <xsl:text>
					obj.imgSrc += "' altText='" + </xsl:text>
                <xsl:value-of select="wc:Illustration/wc:AlternateText"/>
                <xsl:text> + "' ";</xsl:text>
            </xsl:if>
            <xsl:text disable-output-escaping="yes">
				obj.imgSrc += " /&gt;";
				</xsl:text>
        </xsl:if><xsl:text>
			obj["imgSrcPrint"] = </xsl:text>
        <xsl:choose>
            <xsl:when test="@allowPrint = 'true'">
                <xsl:text>fixStaticPath('</xsl:text>
                <xsl:value-of select="$ImagePath"/>
                <xsl:text>printer.gif');</xsl:text>
            </xsl:when>
            <xsl:otherwise>
                <xsl:text>"";</xsl:text>
            </xsl:otherwise>
        </xsl:choose>
        <xsl:text>
			break;
			</xsl:text>
    </xsl:template>
    <xsl:template name="EndTermPopup">
        <xsl:text>
		default:
			alert("No ordinal '" + nOrdinal + "' found");
			break;
	}
	return obj;
}
			</xsl:text>
    </xsl:template>

    <!-- End of Term.xslt -->
    <!-- Start of Game.xslt -->

    <xsl:template name="initRandomArray">
        <xsl:param name="Index"/>
        <xsl:param name="NumQuestions"/>
        objChapter = new Object();
        objChapter["ChapterIndex"] = <xsl:value-of select="$Index"/>;
        arrQuestions = new Array();

        for (i = 0; i &lt; <xsl:value-of select="$NumQuestions"/>; i++)
        {
        arrQuestions[i] = i;
        }

        objChapter["arrQuestion"] = arrQuestions;
        arrChapters[<xsl:value-of select="$Index"/>] = objChapter;
    </xsl:template>

    <xsl:template name="buildRandomArray">
        function initQuestions()
        {
        <xsl:choose>
            <xsl:when test="$elementPreview">
                objChapter = new Object();
                objChapter["ChapterIndex"] = 0;
                arrQuestions = new Array();
                arrQuestions[0] = 0;
                objChapter["arrQuestion"] = arrQuestions;
                arrChapters[0] = objChapter;
            </xsl:when>
            <xsl:otherwise>
                <xsl:for-each select="//wc:QuizQuestions">
                    <xsl:call-template name="initRandomArray">
                        <xsl:with-param name="Index" select="position()-1"/>
                        <xsl:with-param name="NumQuestions" select="count(wc:QuizQuestion)"/>
                    </xsl:call-template>
                </xsl:for-each>
            </xsl:otherwise>
        </xsl:choose>
        }
    </xsl:template>

    <xsl:template name="jsStartGame">
        <xsl:text disable-output-escaping="yes">
var questionFrame, answerFrame;
var allowresizem, strIntro;
var arrChapters = new Array();
var objChapter, arrQuestions;
var f, n, q, tmp;
var strCurQuestionID, nAnswerMissedFirst = 0;	// used to track questions missed on first attempt

	function randomizeTheArray()
	{
		// first do the chapters
		for (i = 1; i &lt; arrChapters.length; i++)
		{
			// Generate a random number in the range [0.0, 1.0)
			f = Math.random();
			// Transform that number in one of {0, 1, 2, ... , i-1}
			n = Math.round(f * (i-1));

			// Permute
			tmp = arrChapters[i];
			arrChapters[i] = arrChapters[n];
			arrChapters[n] = tmp;
		}

		// then do the chapter questions
		for (i = 0; i &lt; arrChapters.length; i++)
		{
			for (q = 1; q &lt; arrChapters[i]["arrQuestion"].length; q++)
			{
				// Generate a random number in the range [0.0, 1.0)
				f = Math.random();
				// Transform that number in one of {0, 1, 2, ... , q-1}
				n = Math.round(f * (q-1));

				// Permute
				tmp = arrChapters[i]["arrQuestion"][q];
				arrChapters[i]["arrQuestion"][q] = arrChapters[i]["arrQuestion"][n];
				arrChapters[i]["arrQuestion"][n] = tmp;
			}
		}

//		for (i = 0; i &lt; arrChapters.length; i++)
//		{
//			for (q = 0; q &lt; arrChapters[i]["arrQuestion"].length; q++)
//				alert("chapter " + arrChapters[i]["ChapterIndex"] + " question " + arrChapters[i]["arrQuestion"][q] + ".");
//		}
	}
		</xsl:text>
        <xsl:call-template name="buildRandomArray"/>
        <xsl:text disable-output-escaping="yes">

function gameClosing()
{
	// Report to the LMS - no harm if already done
	earlyExit();
			
	questionFrame = null;
	answerFrame = null;
	popupHandle = null;
}

function getButtonName(which)
{
	switch (which)
	{
		case "continue":
			return "</xsl:text>
        <xsl:call-template name="BuildLocalizedString">
            <xsl:with-param name="KeyName" select="'Continue'"/>
        </xsl:call-template>
        <xsl:text>";
			break;
		
		case "rollDice":
			return "</xsl:text>
        <xsl:call-template name="BuildLocalizedString">
            <xsl:with-param name="KeyName" select="'RollDice'"/>
        </xsl:call-template>
        <xsl:text>";
			break;
			
		default:
			return "";
			break;
	}
}

function getQuizName(whichGame)
{
	switch (whichGame.game)
	{
		case "popQuestion":
			return "</xsl:text>
        <xsl:call-template name="BuildLocalizedString">
            <xsl:with-param name="KeyName" select="'PopQuiz'"/>
        </xsl:call-template>
        <xsl:text>";
			break;
			
		case "quizLite":
			return "</xsl:text>
        <xsl:for-each select="//wc:Game">
            <xsl:if test="@variety = 'QuizLite'">
                <xsl:value-of select="wc:Name"/>
            </xsl:if>
        </xsl:for-each>
        <xsl:text>";
			break;

		case "ceoGame":
			return "</xsl:text>
        <xsl:for-each select="//wc:Game">
            <xsl:if test="@variety = 'CEO'">
                <xsl:value-of select="wc:Name"/>
            </xsl:if>
        </xsl:for-each>
        <xsl:text>";
			break;

		case "airlineGame":
			return "</xsl:text>
        <xsl:for-each select="//wc:Game">
            <xsl:if test="@variety = 'Airline'">
                <xsl:value-of select="wc:Name"/>
            </xsl:if>
        </xsl:for-each>
        <xsl:text>";
			break;

		case "hopGame":
			return "</xsl:text>
        <xsl:for-each select="//wc:Game">
            <xsl:if test="@variety = 'HopToTheTop'">
                <xsl:value-of select="wc:Name"/>
            </xsl:if>
        </xsl:for-each>
        <xsl:text>";
			break;
<!--			
		case "boardGame":
			return "</xsl:text>
			<xsl:for-each select="//wc:Game">
				<xsl:if test="@variety = 'BoardGame'">
					<xsl:value-of select="wc:Name"/>
				</xsl:if>
			</xsl:for-each><xsl:text>";
			break;
			
		case "matchGame":
			return "</xsl:text>
			<xsl:for-each select="//wc:MatchGame">
				<xsl:value-of select="wc:Heading"/>
			</xsl:for-each><xsl:text>";
			break;
-->
		default:
			return "";;
			break;
	}
}

function startGame(game_pos)
{
	closePopup();
	allowresize = "no";
	switch (game_pos)
	{
		</xsl:text>
    </xsl:template>

    <xsl:template name="jsAddGame">
        <xsl:param name="variety"/>
        <xsl:variable name="fileName">
            <xsl:choose>
                <xsl:when test="starts-with($variety, 'Both')">
                    <xsl:value-of select="substring-after($variety, 'Both')"/>
                </xsl:when>
                <xsl:otherwise>
                    <xsl:value-of select="$variety"/>
                </xsl:otherwise>
            </xsl:choose>
        </xsl:variable>
 <xsl:variable name="gameSuffix">
        <xsl:choose>
            <xsl:when test="wc:Type=''">
                <xsl:value-of select="''"/>
            </xsl:when>
            <xsl:otherwise>
                <xsl:value-of select="'_'"/><xsl:value-of select="wc:Type"/>
            </xsl:otherwise>
        </xsl:choose>
</xsl:variable>
        <xsl:choose>
            <xsl:when test="starts-with($variety, 'Flash')">
            </xsl:when>
            <xsl:otherwise>
                <xsl:text>
		case </xsl:text>
                <xsl:value-of select="position()"/>
                <xsl:text>:
		{
			var url = "</xsl:text>
                <xsl:value-of select="$StaticHtmlPath"/>
                <xsl:value-of select="$fileName"/>
                <xsl:value-of select="$gameSuffix"/>
                <xsl:text>.htm";
			popUp(url,'',</xsl:text>
                <xsl:choose>
                    <xsl:when test="$variety= 'QuizLite' or $variety = 'BothQuizLite'">
                        <xsl:text>560,420,true</xsl:text>
                    </xsl:when>
                    <xsl:when test="$variety= 'QuizLiteForJAWS'">
                        <xsl:text>560,420,true</xsl:text>
                    </xsl:when>
                    <xsl:when test="$variety= 'BoardGame'">
                        <xsl:text>640,414,false</xsl:text>
                    </xsl:when>
                    <xsl:when test="$variety= 'CheezChase' or $variety= 'BothCheezChase'">
                        <xsl:text>600,450,false</xsl:text>
                    </xsl:when>
                    <xsl:when test="$variety= 'HopToTheTop'">
                        <xsl:text>600,450,false</xsl:text>
                    </xsl:when>
                    <xsl:when test="$variety= 'CEO' or $variety= 'BothCEO' or $variety='Airline'">
                        <xsl:text>650,414,false</xsl:text>
                    </xsl:when>
                    <xsl:otherwise>
                        <xsl:message terminate="yes">
                            <xsl:text>ERROR -> Unsupported game variety - '</xsl:text>
                            <xsl:value-of select="$variety"/>
                            <xsl:text>'.</xsl:text>
                        </xsl:message>
                    </xsl:otherwise>
                </xsl:choose>
                <xsl:text>);
			break;
		}
		</xsl:text>
            </xsl:otherwise>
        </xsl:choose>
    </xsl:template>

    <xsl:template name="jsEndGame">
        <xsl:text>
		default:
			var defUrl = "</xsl:text>
        <xsl:value-of select="$StaticHtmlPath"/>
        <xsl:text>QuizLite</xsl:text>
<xsl:text>.htm";
			popUp(defUrl,'',560,420,true); 
			break;
	}
}
		</xsl:text>
    </xsl:template>

    <xsl:template name="jsPlayGame">
        <xsl:text>
var curMajor = 0, curMinor = 0;
var arrFeedback = new Array();
var correctAnswer = false;
var nTry = 0;
var bCorrectFirstTryOnThisQuestion = true;
var bNewQScored = false;;
var bLastQuestion = false;
var bNeedIntro = false;
var bPause = false;
var g_bNoFramesInGame = false;

var numQGroups = </xsl:text>
        <xsl:choose>
            <xsl:when test="$elementPreview">
                <xsl:value-of select="count(//wc:QuizQuestion)"/>
                <xsl:text> + </xsl:text>
                <xsl:value-of select="count(//wc:FinalQuizQuestion)"/>
            </xsl:when>
            <xsl:otherwise>
                <xsl:value-of select="count(//wc:QuizQuestions)"/>
                <xsl:text> + </xsl:text>
                <xsl:value-of select="count(//wc:FinalQuizQuestion)"/>
            </xsl:otherwise>
        </xsl:choose>
        <xsl:text>;
var bHasFinalQ = </xsl:text>
        <xsl:choose>
            <xsl:when test="$elementPreview">
                false
            </xsl:when>
            <xsl:otherwise>
                <xsl:value-of select="count(//wc:FinalQuizQuestion) &gt; 0"/>
            </xsl:otherwise>
        </xsl:choose>
        <xsl:text>;

function goNextNoFrames()
{
	g_bNoFramesInGame = true;
	
	bNewQScored = false;

	if (popupHandle == null)
		alert("popupHandle == null");
	
	if (typeof(popupHandle) != "object")
		alert("typeof(popupHandle) != 'object'");
		
	if (curMajor == 0)	// game is starting up
	{
		initQuestions();
		randomizeTheArray();

		clearAnswersNoFrames();

		popupHandle.document.getElementById("Table1").style.display = "block";
//		popupHandle.document.getElementById("Continue").style.display = "block";
	}

	// some logic to determine if user got the answer correct on the first try....
	selectNextQuestion();
	
	if (curMajor &lt;= numQGroups)
	{
		bLastQuestion = (curMajor == numQGroups);
		
		// hide the table so it doesn't accumulate vertical space
		popupHandle.document.getElementById("Table1").style.display = "none";
			
		displayQuestionFeedback();
			
displayQuestion(curMajor, curMinor);

		popupHandle.document.getElementById("Table1").style.display = "block";
	}
	else
	{
	</xsl:text>
        <xsl:if test="not($elementPreview)">
            <xsl:text disable-output-escaping="yes">
		alert("No Quiz Questions available");
		</xsl:text>
        </xsl:if>
        <xsl:text disable-output-escaping="yes">
		closePopup();
		top.close();
	}
}

function clearAnswersNoFrames()
{
	var theTable = popupHandle.document.getElementById("Table1");
	var numRows = theTable.rows.length;
	var row;
	for (row = numRows-1; row &gt;= 0; row--)
		theTable.deleteRow(row);
<!--	
	popupHandle.document.getElementById("Answer1").innerHTML = "";
	popupHandle.document.getElementById("Answer2").innerHTML = "";
	popupHandle.document.getElementById("Answer3").innerHTML = "";
	popupHandle.document.getElementById("Answer4").innerHTML = "";
	popupHandle.document.getElementById("Answer5").innerHTML = "";
	popupHandle.document.getElementById("Answer6").innerHTML = "";
	popupHandle.document.getElementById("Answer7").innerHTML = "";
	popupHandle.document.getElementById("Answer8").innerHTML = "";

	popupHandle.document.getElementById("Answer1").className = "";
	popupHandle.document.getElementById("Answer2").className = "";
	popupHandle.document.getElementById("Answer3").className = "";
	popupHandle.document.getElementById("Answer4").className = "";
	popupHandle.document.getElementById("Answer5").className = "";
	popupHandle.document.getElementById("Answer6").className = "";
	popupHandle.document.getElementById("Answer7").className = "";
	popupHandle.document.getElementById("Answer8").className = "";

	for (var i = 0; i &lt; 8; i++)
		arrFeedback[i] = "";
		
	popupHandle.document.getElementById("Radio1").checked = false;
	popupHandle.document.getElementById("Radio2").checked = false;
	popupHandle.document.getElementById("Radio3").checked = false;
	popupHandle.document.getElementById("Radio4").checked = false;
	popupHandle.document.getElementById("Radio5").checked = false;
	popupHandle.document.getElementById("Radio6").checked = false;
	popupHandle.document.getElementById("Radio7").checked = false;
	popupHandle.document.getElementById("Radio8").checked = false;

	popupHandle.document.getElementById("Radio1").style.display = "none";
	popupHandle.document.getElementById("Radio2").style.display = "none";
	popupHandle.document.getElementById("Radio3").style.display = "none";
	popupHandle.document.getElementById("Radio4").style.display = "none";
	popupHandle.document.getElementById("Radio5").style.display = "none";
	popupHandle.document.getElementById("Radio6").style.display = "none";
	popupHandle.document.getElementById("Radio7").style.display = "none";
	popupHandle.document.getElementById("Radio8").style.display = "none";
	
	popupHandle.document.getElementById("Row1").style.display = "none";
	popupHandle.document.getElementById("Row2").style.display = "none";
	popupHandle.document.getElementById("Row3").style.display = "none";
	popupHandle.document.getElementById("Row4").style.display = "none";
	popupHandle.document.getElementById("Row5").style.display = "none";
	popupHandle.document.getElementById("Row6").style.display = "none";
	popupHandle.document.getElementById("Row7").style.display = "none";
	popupHandle.document.getElementById("Row8").style.display = "none";
-->
}


function pauseNext()
{
	if (bCorrectFirstTryOnThisQuestion)
		bPause = true;

	goNext();
}

function goNext()
{
//try
{
	bNewQScored = false;

	if (goPart1())
		goPart2();
}
/*
catch(ex)
{
	if (ex instanceof Error)
		alert(ex.name + " --> " + ex.message);
	else
		alert(ex);
}
*/
}

function goPart1()
{
	if (popupHandle == null)
		alert("popupHandle == null");
	
	if (typeof(popupHandle) != "object")
		alert("typeof(popupHandle) != 'object'");
		
	if (popupHandle.game == "mazeGame" || popupHandle.game == "ceoGame" || popupHandle.game == "hopGame" || popupHandle.game == "airlineGame")
	{
		questionFrame = popupHandle.lower.question;		
		answerFrame = popupHandle.lower.answer;
	}
	
	if (popupHandle.game == "mazeGame" || popupHandle.game == "hopGame")
	{
		if (bCorrectFirstTryOnThisQuestion)
			bPause = !bPause;
	}

	if (curMajor == 0)	// game is starting up
	{
		initQuestions();
		if (popupHandle.game != "boardGame")
			randomizeTheArray();

		if (popupHandle.game != "mazeGame" &amp;&amp; popupHandle.game != "ceoGame" &amp;&amp; popupHandle.game != "hopGame"  &amp;&amp; popupHandle.game != "airlineGame")
		{
			questionFrame = popupHandle.question;
			answerFrame = popupHandle.answer;
		}
		
		clearAnswers();

		if (bNeedIntro &amp;&amp; popupHandle.game == "boardGame")
		{
			bNeedIntro = false;

			popupHandle.initDice(getRiskyInfo());
			showRiskyDice(true);

			// set intro text from xsl
			var introText = "&lt;div class='boardIntroduction'&gt;</xsl:text>
        <!--				<xsl:call-template name="BuildLocalizedString">
					<xsl:with-param name="KeyName" select="'Welcometo'"/>
				</xsl:call-template><xsl:value-of select="$Space"/>	-->
        <xsl:for-each select="//wc:Game">
            <xsl:if test="@variety = 'BoardGame'">
                <!--
						<xsl:call-template name="cleanQuote">
							<xsl:with-param name="string" select="wc:Name"/>
						</xsl:call-template>
						<xsl:text disable-output-escaping="yes">!&lt;/b&gt;&lt;/font&gt;&lt;/p&gt;&lt;p&gt;</xsl:text>
						<xsl:call-template name="cleanQuote">
							<xsl:with-param name="string" select="wc:Introduction"/>
						</xsl:call-template>
						<xsl:text disable-output-escaping="yes">&lt;/p&gt;&lt;p&gt;</xsl:text>
					</xsl:if>
				</xsl:for-each>
				<xsl:call-template name="BuildLocalizedString">
					<xsl:with-param name="KeyName" select="'Goodluck'"/>
				</xsl:call-template>
-->
                <xsl:for-each select="wc:Introduction">
                    <xsl:apply-templates/>
                </xsl:for-each>
            </xsl:if>
        </xsl:for-each>
        <xsl:text disable-output-escaping="yes">&lt;/div&gt;&lt;p&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;font size='-2'&gt;Copyright &amp;copy; &lt;span id='CopyrightYears' name='CopyrightYears'&gt;&lt;/span&gt;. WeComply, Inc.&lt;br&gt;All rights reserved.&lt;/font&gt;&lt;/p&gt;";
			if (document.all)	// IE
			{
				questionFrame.QuestionText.innerHTML = introText;
				answerFrame.continueBtn.style.onclick = pauseNext;
				questionFrame.Table1.style.display = "block";
			}
			else	// NS 7
			{
				questionFrame.document.getElementById("QuestionText").innerHTML = introText;
				answerFrame.document.getElementById("continueBtn").style.onclick = pauseNext;
				questionFrame.document.getElementById("Table1").style.display = "block";
			}
			runtimeSub(questionFrame);

			bPause = true;	// so RollDice btn doesn't have to be changed
			return false;
		}

		if (document.all)	// IE
		{
			questionFrame.Table1.style.display = "block";
		
			if (popupHandle.game != "mazeGame" &amp;&amp; popupHandle.game != "ceoGame" &amp;&amp; popupHandle.game != "hopGame"  &amp;&amp; popupHandle.game != "airlineGame")
				answerFrame.Continue.style.display = "block";
		}
		else	// NS 7
		{
			questionFrame.document.getElementById("Table1").style.display = "block";

			if (popupHandle.game != "mazeGame" &amp;&amp; popupHandle.game != "ceoGame" &amp;&amp; popupHandle.game != "hopGame"  &amp;&amp; popupHandle.game != "airlineGame")
				answerFrame.document.getElementById("Continue").style.display = "block";
		}
	}

	// if pause + risky + last question (but it hasn't been set yet!)
	if (bPause &amp;&amp; ((curMajor + 1) != numQGroups) &amp;&amp; popupHandle.game == "boardGame")
	{
		// this is to display feedback in left side and roll dice in right and move pieces, 
		//	then display new answer in left - waiting for pickedAnswer
		clearAnswers();
		var turn = curMajor+1;
		if (g_totalQuestions &gt; 0)
		{
			if (document.all)	// IE
				questionFrame.QuestionText.innerHTML = getRiskyFeedback(turn);
			else	// NS 7
				questionFrame.document.getElementById("QuestionText").innerHTML = getRiskyFeedback(turn);
				
			questionFrame.scrollTo(0,0);
		}
		
		var roll = getRiskyRoll(turn);
		popupHandle.clickDice(roll, turn);
		return false;
	}
	
	// if pause + cc
	if (bPause &amp;&amp; (popupHandle.game == "mazeGame" || popupHandle.game == "hopGame"))
	{
		popupHandle.bottom.reactivateGame();
		return false;
	}
	
	if (bCorrectFirstTryOnThisQuestion &amp;&amp; curMajor > 0 &amp;&amp; (popupHandle.game == "ceoGame" || popupHandle.game != "airlineGame") )
		popupHandle.office.reactivateGame();

	return true;
}

function goPart2()
{
	// some logic to determine if user got the answer correct on the first try....
	selectNextQuestion();
	
	if (curMajor &lt;= numQGroups)
	{
		bLastQuestion = (curMajor == numQGroups);
		
		if (bLastQuestion &amp;&amp; popupHandle.game == "boardGame")
			showRiskyDice(false);

		// hide the table so it doesn't accumulate vertical space
		if (document.all)	// IE
			questionFrame.Table1.style.display = "none";
		else				// NS 7
			questionFrame.document.getElementById("Table1").style.display = "none";
			
		displayQuestionFeedback();
			
		displayQuestion(curMajor, curMinor);

		if (document.all)	// IE
			questionFrame.Table1.style.display = "block";
		else				// NS 7
			questionFrame.document.getElementById("Table1").style.display = "block";
	}
	else
	{
	</xsl:text>
        <xsl:if test="not($elementPreview)">
            <xsl:text disable-output-escaping="yes">
		alert("No Quiz Questions available");
		</xsl:text>
        </xsl:if>
        <xsl:text disable-output-escaping="yes">
		closePopup();
		top.close();
	}
}

function selectNextQuestion()
{
	if (bCorrectFirstTryOnThisQuestion)
	{
		curMajor += 1;
		curMinor = 1;
	}
	else
	{
		curMinor += 1;
	}
}

function gotoCertificate()
{
	closePopup();
	window.focus();

	var divCert = </xsl:text><xsl:value-of select="$CertificatePage"/><xsl:text>;</xsl:text>
        <xsl:choose>
            <xsl:when test="$LMSClientPath != 'noLMS' and not($elementPreview)">
                <xsl:text>
			NavigateDiv(divCert - 1, divCert);
			</xsl:text>
            </xsl:when>
            <xsl:otherwise>
                <xsl:text>
			document.getElementById("SurveyAnswers").style.display = "inline";
			RecheckConnectivity(divCert - 1);
			</xsl:text>
            </xsl:otherwise>
        </xsl:choose><xsl:text disable-output-escaping="yes">
}

function Done(nWhich)
{
	var qText = "&lt;div align='center'&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;font size='+1' color='maroon'&gt;&lt;b&gt;</xsl:text>
        <xsl:call-template name="BuildLocalizedString">
            <xsl:with-param name="KeyName" select="'Congratulations'"/>
        </xsl:call-template>
        <xsl:text disable-output-escaping="yes">&lt;br&gt;&lt;br&gt;&lt;font size='-1'&gt;</xsl:text>
        <xsl:call-template name="BuildLocalizedString">
            <xsl:with-param name="KeyName" select="'ThanksforPlaying'"/>
        </xsl:call-template>
        <xsl:text disable-output-escaping="yes">&lt;br&gt;&lt;br&gt;&lt;/font&gt;&lt;/b&gt;&lt;/font&gt;&lt;/div&gt;";
	if (g_bNoFramesInGame)
	{
		clearAnswersNoFrames();
		popupHandle.document.getElementById("Continue").style.display = "none";
		var theTable = popupHandle.document.getElementById("Table1");
		var newRow = theTable.insertRow(-1);
		var newCell = newRow.insertCell(-1);
		newCell.innerHTML = "&lt;div id='QuestionText' style='width:100%'&gt;" + qText + "&lt;/div&gt;";
	}
	else
	{
		if (document.all)	// IE
		{
			answerFrame.Continue.style.display = "none";
			questionFrame.QuestionText.innerHTML = qText;
		}
		else	// NS 7
		{
			answerFrame.document.getElementById("Continue").style.display = "none";
			questionFrame.document.getElementById("QuestionText").innerHTML = qText;
		}
	}
	
	var feedback = arrFeedback[nWhich] + "&lt;br&gt;&lt;br&gt;&lt;div align='center'&gt;&lt;a href='javascript:void(0)' onClick='master.gotoCertificate()'&gt;&lt;img class='navigationImg' src='" + fixStaticPath('</xsl:text><xsl:value-of select="$ImagePath"/><xsl:text>next.gif') + "' border='0' alt='</xsl:text>
        <xsl:call-template name="BuildLocalizedString">
            <xsl:with-param name="KeyName" select="'GetCertificate'"/>
        </xsl:call-template>
        <xsl:text disable-output-escaping="yes">'/&gt;&lt;/a&gt;&lt;br&gt;&lt;font color='maroon' size='-2'&gt;</xsl:text>
        <xsl:call-template name="BuildLocalizedString">
            <xsl:with-param name="KeyName" select="'ClickArrowForCertificate'"/>
        </xsl:call-template>
        <xsl:text disable-output-escaping="yes">&lt;/font&gt;&lt;/div&gt;";

	if (g_bNoFramesInGame)
	{
		popupHandle.document.getElementById("Feedback").innerHTML = feedback;
		popupHandle.scrollTo(0,0);
	}
	else
	{
		if (document.all)	// IE
			answerFrame.Feedback.innerHTML = feedback;
		else	// NS 7
			answerFrame.document.getElementById("Feedback").innerHTML = feedback;
		
		questionFrame.scrollTo(0,0);
		clearAnswers();
	}
}

function updateScore()
{
	// only update score for each question once
	if (!bNewQScored)
	{
		bNewQScored = true;
		
		if (!(bHasFinalQ &amp;&amp; bLastQuestion))
		{
			g_totalQuestions++;
			if (nTry == 1)
				g_correctQuestions++;
		}

		bCorrectFirstTryOnThisQuestion = (1 == nTry);
	}
}

function showRiskyDice(bShow)
{
	if (document.all)	// IE
	{
		answerFrame.answerDiv.style.display = bShow ? "none" : "block";
		answerFrame.riskyDiv.style.display = bShow ? "block" : "none";
	}
	else
	{
		answerFrame.document.getElementById("answerDiv").style.display = bShow ? "none" : "block";
		answerFrame.document.getElementById("riskyDiv").style.display = bShow ? "block" : "none";
	}
}

function pickedAnswer(nWhich)
{
	nTry++;
	if (!bNewQScored)
		bCorrectFirstTryOnThisQuestion = false;

	var thisFrame;
	thisFrame = answerFrame;

	if ("boardGame" == popupHandle.game)
	{
		showRiskyDice(false);
	}

	if (document.all)	// IE
		thisFrame.Feedback.innerHTML = arrFeedback[nWhich];
	else	// NS 7
		thisFrame.document.getElementById("Feedback").innerHTML = arrFeedback[nWhich];
	
	if (correctAnswer == nWhich)
	{
		updateScore();

		nTry = 0;

		if (bCorrectFirstTryOnThisQuestion &amp;&amp; !bLastQuestion &amp;&amp; popupHandle.game == "boardGame")
		{
			var tile = getRiskyTile(curMajor);
			popupHandle.setTile(tile);
		}

		if (document.all)	// IE
			thisFrame.Continue.style.display = "block";
		else	// NS 7
			thisFrame.document.getElementById("Continue").style.display = "block";

	</xsl:text>
        <xsl:if test="not($elementPreview)">
            <xsl:text disable-output-escaping="yes">
		if (bLastQuestion &amp;&amp; (bHasFinalQ || !bHasFinalQ &amp;&amp; bCorrectFirstTryOnThisQuestion))
			Done(nWhich);
		else	// stay in contact with lms
			updateBookmark();
		</xsl:text>
        </xsl:if>
        <xsl:text disable-output-escaping="yes">

		// just reported it, clear it out
		nAnswerMissedFirst = 0;
	}
	else
	{
		if (document.all)	// IE
			thisFrame.Continue.style.display = "none";
		else	// NS 7
			thisFrame.document.getElementById("Continue").style.display = "none";

		if (!bNewQScored &amp;&amp; 1 == nTry)	// not scored yet and first attempt
			nAnswerMissedFirst = nWhich;
	}
}

function pickedAnswerNoFrames(nWhich)
{
	nTry++;
	if (!bNewQScored)
		bCorrectFirstTryOnThisQuestion = false;

	popupHandle.document.getElementById("Feedback").innerHTML = arrFeedback[nWhich];
	
	if (correctAnswer == nWhich)
	{
		updateScore();

		nTry = 0;

		popupHandle.document.getElementById("Continue").style.display = "block";

	</xsl:text>
        <xsl:if test="not($elementPreview)">
            <xsl:text disable-output-escaping="yes">
		if (bLastQuestion &amp;&amp; (bHasFinalQ || !bHasFinalQ &amp;&amp; bCorrectFirstTryOnThisQuestion))
			Done(nWhich);
		else	// stay in contact with lms
			updateBookmark();
		</xsl:text>
        </xsl:if>
        <xsl:text disable-output-escaping="yes">

		// just reported it, clear it out
		nAnswerMissedFirst = 0;
	}
	else
	{
		popupHandle.document.getElementById("Continue").style.display = "none";

		if (!bNewQScored &amp;&amp; 1 == nTry)	// not scored yet and first attempt
			nAnswerMissedFirst = nWhich;
	}
}

function clearAnswers()
{
	var frame;
	frame = questionFrame;
	if (document.all)	// IE
	{
		frame.Answer1.innerHTML = "";
		frame.Answer2.innerHTML = "";
		frame.Answer3.innerHTML = "";
		frame.Answer4.innerHTML = "";
		frame.Answer5.innerHTML = "";
		frame.Answer6.innerHTML = "";
		frame.Answer7.innerHTML = "";
		frame.Answer8.innerHTML = "";

		frame.Answer1.className = "";
		frame.Answer2.className = "";
		frame.Answer3.className = "";
		frame.Answer4.className = "";
		frame.Answer5.className = "";
		frame.Answer6.className = "";
		frame.Answer7.className = "";
		frame.Answer8.className = "";

		for (var i = 0; i &lt; 8; i++)
			arrFeedback[i] = "";
			
		frame.form1.Radio1.checked = false;
		frame.form1.Radio2.checked = false;
		frame.form1.Radio3.checked = false;
		frame.form1.Radio4.checked = false;
		frame.form1.Radio5.checked = false;
		frame.form1.Radio6.checked = false;
		frame.form1.Radio7.checked = false;
		frame.form1.Radio8.checked = false;

		frame.form1.Radio1.style.display = "none";
		frame.form1.Radio2.style.display = "none";
		frame.form1.Radio3.style.display = "none";
		frame.form1.Radio4.style.display = "none";
		frame.form1.Radio5.style.display = "none";
		frame.form1.Radio6.style.display = "none";
		frame.form1.Radio7.style.display = "none";
		frame.form1.Radio8.style.display = "none";
		
		frame.Row1.style.display = "none";
		frame.Row2.style.display = "none";
		frame.Row3.style.display = "none";
		frame.Row4.style.display = "none";
		frame.Row5.style.display = "none";
		frame.Row6.style.display = "none";
		frame.Row7.style.display = "none";
		frame.Row8.style.display = "none";
	}	
	else	// NS 7
	{
		frame.document.getElementById("Answer1").innerHTML = "";
		frame.document.getElementById("Answer2").innerHTML = "";
		frame.document.getElementById("Answer3").innerHTML = "";
		frame.document.getElementById("Answer4").innerHTML = "";
		frame.document.getElementById("Answer5").innerHTML = "";
		frame.document.getElementById("Answer6").innerHTML = "";
		frame.document.getElementById("Answer7").innerHTML = "";
		frame.document.getElementById("Answer8").innerHTML = "";

		frame.document.getElementById("Answer1").className = "";
		frame.document.getElementById("Answer2").className = "";
		frame.document.getElementById("Answer3").className = "";
		frame.document.getElementById("Answer4").className = "";
		frame.document.getElementById("Answer5").className = "";
		frame.document.getElementById("Answer6").className = "";
		frame.document.getElementById("Answer7").className = "";
		frame.document.getElementById("Answer8").className = "";

		for (var i = 0; i &lt; 8; i++)
			arrFeedback[i] = "";
			
		frame.document.getElementById("Radio1").checked = false;
		frame.document.getElementById("Radio2").checked = false;
		frame.document.getElementById("Radio3").checked = false;
		frame.document.getElementById("Radio4").checked = false;
		frame.document.getElementById("Radio5").checked = false;
		frame.document.getElementById("Radio6").checked = false;
		frame.document.getElementById("Radio7").checked = false;
		frame.document.getElementById("Radio8").checked = false;

		frame.document.getElementById("Radio1").style.display = "none";
		frame.document.getElementById("Radio2").style.display = "none";
		frame.document.getElementById("Radio3").style.display = "none";
		frame.document.getElementById("Radio4").style.display = "none";
		frame.document.getElementById("Radio5").style.display = "none";
		frame.document.getElementById("Radio6").style.display = "none";
		frame.document.getElementById("Radio7").style.display = "none";
		frame.document.getElementById("Radio8").style.display = "none";
		
		frame.document.getElementById("Row1").style.display = "none";
		frame.document.getElementById("Row2").style.display = "none";
		frame.document.getElementById("Row3").style.display = "none";
		frame.document.getElementById("Row4").style.display = "none";
		frame.document.getElementById("Row5").style.display = "none";
		frame.document.getElementById("Row6").style.display = "none";
		frame.document.getElementById("Row7").style.display = "none";
		frame.document.getElementById("Row8").style.display = "none";
	}
}

function determineFeedbackToAnswer()
{
}

function determineFeedbackForQuestion()
{
	var feedback = "";
	if (bLastQuestion &amp;&amp; bHasFinalQ &amp;&amp; (nTry == 0))
		feedback = "&lt;div align='center'&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;font size='+1' face='verdana,arial,helvetica' color='#990033'&gt;&lt;b&gt;</xsl:text>
        <xsl:call-template name="BuildLocalizedString">
            <xsl:with-param name="KeyName" select="'Goodjob'"/>
        </xsl:call-template>
        <xsl:text disable-output-escaping="yes">&lt;/b&gt;&lt;/font&gt;&lt;br&gt;&lt;br&gt;&lt;font size='-1' face='verdana,arial,helvetica' color='#990033'&gt;&lt;b&gt;</xsl:text>
        <xsl:call-template name="BuildLocalizedString">
            <xsl:with-param name="KeyName" select="'NowAnswer'"/>
        </xsl:call-template>
        <xsl:text disable-output-escaping="yes">&lt;/b&gt;&lt;/font&gt;&lt;br&gt;&lt;br&gt;&lt;/div&gt;";
	else if ((nTry == 0) &amp;&amp; !bCorrectFirstTryOnThisQuestion)
		feedback = "&lt;div align='center'&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;font size='+1' face='verdana,arial,helvetica' color='#990033'&gt;&lt;b&gt;</xsl:text>
        <xsl:call-template name="BuildLocalizedString">
            <xsl:with-param name="KeyName" select="'AnotherChance'"/>
        </xsl:call-template>
        <xsl:text disable-output-escaping="yes">&lt;/b&gt;&lt;/font&gt;&lt;br&gt;&lt;br&gt;&lt;/div&gt;";
	else
	{
		if (bCorrectFirstTryOnThisQuestion &amp;&amp; curMajor > 1 &amp;&amp; popupHandle.game != "mazeGame" &amp;&amp; popupHandle.game != "ceoGame" &amp;&amp; popupHandle.game != "hopGame"  &amp;&amp; popupHandle.game != "airlineGame")
			feedback = "&lt;div align='center'&gt;&lt;img src='" + fixStaticPath('</xsl:text><xsl:value-of select="$ImagePath"/><xsl:text>SpinnyGuy.gif') + "' align='center' vspace='30'/&gt;&lt;br&gt;&lt;font size='+1' face='verdana,arial,helvetica' color='#990033'&gt;&lt;b&gt;</xsl:text>
        <xsl:call-template name="BuildLocalizedString">
            <xsl:with-param name="KeyName" select="'Goodjob'"/>
        </xsl:call-template>
        <xsl:text disable-output-escaping="yes">&lt;/b&gt;&lt;/font&gt;&lt;/div&gt;";
		else
			feedback = "";
	}

	return feedback;
}

function displayQuestionFeedback()
{
	if (g_bNoFramesInGame)
	{
		popupHandle.document.getElementById("Continue").style.display = "none";

		popupHandle.document.getElementById("Feedback").innerHTML = determineFeedbackForQuestion();
		popupHandle.document.getElementById("Feedback").style.display = "block";
	}
	else
	{
		if (document.all)	// IE
		{
			answerFrame.Continue.style.display = "none";

			answerFrame.Feedback.innerHTML = determineFeedbackForQuestion();
			answerFrame.Feedback.style.display = "block";
		}
		else	// NS 7
		{
			answerFrame.document.getElementById("Continue").style.display = "none";

			answerFrame.document.getElementById("Feedback").innerHTML = determineFeedbackForQuestion();
			answerFrame.document.getElementById("Feedback").style.display = "block";
		}
	}
}

function getRiskyRoll(nTurn)
{
	// determine what to roll on this turn
	var roll;
	switch (nTurn)
	{
		case 1: roll = 7; break;
		case 2: roll = 6; break;
		case 3: roll = 9; break;
		case 4: roll = 5; break;
		case 5: roll = 6; break;
		case 6: roll = 7; break;
		case 7: roll = 12; break;
		case 8: roll = 6; break;
		default: alert("getRiskyRoll - illegal turn " + nTurn); break;
	}
	
	return roll;
}

function getRiskyQuestion(nTurn)
{
	// determine what to question for this turn
	var question;
	switch (nTurn)
	{
		case 1: question = 7; break;
		case 2: question = 5; break;
		case 3: question = 6; break;
		case 4: question = 3; break;
		case 5: question = 1; break;
		case 6: question = 8; break;
		case 7: question = 4; break;
		case 8: question = 2; break;
		default: alert("getRiskyQuestion - illegal turn " + nTurn); break;
	}
	
	return question;
}

function getRiskyFeedback(nTurn)
{
	// determine what to roll on this turn
	var feedback = "";

	if (bCorrectFirstTryOnThisQuestion &amp;&amp; (!bPause &amp;&amp; (curMajor > 1) || bPause &amp;&amp; (curMajor > 0)))
	{
		var prefix = "&lt;div align='center' class='quizFeedback'&gt;";
		var suffix = "&lt;/div&gt;";
		var addSpinny = "&lt;div align='center'&gt;&lt;img vspace='30' src='" + fixStaticPath('</xsl:text><xsl:value-of select="$ImagePath"/><xsl:text disable-output-escaping="yes">SpinnyGuy.gif') + "'/&gt;&lt;/div&gt;";
		switch (nTurn)
		{
			case 2: 
				feedback = prefix + '</xsl:text>
        <xsl:call-template name="BuildLocalizedString">
            <xsl:with-param name="KeyName" select="'Goodjob'"/>
            <xsl:with-param name="usedInJS" select="true()"/>
        </xsl:call-template>
        <xsl:text disable-output-escaping="yes">' + addSpinny + suffix;
				break;
			case 3:
				feedback = prefix + '</xsl:text>
        <xsl:call-template name="BuildLocalizedString">
            <xsl:with-param name="KeyName" select="'GoodWork'"/>
            <xsl:with-param name="usedInJS" select="true()"/>
        </xsl:call-template>
        <xsl:text disable-output-escaping="yes">' + addSpinny + suffix;
				break;
			case 4:
				feedback = prefix + '</xsl:text>
        <xsl:call-template name="BuildLocalizedString">
            <xsl:with-param name="KeyName" select="'VeryGood'"/>
            <xsl:with-param name="usedInJS" select="true()"/>
        </xsl:call-template>
        <xsl:text disable-output-escaping="yes">' + addSpinny + suffix;
				break;
			case 5:
				feedback = prefix + '</xsl:text>
        <xsl:call-template name="BuildLocalizedString">
            <xsl:with-param name="KeyName" select="'Halfway'"/>
            <xsl:with-param name="usedInJS" select="true()"/>
        </xsl:call-template>
        <xsl:text disable-output-escaping="yes">' + addSpinny + suffix;
				break;
			case 6:
				feedback = prefix + '</xsl:text>
        <xsl:call-template name="BuildLocalizedString">
            <xsl:with-param name="KeyName" select="'RollABig'"/>
            <xsl:with-param name="usedInJS" select="true()"/>
        </xsl:call-template>
        <xsl:text disable-output-escaping="yes">' + addSpinny + suffix;
				break;
			case 7:
				feedback = prefix + '</xsl:text>
        <xsl:call-template name="BuildLocalizedString">
            <xsl:with-param name="KeyName" select="'ISaidBig'"/>
            <xsl:with-param name="usedInJS" select="true()"/>
        </xsl:call-template>
        <xsl:text disable-output-escaping="yes">' + addSpinny + suffix;
				break;
			case 8:
				feedback = prefix + '</xsl:text>
        <xsl:call-template name="BuildLocalizedString">
            <xsl:with-param name="KeyName" select="'OneMore'"/>
            <xsl:with-param name="usedInJS" select="true()"/>
        </xsl:call-template>
        <xsl:text disable-output-escaping="yes">' + addSpinny + suffix;
				break;
			case 9:
				feedback = prefix + '</xsl:text>
        <xsl:call-template name="BuildLocalizedString">
            <xsl:with-param name="KeyName" select="'NowAnswer'"/>
            <xsl:with-param name="usedInJS" select="true()"/>
        </xsl:call-template>
        <xsl:text disable-output-escaping="yes">' + suffix;
				break;
		}
	}
		
	return feedback;
}

function getRiskyTile(nTurn)
{
	// determine what to roll on this turn
	var tile;
	switch (nTurn)
	{
		case 1: tile = 2; break;
		case 2: tile = 7; break;
		case 3: tile = 5; break;
		case 4: tile = 6; break;
		case 5: tile = 3; break;
		case 6: tile = 1; break;
		case 7: tile = 8; break;
		case 8: tile = 4; break;
		default: alert("getRiskyTile - illegal turn " + nTurn); break;
	}
	
	return tile;
}

function getRiskyInfo()
{
	var obj = new Object();</xsl:text>
        var arrCategories = new Array();
        <xsl:for-each select="//wc:QuizQuestions">
            <!--		<xsl:if test="wc:QuizQuestions">-->
            <xsl:choose>
                <xsl:when test="ancestor::wc:Chapter">
                    <xsl:text>arrCategories[</xsl:text>
                    <xsl:value-of select="count(preceding::wc:QuizQuestions)"/>
                    <xsl:text>]="</xsl:text>
                    <xsl:call-template name="cleanQuote">
                        <xsl:with-param name="string" select="ancestor::wc:Chapter/wc:Heading"/>
                    </xsl:call-template>
                    <xsl:text>";
			</xsl:text>
                </xsl:when>
                <xsl:otherwise>
                    <!-- Course level question -->
                    <xsl:text>arrCategories[</xsl:text>
                    <xsl:value-of select="count(//wc:QuizQuestions)-1"/>
                    <xsl:text>]="</xsl:text>
                    <xsl:call-template name="cleanQuote">
                        <xsl:with-param name="string" select="$ProgramName"/>
                    </xsl:call-template>
                    <xsl:text>";
			</xsl:text>
                </xsl:otherwise>
            </xsl:choose>
            <!--		</xsl:if>-->
        </xsl:for-each><xsl:text>
	obj["Categories"] = arrCategories;
	obj["GameName"] = "</xsl:text>
        <xsl:for-each select="//wc:Game">
            <xsl:if test="@variety = 'BoardGame'">
                <xsl:value-of select="wc:Name"/>
            </xsl:if>
        </xsl:for-each><xsl:text>";
	obj["CourseName"] = "</xsl:text>
        <xsl:value-of select="$ProgramName"/>
        <xsl:text>";

	return obj;
}

function GetLoadingText()
{
	// set intro text from xsl
	var str;
	str = "</xsl:text>
        <xsl:call-template name="BuildLocalizedString">
            <xsl:with-param name="KeyName" select="'LoadingGame'"/>
            <xsl:with-param name="usedInJS" select="true()"/>
        </xsl:call-template>
        <xsl:text>";

	return str;
}

function GetStartQuizText()
{
	var str;
	str = "</xsl:text>
        <xsl:call-template name="BuildLocalizedString">
            <xsl:with-param name="KeyName" select="'StartQuiz'"/>
            <xsl:with-param name="usedInJS" select="true()"/>
        </xsl:call-template>
        <xsl:text>";

	return str;
}

function GetMazeWelcomeText()
{
	// set intro text from xsl
	</xsl:text>
        <xsl:variable name="tempMazeText">
            <xsl:for-each select="//wc:Game">
                <xsl:if test="@variety = 'CheezChase'">
                    <xsl:for-each select="wc:Introduction">
                        <xsl:apply-templates/>
                    </xsl:for-each>
                </xsl:if>
            </xsl:for-each>
        </xsl:variable>

        <xsl:variable name="welcomeMazeText">
            <xsl:call-template name="undoCleanQuote">
                <xsl:with-param name="string" select="$tempMazeText"/>
            </xsl:call-template>
        </xsl:variable>

        <xsl:text disable-output-escaping="yes">
	return "&lt;div class='mazeIntroduction'&gt;</xsl:text><xsl:call-template name="cleanQuote">
            <xsl:with-param name="string" select="$welcomeMazeText"/>
        </xsl:call-template><xsl:text disable-output-escaping="yes">&lt;/div&gt;";
}

function GetCEOWelcomeText()
{
	// set intro text from xsl
	</xsl:text>
        <xsl:variable name="tempCeoText">
            <xsl:for-each select="//wc:Game">
                <xsl:if test="@variety = 'CEO'">
                    <xsl:for-each select="wc:Introduction">
                        <xsl:apply-templates/>
                    </xsl:for-each>
                </xsl:if>
            </xsl:for-each>
        </xsl:variable>

        <xsl:variable name="welcomeCeoText">
            <xsl:call-template name="undoCleanQuote">
                <xsl:with-param name="string" select="$tempCeoText"/>
            </xsl:call-template>
        </xsl:variable>

        <xsl:text disable-output-escaping="yes">
	return "&lt;div class='ceoIntroduction'&gt;</xsl:text><xsl:call-template name="cleanQuote">
            <xsl:with-param name="string" select="$welcomeCeoText"/>
        </xsl:call-template><xsl:text disable-output-escaping="yes">&lt;/div&gt;";
}

function GetHopWelcomeText()
{
	// set intro text from xsl
	</xsl:text>
        <xsl:variable name="tempHopText">
            <xsl:for-each select="//wc:Game">
                <xsl:if test="@variety = 'HopToTheTop'">
                    <xsl:for-each select="wc:Introduction">
                        <xsl:apply-templates/>
                    </xsl:for-each>
                </xsl:if>
            </xsl:for-each>
        </xsl:variable>

        <xsl:variable name="welcomeHopText">
            <xsl:call-template name="undoCleanQuote">
                <xsl:with-param name="string" select="$tempHopText"/>
            </xsl:call-template>
        </xsl:variable>

        <xsl:text disable-output-escaping="yes">
	return "&lt;div class='hopIntroduction'&gt;</xsl:text><xsl:call-template name="cleanQuote">
            <xsl:with-param name="string" select="$welcomeHopText"/>
        </xsl:call-template><xsl:text disable-output-escaping="yes">&lt;/div&gt;";
}

function GetHopInstructions()
{
	// set instruction text from xsl
	var str;
	str = "&lt;p&gt;&lt;div align='center'&gt;"+
			"&lt;table cellpadding='2' width='480' height='110' border='0' bgcolor='#ffffff'&gt;"+
			"&lt;tr&gt;"+
				"&lt;td align='right' width='40' hspace='2'&gt;"+
					"&lt;img src='hopImages/sprite_r.gif'&gt;"+
				"&lt;/td&gt;"+
				"&lt;td bgcolor='#ffffff' valign='top' align='left' width='430' hspace='2'&gt;"+
					"&lt;font face='arial' size='2'&gt;"+
					"</xsl:text>
        <xsl:call-template name="BuildLocalizedString">
            <xsl:with-param name="KeyName" select="'Thisofficebuilding'"/>
            <xsl:with-param name="usedInJS" select="true()"/>
        </xsl:call-template>
        <xsl:text>"+
					"&lt;/font&gt;"+
				"&lt;/td&gt;"+
			"&lt;/tr&gt;"+
			"&lt;tr&gt;"+
				"&lt;td align='right' width='40' hspace='2'&gt;"+
					"&lt;img src='hopImages/controls_icon.gif'&gt;"+
				"&lt;/td&gt;"+
				"&lt;td bgcolor='#ffffff' valign='top' align='left' width='430' hspace='2'&gt;"+
					"&lt;font face='arial' size='2'&gt;"+
					"</xsl:text>
        <xsl:call-template name="BuildLocalizedString">
            <xsl:with-param name="KeyName" select="'Yourjobistousethesecontrols'"/>
            <xsl:with-param name="usedInJS" select="true()"/>
        </xsl:call-template>
        <xsl:text>"+
					 "&lt;/font&gt;"+
				"&lt;/td&gt;"+
			"&lt;/tr&gt;"+
			"&lt;tr&gt;"+
				"&lt;td align='right' width='40' hspace='2'&gt;"+
					"&lt;img src='hopImages/qmark.gif'&gt;"+
				"&lt;/td&gt;"+
				"&lt;td bgcolor='#ffffff' valign='top' align='left' width='430' hspace='2'&gt;"+
					"&lt;font face='arial' size='2'&gt;"+
					"</xsl:text>
        <xsl:call-template name="BuildLocalizedString">
            <xsl:with-param name="KeyName" select="'Hopuptoanswer'"/>
            <xsl:with-param name="usedInJS" select="true()"/>
        </xsl:call-template>
        <xsl:text>"+
					"&lt;/font&gt;"+
				"&lt;/td&gt;"+
			"&lt;/tr&gt;"+
			"&lt;tr&gt;"+
				"&lt;td align='right' width='40' hspace='2'&gt;"+
					"&lt;img src='hopImages/obstacle_l.gif'&gt;"+
				"&lt;/td&gt;"+
				"&lt;td bgcolor='#ffffff' valign='top' align='left' width='430' hspace='2'&gt;"+
					"&lt;font face='arial' size='2'&gt;"+
					"</xsl:text>
        <xsl:call-template name="BuildLocalizedString">
            <xsl:with-param name="KeyName" select="'Hopoverthese'"/>
            <xsl:with-param name="usedInJS" select="true()"/>
        </xsl:call-template>
        <xsl:text>"+
					"&lt;/font&gt;"+
				"&lt;/td&gt;"+
			"&lt;/tr&gt;"+
			"&lt;tr&gt;"+
				"&lt;td bgcolor='#ffffff' valign='top' align='center' colspan='2' hspace='2'&gt;&lt;font face='arial' size='2'&gt;"+
					"&lt;b&gt;&lt;a href='javascript:startGame()'&gt;"+
<!--					Click here&lt;/a&gt; to start the game!-->
					"</xsl:text>
        <xsl:call-template name="BuildLocalizedString">
            <xsl:with-param name="KeyName" select="'StartQuiz'"/>
            <xsl:with-param name="usedInJS" select="true()"/>
        </xsl:call-template>
        <xsl:text>"+
					"&lt;/a&gt;&lt;/b&gt;&lt;/font&gt;"+
				"&lt;/td&gt;"+
			"&lt;/tr&gt;"+
		"&lt;/table&gt;"+
	"&lt;/div&gt;&lt;/p&gt;";

	return str;
}

function GetHopApprehededText()
{
	// set instruction text from xsl
	var str;
	str = "&lt;table cellpadding='5' width='300' height='115' bgcolor='#ffffff'&gt;"+
			"&lt;tr&gt;&lt;td valign='top' align='center'&gt;"+
				"&lt;img src='hopImages/sprite_r.gif'&gt;"+
				"&lt;img src='hopImages/obstacle_l.gif'&gt;"+
			"&lt;/tr&gt;&lt;tr&gt;&lt;td bgcolor='#ffffff' align='center'&gt;"+
				"&lt;font face='arial' size='1'&gt;&lt;b&gt;"+
<!--				"You have been apprehended by the compliance cop!"+-->
					"</xsl:text>
        <xsl:call-template name="BuildLocalizedString">
            <xsl:with-param name="KeyName" select="'Apprehended'"/>
            <xsl:with-param name="usedInJS" select="true()"/>
        </xsl:call-template>
        <xsl:text>"+
				"&lt;/font&gt;&lt;/td&gt;"+
			"&lt;/tr&gt;&lt;tr&gt;&lt;td bgcolor='#ffffff' align='center'&gt;"+
				"&lt;font face='arial' size='1'&gt;&lt;b&gt;"+
<!--				"Go back to the beginning of the level...-->
					"</xsl:text>
        <xsl:call-template name="BuildLocalizedString">
            <xsl:with-param name="KeyName" select="'Gobacktothebeginning'"/>
            <xsl:with-param name="usedInJS" select="true()"/>
        </xsl:call-template>
        <xsl:text>"+
				"&lt;/font&gt;&lt;/td&gt;"+
			"&lt;/tr&gt;&lt;tr&gt;&lt;td align='center'&gt;"+
				"&lt;font face='arial' size='1'&gt;&lt;b&gt;"+
				"&lt;a href='javascript:after_collision()'&gt;"+
<!--				click here-->
					"</xsl:text>
        <xsl:call-template name="BuildLocalizedString">
            <xsl:with-param name="KeyName" select="'clickhere'"/>
            <xsl:with-param name="usedInJS" select="true()"/>
        </xsl:call-template>
        <xsl:text>"+
				"&lt;/a&gt;&lt;/font&gt;"+
			"&lt;/td&gt;&lt;/tr&gt;"+
		"&lt;/table&gt;";

	return str;
}
							
function displayQuestion(nMajor, nMinor)
{
	var chapter, question;
	if (bLastQuestion &amp;&amp; bHasFinalQ)
	{
		chapter = nMajor;
		question = 1;
	}
	else
	{
		if (popupHandle.game == "boardGame")
			nMajor = getRiskyQuestion(nMajor);	// match risky tile to chapter

		// NOTE: nMajor and nMinor are 1 based while javascript arrays are 0 based!!
		chapter = arrChapters[nMajor-1]["ChapterIndex"] + 1;
		question = arrChapters[nMajor-1]["arrQuestion"][nMinor-1] + 1;
	}

	var qFrame;
	qFrame = questionFrame;
			
	switch (chapter)
	{
</xsl:text>
        <xsl:choose>
            <xsl:when test="$elementPreview">
                case 1:
                {
                switch (question)
                {
                <xsl:for-each select="wc:QuizQuestion">
                    <xsl:call-template name="BuildQuestion"/>
                </xsl:for-each>
                <xsl:for-each select="//wc:FinalQuizQuestion">
                    <xsl:call-template name="BuildFinalQuizQuestion">
                        <xsl:with-param name="QGroup" select="1"/>
                    </xsl:call-template>
                </xsl:for-each>
                default:
                curMinor = 1;	// loop back to the beginning
                displayQuestion(curMajor, curMinor);
                break;
                }
                break;
                }
            </xsl:when>
            <xsl:otherwise>
                <xsl:for-each select="//wc:QuizQuestions">
                    <xsl:call-template name="BuildQuizQuestions">
                        <xsl:with-param name="QGroup" select="count(preceding::wc:QuizQuestions)+1"/>
                    </xsl:call-template>
                </xsl:for-each>
                <xsl:for-each select="//wc:FinalQuizQuestion">
                    <xsl:call-template name="BuildFinalQuizQuestion">
                        <xsl:with-param name="QGroup" select="count(//wc:QuizQuestions)+1"/>
                    </xsl:call-template>
                </xsl:for-each>
            </xsl:otherwise>
        </xsl:choose>
        default:
        alert("No chapter question found! chapter question = " + chapter + ", question = " + question);
        break;
        <xsl:text>
	}
}
</xsl:text>
    </xsl:template>

    <xsl:template name="BuildQuizQuestions">
        <xsl:param name="QGroup"/>

        <xsl:text>
		case </xsl:text>
        <xsl:value-of select="$QGroup"/>
        <xsl:text>:
		{
			switch (question)
			{
		</xsl:text>
        <xsl:for-each select="wc:QuizQuestion">
            <xsl:call-template name="BuildQuestion"/>
        </xsl:for-each>
        <xsl:text>
				default:
					curMinor = 1;	// loop back to the beginning
					displayQuestion(curMajor, curMinor);
					break;
			}
			break;
		}

		</xsl:text>
    </xsl:template>

    <xsl:template name="BuildFinalQuizQuestion">
        <xsl:param name="QGroup"/>

        <xsl:text>
		case </xsl:text>
        <xsl:value-of select="$QGroup"/>
        <xsl:text>:
		{
			var fqText = "</xsl:text>
        <xsl:for-each select="wc:Body">
            <xsl:apply-templates/>
        </xsl:for-each>
        <xsl:text>";

			if (g_bNoFramesInGame)
			{
				clearAnswersNoFrames();

				var theTable = popupHandle.document.getElementById("Table1");
				var newRow = theTable.insertRow(-1);
				var newCell = newRow.insertCell(-1);
				newCell.setAttribute("colSpan", "2");
				newCell.setAttribute("width", "100%");
				newCell.innerHTML = "&lt;div id='divIllustration' /&gt;";

				newRow = theTable.insertRow(-1);
				newCell = newRow.insertCell(-1);
				newCell.setAttribute("colSpan", "2");
				newCell.setAttribute("width", "100%");
				newCell.innerHTML = "&lt;div id='QuestionText' &gt;" + fqText + "&lt;/div&gt;";
				
//				popupHandle.document.getElementById("QuestionText").innerHTML = fqText;
//				popupHandle.scrollTo(0,0);
				popupHandle.bNoSelection = true;
			}
			else
			{
				if (document.all)	// IE
					questionFrame.QuestionText.innerHTML = fqText;
				else	// NS 7
					questionFrame.document.getElementById("QuestionText").innerHTML = fqText;
				
				questionFrame.scrollTo(0,0);
				clearAnswers();
			}
		</xsl:text>
        <xsl:for-each select="wc:Choices/wc:Choice">
            <xsl:call-template name="BuildChoice">
                <xsl:with-param name="FinalQuestion" select="true()"/>
            </xsl:call-template>
        </xsl:for-each>
        <xsl:text>
			break;
		}
		</xsl:text>
    </xsl:template>

    <xsl:template name="BuildQuestion">
        <xsl:text>
				case </xsl:text>
        <xsl:value-of select="position()"/>
        <xsl:text>:
				{
					strCurQuestionID = "</xsl:text>
        <xsl:value-of select="@id"/>
        <xsl:text>";
					var qText = "</xsl:text>
        <xsl:for-each select="wc:Body">
            <xsl:apply-templates/>
        </xsl:for-each>
        <xsl:text disable-output-escaping="yes">";
					
					if (g_bNoFramesInGame)
					{
						clearAnswersNoFrames();

						var theTable = popupHandle.document.getElementById("Table1");
						var newRow = theTable.insertRow(-1);
						var newCell = newRow.insertCell(-1);
						newCell.setAttribute("colSpan", "2");
						newCell.setAttribute("width", "100%");
						newCell.innerHTML = "&lt;div id='divIllustration' /&gt;";

						newRow = theTable.insertRow(-1);
						newCell = newRow.insertCell(-1);
						newCell.setAttribute("colSpan", "2");
						newCell.setAttribute("width", "100%");
						newCell.innerHTML = "&lt;div id='QuestionText' &gt;" + qText + "&lt;/div&gt;";
						
//						popupHandle.document.getElementById("QuestionText").innerHTML = qText;
//						popupHandle.scrollTo(0,0);
						popupHandle.bNoSelection = true;
					}
					else
					{
						if (document.all)	// IE
							questionFrame.QuestionText.innerHTML = qText;
						else	// NS 7
							questionFrame.document.getElementById("QuestionText").innerHTML = qText;

						qFrame.scrollTo(0,0);
						clearAnswers();
						qFrame.bNoSelection = true;
					}
					</xsl:text>
        <xsl:for-each select="wc:Choices/wc:Choice">
            <xsl:call-template name="BuildChoice">
                <xsl:with-param name="FinalQuestion" select="false()"/>
            </xsl:call-template>
        </xsl:for-each>
        <xsl:text>
					break;
				}
	</xsl:text>
    </xsl:template>

    <xsl:template name="BuildChoice">
        <xsl:param name="FinalQuestion"/>
        <xsl:text disable-output-escaping="yes">
					if (g_bNoFramesInGame)
					{
						var theTable = popupHandle.document.getElementById("Table1");
						var newRow = theTable.insertRow(-1);
						var newCell = newRow.insertCell(-1);
						newCell.setAttribute("width", "8px");
						newCell.setAttribute("vAlign", "top");
						newCell.innerHTML = "&lt;input align='right' type='radio' name='r' id='Radio</xsl:text>
        <xsl:value-of select="position()"/>
        <xsl:text>' onClick='pickedAnswer(</xsl:text>
        <xsl:value-of select="position()"/>
        <xsl:text>);' style='display:block' value='Radio</xsl:text>
        <xsl:value-of select="position()"/>
        <xsl:text disable-output-escaping="yes">'&gt;";

						newCell = newRow.insertCell(-1);
						newCell.setAttribute("width", "100%");
						newCell.setAttribute("align", "left");
						newCell.innerHTML = "&lt;div id='Answer</xsl:text>
        <xsl:value-of select="position()"/>
        <xsl:text disable-output-escaping="yes">'&gt;</xsl:text>
        <xsl:for-each select="wc:Body">
            <xsl:apply-templates/>
        </xsl:for-each>
        <xsl:text disable-output-escaping="yes">&lt;/div&gt;";
						
<!--						
						popupHandle.document.getElementById("Answer</xsl:text><xsl:value-of select="position()"/><xsl:text>").innerHTML = "</xsl:text>
							<xsl:for-each select="wc:Body">
								<xsl:apply-templates/>
							</xsl:for-each>
						<xsl:text>";
						popupHandle.document.getElementById("Radio</xsl:text><xsl:value-of select="position()"/><xsl:text>").style.display = "block";
						popupHandle.document.getElementById("Row</xsl:text><xsl:value-of select="position()"/><xsl:text>").style.display = "block";
-->
					}
					else
					{
						if (document.all)	// IE
						{
							qFrame.Answer</xsl:text>
        <xsl:value-of select="position()"/>
        <xsl:text>.innerHTML = "</xsl:text>
        <xsl:for-each select="wc:Body">
            <xsl:apply-templates/>
        </xsl:for-each>
        <xsl:text>";
							qFrame.form1.Radio</xsl:text>
        <xsl:value-of select="position()"/>
        <xsl:text>.style.display = "block";
							qFrame.Row</xsl:text>
        <xsl:value-of select="position()"/>
        <xsl:text>.style.display = "block";
						}
						else	// NS 7
						{
							qFrame.document.getElementById("Answer</xsl:text>
        <xsl:value-of select="position()"/>
        <xsl:text>").innerHTML = "</xsl:text>
        <xsl:for-each select="wc:Body">
            <xsl:apply-templates/>
        </xsl:for-each>
        <xsl:text>";
							qFrame.document.getElementById("Radio</xsl:text>
        <xsl:value-of select="position()"/>
        <xsl:text>").style.display = "block";
							qFrame.document.getElementById("Row</xsl:text>
        <xsl:value-of select="position()"/>
        <xsl:text>").style.display = "block";
						}
					}
										
					arrFeedback[</xsl:text>
        <xsl:value-of select="position()"/>
        <xsl:text>] = "</xsl:text>
        <xsl:if test="not($FinalQuestion)">
            <xsl:text disable-output-escaping="yes">&lt;div align='center' style='margin:10px'&gt;</xsl:text>
        </xsl:if>
        <xsl:choose>
            <xsl:when test="@isCorrect = 'true'">
                <xsl:text disable-output-escaping="yes">&lt;div class='</xsl:text>
                <xsl:choose>
                    <xsl:when test="not($FinalQuestion)">
                        <xsl:text>agreeText</xsl:text>
                    </xsl:when>
                    <xsl:otherwise>
                        <xsl:text>finalAgreeText</xsl:text>
                    </xsl:otherwise>
                </xsl:choose>
                <xsl:text disable-output-escaping="yes">'&gt;</xsl:text>
                <xsl:call-template name="BuildLocalizedString">
                    <xsl:with-param name="KeyName" select="'WeAgree'"/>
                </xsl:call-template>
                <xsl:value-of select="$Space"/>
                <xsl:text disable-output-escaping="yes">&lt;/div&gt;</xsl:text>
            </xsl:when>
            <xsl:when test="$FinalQuestion">
                <xsl:call-template name="BuildLocalizedString">
                    <xsl:with-param name="KeyName" select="'BetterAnswer'"/>
                </xsl:call-template>
                <xsl:value-of select="$Space"/>
            </xsl:when>
            <xsl:otherwise>
                <xsl:text disable-output-escaping="yes">&lt;div class='</xsl:text>
                <xsl:choose>
                    <xsl:when test="not($FinalQuestion)">
                        <xsl:text>disagreeText</xsl:text>
                    </xsl:when>
                    <xsl:otherwise>
                        <xsl:text>finalDisagreeText</xsl:text>
                    </xsl:otherwise>
                </xsl:choose>
                <xsl:text disable-output-escaping="yes">'&gt;</xsl:text>
                <xsl:call-template name="BuildLocalizedString">
                    <xsl:with-param name="KeyName" select="'WeDisagree'"/>
                </xsl:call-template>
                <xsl:value-of select="$Space"/>
                <xsl:text disable-output-escaping="yes">&lt;/div&gt;</xsl:text>
            </xsl:otherwise>
        </xsl:choose>
        <xsl:text disable-output-escaping="yes">&lt;div class='questionFeedback'&gt;</xsl:text>
        <xsl:for-each select="wc:Feedback">
            <xsl:apply-templates/>
        </xsl:for-each>
        <xsl:text disable-output-escaping="yes">&lt;/div&gt;</xsl:text>
        <xsl:if test="@isCorrect = 'false'">
            <xsl:text disable-output-escaping="yes">&lt;div class='tryAgainText'&gt;</xsl:text>
            <xsl:call-template name="BuildLocalizedString">
                <xsl:with-param name="KeyName" select="'Pleasetryagain'"/>
            </xsl:call-template>
            <xsl:text disable-output-escaping="yes">&lt;/div&gt;</xsl:text>
        </xsl:if>
        <xsl:text>";</xsl:text>
        <xsl:if test="@isCorrect = 'true'">
            <xsl:text>
					correctAnswer = </xsl:text>
            <xsl:value-of select="position()"/>
            <xsl:text>;
				</xsl:text>
        </xsl:if>
    </xsl:template>


    <xsl:template name="StartPopQuestionText">
        <xsl:text>
var objPopText;
var strAutoStart = (navigator.userAgent.indexOf("Mac OS X") != -1) ? "true" : "false";
function popQuestion(nChapter, height, width, theEvent)
{
	var url = "</xsl:text>
        <xsl:value-of select="$StaticHtmlPath"/>
        <xsl:text>PopQuestionQuiz.htm";

	// [DR] Changed the following to use the popUp() function
	popChapter = nChapter;

	popUp(url, "", width, height, false);
}

function getPopQuestionText(questionID)
{
	var obj = new Object();
	obj.choices = new Array();
	var nIndex = 0;
	var choice;
	switch (questionID)
	{
			</xsl:text>
    </xsl:template>

    <xsl:template name="EndPopQuestionText">
        <xsl:text>
		default:
			alert("No chapter '" + questionID + "' found");
			break;
	}
	objPopText = obj;
	return obj;
}

var objPopIndex;
function closePopQuestionText()
{
	</xsl:text>
        <xsl:if test="not($elementPreview)">
            <xsl:text>
	if (typeof(objPopIndex) == "object" &amp;&amp; objPopIndex != null)
		NavigateDiv(objPopIndex["curDiv"], objPopIndex["nextDiv"]);
	</xsl:text>
        </xsl:if>
        <xsl:text>

	if (!popupHandle.top.closed)
		popupHandle.top.close();

	objPopText = null;
	urlArgs = null;		// cleanup this popup's arguments
}
			</xsl:text>
    </xsl:template>

    <xsl:template name="StartPopQuestionIndex">
        <xsl:text>
var popChapter;
function getPopQuestionIndex()
{
	var obj = new Object();
	obj.Continue = "</xsl:text>
        <xsl:call-template name="BuildLocalizedString">
            <xsl:with-param name="KeyName" select="'Continue'"/>
        </xsl:call-template>
        <xsl:text>";
	obj.Transcript = "</xsl:text>
        <xsl:call-template name="BuildLocalizedString">
            <xsl:with-param name="KeyName" select="'Transcript'"/>
        </xsl:call-template>
        <xsl:text>";
	obj.Correct = "</xsl:text>
        <xsl:call-template name="BuildLocalizedString">
            <xsl:with-param name="KeyName" select="'WeAgree'"/>
        </xsl:call-template>
        <xsl:text>";
	obj.Incorrect = "</xsl:text>
        <xsl:call-template name="BuildLocalizedString">
            <xsl:with-param name="KeyName" select="'WeDisagree'"/>
        </xsl:call-template>
        <xsl:text>";

	obj.questions = new Array();
	var nIndex = 0;
	switch (popChapter)
	{
			</xsl:text>
    </xsl:template>

    <xsl:template name="AddPreviewPopQuestionIndex">
        <xsl:param name="ChapterPopQuestionNum"/>

        <xsl:for-each select="wc:PopQuestion">
            <xsl:call-template name="CasePopQuestionIndex">
                <xsl:with-param name="ChapterID" select="$ChapterPopQuestionNum"/>
            </xsl:call-template>
        </xsl:for-each>
        <xsl:for-each select="wc:PopQuizQuestion">
            <xsl:call-template name="CasePopQuestionIndex">
                <xsl:with-param name="ChapterID" select="$ChapterPopQuestionNum"/>
            </xsl:call-template>
        </xsl:for-each>
        <xsl:for-each select="wc:PopQuiz">
            <xsl:call-template name="CasePopQuizIndex">
                <xsl:with-param name="ChapterID" select="$ChapterPopQuestionNum"/>
            </xsl:call-template>
        </xsl:for-each>
    </xsl:template>

    <xsl:template name="AddChapterPopQuestionIndex">
        <xsl:param name="ChapterPopQuestionNum"/>

        <xsl:if test="($ChapterPopQuestionNum &gt; 0) and ($ChapterPopQuestionNum &lt;= $ChapterCount)">
            <xsl:for-each select="wc:Chapters/wc:Chapter[$ChapterPopQuestionNum]/wc:PopQuestion">
                <xsl:call-template name="CasePopQuestionIndex">
                    <xsl:with-param name="ChapterID" select="$ChapterPopQuestionNum"/>
                </xsl:call-template>
            </xsl:for-each>
            <xsl:for-each select="wc:Chapters/wc:Chapter[$ChapterPopQuestionNum]/wc:PopQuiz">
                <xsl:call-template name="CasePopQuizIndex">
                    <xsl:with-param name="ChapterID" select="$ChapterPopQuestionNum"/>
                </xsl:call-template>
            </xsl:for-each>


            <xsl:call-template name="AddChapterPopQuestionIndex">
                <xsl:with-param name="ChapterPopQuestionNum" select="$ChapterPopQuestionNum + 1"/>
            </xsl:call-template>
        </xsl:if>
    </xsl:template>

    <xsl:template name="CasePopQuizIndex">
        <xsl:param name="ChapterID"/>

        <xsl:text>
				case "</xsl:text>
        <xsl:value-of select="$ChapterID"/>
        <xsl:text>":
						obj.count = </xsl:text>
        <xsl:value-of select="count(wc:PopQuizQuestions/wc:PopQuizQuestion)"/>
        <xsl:text>;
						obj.width = "</xsl:text>
        <xsl:value-of select="@width"/>
        <xsl:text>";
						obj.height = "</xsl:text>
        <xsl:value-of select="@height"/>
        <xsl:text>";
						obj.Introduction = "</xsl:text>
        <xsl:for-each select="wc:Introduction">
            <xsl:apply-templates/>
        </xsl:for-each>
        <xsl:text>";
						obj.curDiv = </xsl:text>
        <xsl:value-of select="$ChapterID"/>
        <xsl:text>;
						obj.nextDiv = </xsl:text>
        <xsl:value-of select="$ChapterID + 1"/>
        <xsl:text>;
						</xsl:text>
        <xsl:for-each select="wc:LipSync">
            <xsl:text disable-output-escaping="yes">
							var ls = new Object();
							ls.Scene = "</xsl:text>
            <xsl:value-of select="@scene"/>
            <xsl:text>";
							var scenepath = fixStaticPath("</xsl:text>
            <xsl:value-of select="$MediaPath"/>
            <xsl:value-of select="@scene"/>
            <xsl:text>");
							ls.Audio = fixStaticPath("</xsl:text>
            <xsl:value-of select="$MediaPath"/>
            <xsl:value-of select="@audio"/>
            <xsl:text>");
							ls.CuePoints = fixStaticPath("</xsl:text>
            <xsl:value-of select="$MediaPath"/>
            <xsl:value-of select="@cuePoints"/>
            <xsl:text>");
							ls.Transcript = "&lt;span class='lipSyncTranscript'&gt;</xsl:text>
            <xsl:for-each select="wc:Transcript">
                <xsl:apply-templates/>
            </xsl:for-each>
            <xsl:text>&lt;/span&gt;";
      ls.Flash = "&lt;embed src='animation_man.swf' quality='high' bgcolor='#999999' " +
      "width='240' height='156' swLiveConnect='true' id='idFlash' " +
      "name='idFlash' align='middle' allowScriptAccess='sameDomain' " +
      "type='application/x-shockwave-flash' " +
      "pluginspage='http://www.macromedia.com/go/getflashplayer' /&gt;";

							obj.LipSync = ls;
							</xsl:text>
        </xsl:for-each>
        <xsl:for-each select="wc:Video">
            <xsl:text disable-output-escaping="yes">
							var vid = new Object();
							vid.Source = fixStaticPath("</xsl:text>
            <xsl:value-of select="$MediaPath"/>
            <xsl:value-of select="@src"/>
            <xsl:text>");
							vid.Transcript = "&lt;span class='videoTranscript'&gt;</xsl:text>
            <xsl:for-each select="wc:Transcript">
                <xsl:apply-templates/>
            </xsl:for-each>
            <xsl:text>&lt;/span&gt;";
 <!--
      vid.Flash = "&lt;embed src=c quality='high' bgcolor='#999999' " +
      "width='240' height='156' swLiveConnect='true' id='idFlash' " +
      "name='idFlash' align='middle' allowScriptAccess='sameDomain' " +
      "type='application/x-shockwave-flash' " +
      "pluginspage='http://www.macromedia.com/go/getflashplayer' /&gt;";
-->
</xsl:text>
            <xsl:variable name="StreamUrlPop">
                <xsl:value-of select="@stream"/>
            </xsl:variable>
            <xsl:variable name="FlashVarsPop">
                <xsl:choose>
                    <xsl:when test="$StreamUrlPop != ''">
                        <xsl:choose>
                            <xsl:when test="substring($StreamUrlPop, 1, 4) = 'http'">
                                <xsl:text>res=</xsl:text>
                                <xsl:value-of select="$StreamUrlPop"/>
                                <xsl:text disable-output-escaping="yes">&amp;autostart=false&amp;protocol=fvss</xsl:text>
                            </xsl:when>
                            <xsl:when test="substring($StreamUrlPop, 1, 4) = 'rtmp'">
                                <xsl:text>res=</xsl:text>
                                <xsl:value-of select="$StreamUrlPop"/>
                                <xsl:text disable-output-escaping="yes">&amp;autostart=false&amp;protocol=rtmp</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:message terminate="yes">
                                    <xsl:text>ERROR - > Video in PopQuiz '</xsl:text>
                                    <xsl:value-of select="preceding::wc:Chapter/wc:Heading"/>
                                    <xsl:text>' does not contain a valid stream type (</xsl:text>
                                    <xsl:value-of select="$StreamUrlPop"/>
                                    <xsl:text>)!!</xsl:text>
                                </xsl:message>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:when>
                    <xsl:otherwise>
                        <!--	??????	set autostart=true for Mac OS X browsers!!!!! -->
                        <xsl:text>res=" + vid.Source + "</xsl:text>
                        <xsl:text disable-output-escaping="yes">&amp;autostart=" + strAutoStart + "&amp;protocol=http</xsl:text>
                    </xsl:otherwise>
                </xsl:choose>
            </xsl:variable>
            <xsl:text disable-output-escaping="yes">

      vid.Flash = "&lt;OBJECT id='idFlash' " + 
      "codeBase='http://download.macromedia.com/pub/shockwave/cabs/flash/swflash.cab#version=</xsl:text>
            <xsl:value-of select="$MinFlashVersion"/>
            <xsl:text disable-output-escaping="yes">,0,0,0' " + 
      "width='</xsl:text>
            <xsl:value-of select="@width"/>
            <xsl:text>' height='</xsl:text>
            <xsl:value-of select="@height"/>
            <xsl:text>' align='middle' " + 
      "classid='clsid:d27cdb6e-ae6d-11cf-96b8-444553540000'&gt; " +
			"&lt;PARAM NAME='allowScriptAccess' VALUE='sameDomain'&gt; " +
			"&lt;PARAM NAME='movie' VALUE='flvplayer.swf'&gt; " +
			"&lt;PARAM NAME='quality' VALUE='high'&gt; " +
			"&lt;PARAM NAME='bgcolor' VALUE='#999999'&gt; " +
			"&lt;PARAM NAME='Scale' value='exactfit'&gt; " +
			"&lt;PARAM NAME='Menu' value='false'&gt; " +
			"&lt;PARAM NAME='salign' value='l'&gt; " +
			"&lt;PARAM NAME='FlashVars' value='</xsl:text>
            <xsl:value-of select="$FlashVarsPop"/>
            <xsl:text disable-output-escaping="yes">'&gt; " + 
		"&lt;embed name='idFlash' src='flvplayer.swf' quality='high' bgcolor='#999999' " +  
		"width='</xsl:text>
            <xsl:value-of select="@width"/>
            <xsl:text>'  height='</xsl:text>
            <xsl:value-of select="@height"/>
            <xsl:text>' swLiveConnect='true' " +  
		"FlashVars='</xsl:text>
            <xsl:value-of select="$FlashVarsPop"/>
            <xsl:text disable-output-escaping="yes">' " + 
		"Scale='exactfit' Menu='false' salign='1' " + 
		"align='middle' allowScriptAccess='sameDomain' " + 
		"type='application/x-shockwave-flash' " + 
		"pluginspage='http://www.macromedia.com/go/getflashplayer' /&gt; " + 
			"&lt;/OBJECT&gt;";

							obj.Video = vid;
							</xsl:text>
        </xsl:for-each>
        <xsl:for-each select="wc:PopQuizQuestions/wc:PopQuizQuestion">
            <xsl:text>
							obj.questions[nIndex] = "</xsl:text>
            <xsl:value-of select="$ChapterID"/>
            <xsl:text>-</xsl:text>
            <xsl:value-of select="@id"/>
            <xsl:text>";
							nIndex++;
							</xsl:text>
        </xsl:for-each>
        <xsl:text>
					break;</xsl:text>
    </xsl:template>

    <xsl:template name="CasePopQuestionIndex">
        <xsl:param name="ChapterID"/>
        <xsl:text>
				case "</xsl:text>
        <xsl:value-of select="$ChapterID"/>
        <xsl:text>":
						obj.count = 1;
						obj.width = "</xsl:text>
        <xsl:value-of select="@width"/>
        <xsl:text>";
						obj.height = "</xsl:text>
        <xsl:value-of select="@height"/>
        <xsl:text>";
						obj.Introduction = "";
						obj.curDiv = </xsl:text>
        <xsl:value-of select="$ChapterID"/>
        <xsl:text>;
						obj.nextDiv = </xsl:text>
        <xsl:value-of select="$ChapterID + 1"/>
        <xsl:text>;
						obj.questions[nIndex] = "</xsl:text>
        <xsl:value-of select="$ChapterID"/>
        <xsl:text>-</xsl:text>
        <xsl:value-of select="@id"/>
        <xsl:text>";
					break;</xsl:text>
    </xsl:template>

    <xsl:template name="EndPopQuestionIndex">
        <xsl:text>
		default:
			alert("No index chapter '" + popChapter + "' found");
			break;
	}

	objPopIndex = obj;
	return obj;
}</xsl:text>
    </xsl:template>

    <xsl:template name="AddChapterPopQuestion">
        <xsl:param name="ChapterPopQuestionNum"/>

        <xsl:if test="($ChapterPopQuestionNum &gt; 0) and ($ChapterPopQuestionNum &lt;= $ChapterCount)">
            <xsl:for-each select="wc:Chapters/wc:Chapter[$ChapterPopQuestionNum]/wc:PopQuestion">
                <xsl:call-template name="CasePopQuestion">
                    <xsl:with-param name="ChapterID" select="$ChapterPopQuestionNum"/>
                </xsl:call-template>
            </xsl:for-each>
            <xsl:for-each select="wc:Chapters/wc:Chapter[$ChapterPopQuestionNum]/wc:PopQuiz/wc:PopQuizQuestions/wc:PopQuizQuestion">
                <xsl:call-template name="CasePopQuestion">
                    <xsl:with-param name="ChapterID" select="$ChapterPopQuestionNum"/>
                </xsl:call-template>
            </xsl:for-each>

            <xsl:call-template name="AddChapterPopQuestion">
                <xsl:with-param name="ChapterPopQuestionNum" select="$ChapterPopQuestionNum + 1"/>
            </xsl:call-template>
        </xsl:if>
    </xsl:template>

    <xsl:template name="AddPreviewPopQuestion">
        <xsl:param name="ChapterPopQuestionNum"/>

        <xsl:for-each select="wc:PopQuestion">
            <xsl:call-template name="CasePopQuestion">
                <xsl:with-param name="ChapterID" select="$ChapterPopQuestionNum"/>
            </xsl:call-template>
        </xsl:for-each>
        <xsl:for-each select="wc:PopQuizQuestion">
            <xsl:call-template name="CasePopQuestion">
                <xsl:with-param name="ChapterID" select="$ChapterPopQuestionNum"/>
            </xsl:call-template>
        </xsl:for-each>
    </xsl:template>

    <xsl:template name="AddPreviewPopQuizQuestions">
        <xsl:param name="ChapterPopQuestionNum"/>

        <xsl:for-each select="wc:PopQuiz/wc:PopQuizQuestions/wc:PopQuizQuestion">
            <xsl:call-template name="CasePopQuestion">
                <xsl:with-param name="ChapterID" select="$ChapterPopQuestionNum"/>
            </xsl:call-template>
        </xsl:for-each>
    </xsl:template>

    <xsl:template name="CasePopQuestion">
        <xsl:param name="ChapterID"/>
        <xsl:text>
		case '</xsl:text>
        <xsl:value-of select="$ChapterID"/>
        <xsl:text>-</xsl:text>
        <xsl:value-of select="@id"/>
        <xsl:text>':
			obj.body = "</xsl:text>
        <xsl:for-each select="wc:Body">
            <xsl:apply-templates/>
        </xsl:for-each>
        <xsl:text>";</xsl:text>
        <xsl:text>
			obj.illustration = "";</xsl:text>
        <xsl:if test="wc:Illustration">
            <xsl:text disable-output-escaping="yes">
				obj.illustration = "&lt;img src='" + fixStaticPath("</xsl:text>
            <xsl:value-of select="$MediaPath"/>
            <xsl:value-of select="wc:Illustration/@src"/>
            <xsl:text>") + "' width='" + </xsl:text>
            <xsl:value-of select="wc:Illustration/@width"/>
            <xsl:text> + "' height='" + </xsl:text>
            <xsl:value-of select="wc:Illustration/@height"/>
            <xsl:text> + "' ";</xsl:text>
            <xsl:if test="wc:Illustration/wc:AlternateText">
                <xsl:text>
					obj.illustration += "' altText='" + </xsl:text>
                <xsl:value-of select="wc:Illustration/wc:AlternateText"/>
                <xsl:text> + "' ";</xsl:text>
            </xsl:if>
            <xsl:text disable-output-escaping="yes">
				obj.illustration += " /&gt;";
				</xsl:text>
        </xsl:if>
        <xsl:for-each select="wc:Choices/wc:Choice">
            <xsl:text>
				choice = new Object();
				choice["Body"] = "</xsl:text>
            <xsl:for-each select="wc:Body">
                <xsl:apply-templates/>
            </xsl:for-each>
            <xsl:text>";
					choice["FeedbackPreface"] = "</xsl:text>
            <xsl:choose>
                <xsl:when test="@isCorrect = 'true'">
                    <xsl:text disable-output-escaping="yes">&lt;div class='agreeText'&gt;</xsl:text>
                    <xsl:call-template name="BuildLocalizedString">
                        <xsl:with-param name="KeyName" select="'WeAgree'"/>
                    </xsl:call-template>
                    <xsl:value-of select="$Space"/>
                    <xsl:text disable-output-escaping="yes">&lt;/div&gt;</xsl:text>
                </xsl:when>
                <xsl:otherwise>
                    <xsl:text disable-output-escaping="yes">&lt;div class='disagreeText'&gt;</xsl:text>
                    <xsl:call-template name="BuildLocalizedString">
                        <xsl:with-param name="KeyName" select="'WeDisagree'"/>
                    </xsl:call-template>
                    <xsl:value-of select="$Space"/>
                    <xsl:text disable-output-escaping="yes">&lt;/div&gt;</xsl:text>
                </xsl:otherwise>
            </xsl:choose>
            <xsl:text>";
					choice["Feedback"] = "</xsl:text>
            <xsl:for-each select="wc:Feedback">
                <xsl:apply-templates/>
            </xsl:for-each>
            <xsl:text>";

					choice["FeedbackEpilogue"] = "</xsl:text>
            <xsl:if test="@isCorrect = 'false' and ancestor::wc:PopQuizQuestion">
                <xsl:text disable-output-escaping="yes">&lt;div class='tryAgainText'&gt;</xsl:text>
                <xsl:call-template name="BuildLocalizedString">
                    <xsl:with-param name="KeyName" select="'Pleasetryagain'"/>
                </xsl:call-template>
                <xsl:text disable-output-escaping="yes">&lt;/div&gt;</xsl:text>
            </xsl:if>
            <xsl:text>";

				choice["isCorrect"] = "</xsl:text>
            <xsl:value-of select="@isCorrect"/>
            <xsl:text>";
				obj.choices[nIndex] = choice;
				nIndex++;
				</xsl:text>
        </xsl:for-each>
        <xsl:text>
			break;
			</xsl:text>
    </xsl:template>

    <xsl:template name="AddPopQuestionChoice">
    </xsl:template>

    <xsl:template name="StartMatchGame">
        <xsl:text>
var matchChapter;
function popMatchGame(nChapter, height, width, theEvent)
{
	var url = "</xsl:text>
        <xsl:value-of select="$StaticHtmlPath"/>
        <xsl:text>MatchGame.htm";

	// [DR] changed the following to use the popUp() function
	matchChapter = nChapter;

	popUp(url,"",width,height,false);
}

function getMatchGameInfo()
{
	var obj = new Object();
	obj.Text = new Array();
	obj.StartIndex = new Array();
	obj.CorrectIndex = new Array();
	obj.Label = new Array();
	var nProblemCount, tmp, f, n;

	switch (matchChapter)
	{
			</xsl:text>
    </xsl:template>

    <xsl:template name="AddChapterMatchGame">
        <xsl:param name="ChapterMatchGameNum"/>

        <xsl:if test="($ChapterMatchGameNum &gt; 0) and ($ChapterMatchGameNum &lt;= $ChapterCount)">
            <xsl:for-each select="wc:Chapters/wc:Chapter[$ChapterMatchGameNum]/wc:MatchGame">
                <xsl:call-template name="CaseMatchGame">
                    <xsl:with-param name="ChapterID" select="$ChapterMatchGameNum"/>
                </xsl:call-template>
            </xsl:for-each>

            <xsl:call-template name="AddChapterMatchGame">
                <xsl:with-param name="ChapterMatchGameNum" select="$ChapterMatchGameNum + 1"/>
            </xsl:call-template>
        </xsl:if>
    </xsl:template>

    <xsl:template name="AddPreviewMatchGame">
        <xsl:param name="ChapterMatchGameNum"/>

        <xsl:for-each select="wc:MatchGame">
            <xsl:call-template name="CaseMatchGame">
                <xsl:with-param name="ChapterID" select="$ChapterMatchGameNum"/>
            </xsl:call-template>
        </xsl:for-each>
    </xsl:template>

    <xsl:template name="CaseMatchGame">
        <xsl:param name="ChapterID"/>
        <xsl:text>
		case '</xsl:text>
        <xsl:value-of select="$ChapterID"/>
        <xsl:text>-</xsl:text>
        <xsl:value-of select="@id"/>
        <xsl:text>':
			obj.title = "</xsl:text>
        <xsl:value-of select="wc:Heading"/>
        <xsl:text>";
			obj.Introduction = "</xsl:text>
        <xsl:for-each select="wc:Introduction">
            <xsl:apply-templates/>
        </xsl:for-each>
        <xsl:text>";
			obj.Closing = "</xsl:text>
        <xsl:for-each select="wc:Closing">
            <xsl:apply-templates/>
        </xsl:for-each>
        <xsl:text>";
			obj.CloseText = "</xsl:text>
        <xsl:call-template name="BuildLocalizedString">
            <xsl:with-param name="KeyName" select="'ClickContinue'"/>
        </xsl:call-template>
        <xsl:text>";
			</xsl:text>
        <xsl:if test="not($elementPreview)">
            <xsl:text>
			obj["curDiv"] = </xsl:text>
            <xsl:value-of select="$ChapterID"/>
            <xsl:text>;
			obj["nextDiv"] = </xsl:text>
            <xsl:value-of select="$ChapterID + 1"/>
            <xsl:text>;
			</xsl:text>
        </xsl:if>
        <xsl:text>
			
			</xsl:text>
        <xsl:if test="count(wc:Problems/wc:Problem) != 8">
            <xsl:message terminate="yes">
                <xsl:text>ERROR - > MatchGame does not contain 8 problems!</xsl:text>
            </xsl:message>
        </xsl:if>
        <xsl:text>

			nProblemCount = </xsl:text>
        <xsl:value-of select="count(wc:Problems/wc:Problem)"/>
        <xsl:text>;
			for (var i = 0; i &lt; nProblemCount; i++)
			{
				obj.Text[i] = new Object();
				obj.Label[i] = new Object();
				obj.StartIndex[i] = i;
				obj.CorrectIndex[i] = i;
			}
			</xsl:text>
        <xsl:for-each select="wc:Problems/wc:Problem">
            <xsl:call-template name="processBoxes"/>
        </xsl:for-each>

        <xsl:text>
			break;
			</xsl:text>
    </xsl:template>

    <xsl:template name="processBoxes">
        <xsl:text>
		obj.Text[</xsl:text>
        <xsl:value-of select="position()-1"/>
        <xsl:text>] = '</xsl:text>
        <xsl:for-each select="wc:Body">
            <xsl:apply-templates/>
        </xsl:for-each>
        <xsl:text>';
		obj.Label[</xsl:text>
        <xsl:value-of select="position()-1"/>
        <xsl:text>] = '</xsl:text>
        <xsl:for-each select="wc:Section">
            <xsl:apply-templates/>
        </xsl:for-each>
        <xsl:text>';
		</xsl:text>
    </xsl:template>

    <xsl:template name="EndMatchGame">
        <xsl:text>
		default:
			alert("No chapter '" + matchChapter + "' found");
			break;
	}
	
	// now generate the random end positions (so it's different than xml order)
	for (i = 1; i &lt; nProblemCount; i++)
	{
		// Generate a random number in the range [0.0, 1.0)
		f = Math.random();
		// Transform that number in one of {0, 1, 2, ... , i-1}
		n = Math.round(f * (i-1));

		// Permute
		tmp = obj.CorrectIndex[i];
		obj.CorrectIndex[i] = obj.CorrectIndex[n];
		obj.CorrectIndex[n] = tmp;
	}
	
	// now generate the random start positions
	for (i = 1; i &lt; nProblemCount; i++)
	{
		// Generate a random number in the range [0.0, 1.0)
		f = Math.random();
		// Transform that number in one of {0, 1, 2, ... , i-1}
		n = Math.round(f * (i-1));

		// Permute
		tmp = obj.StartIndex[obj.CorrectIndex[i]];
		obj.StartIndex[obj.CorrectIndex[i]] = obj.StartIndex[obj.CorrectIndex[n]];
		obj.StartIndex[obj.CorrectIndex[n]] = tmp;
	}

	return obj;
}
		</xsl:text>
    </xsl:template>

    <!-- End of Game.xslt -->

    <xsl:template name="AddStartTermLink">
        <xsl:param name="TermOrd"/>
        <xsl:if test="$TermOrd = @ordinal">
            <xsl:text> href="javascript:void('</xsl:text>
            <xsl:value-of select="/wc:Course/@id"/>
            <xsl:value-of select="@id"/>
            <xsl:text>')" onmouseover="window.status='</xsl:text>
            <xsl:call-template name="BuildLocalizedString">
                <xsl:with-param name="KeyName" select="'Clickformore'"/>
            </xsl:call-template>
            <xsl:text>'; return true" onClick="popUpTerm('</xsl:text>
            <xsl:value-of select="count(preceding::wc:Chapter) + 1"/>
            <xsl:text>-</xsl:text>
            <xsl:value-of select="$TermOrd"/>
            <xsl:text>',</xsl:text>
            <xsl:value-of select="@height"/>
            <xsl:text>,</xsl:text>
            <xsl:value-of select="@width"/>
            <xsl:text>)"</xsl:text>
        </xsl:if>
    </xsl:template>

    <xsl:template name="BuildElementPreview">
        <xsl:choose>
            <xsl:when test="wc:PopBulletin">
                <script type="text/javascript">
                    <xsl:call-template name="StartBulletinCommon">
                        <xsl:with-param name="coursePreview" select="false"/>
                    </xsl:call-template>

                    <xsl:call-template name="StartBulletinPopup"/>
                    <xsl:call-template name="AddPreviewBulletinPopup">
                        <xsl:with-param name="ChapterBulletinNum" select="1"/>
                    </xsl:call-template>
                    <xsl:call-template name="EndBulletinCommon"/>
                </script>
            </xsl:when>
            <xsl:when test="wc:LinkBulletin">
                <script type="text/javascript">
                    <xsl:call-template name="StartBulletinCommon">
                        <xsl:with-param name="coursePreview" select="false"/>
                    </xsl:call-template>

                    <xsl:call-template name="StartBulletinLink"/>
                    <xsl:call-template name="AddPreviewBulletinLink">
                        <xsl:with-param name="ChapterBulletinNum" select="1"/>
                    </xsl:call-template>
                    <xsl:call-template name="EndBulletinCommon"/>
                </script>
            </xsl:when>
            <xsl:when test="wc:Term">
                <script type="text/javascript">
                    <xsl:call-template name="StartTermPopup"/>
                    <xsl:call-template name="AddPreviewTermPopup">
                        <xsl:with-param name="ChapterTermNum" select="1"/>
                    </xsl:call-template>
                    <xsl:call-template name="EndTermPopup"/>
                </script>
            </xsl:when>

            <xsl:when test="wc:PopQuestion or wc:PopQuizQuestion">
                <script type="text/javascript">
                    <xsl:call-template name="StartPopQuestionIndex"/>
                    <xsl:call-template name="AddPreviewPopQuestionIndex">
                        <xsl:with-param name="ChapterPopQuestionNum" select="1"/>
                    </xsl:call-template>
                    <xsl:call-template name="EndPopQuestionIndex"/>

                    <xsl:call-template name="StartPopQuestionText"/>
                    <xsl:call-template name="AddPreviewPopQuestion">
                        <xsl:with-param name="ChapterPopQuestionNum" select="1"/>
                    </xsl:call-template>
                    <xsl:call-template name="EndPopQuestionText"/>
                </script>
            </xsl:when>

            <xsl:when test="wc:PopQuiz">
                <script type="text/javascript">
                    <xsl:call-template name="StartPopQuestionIndex"/>
                    <xsl:call-template name="AddPreviewPopQuestionIndex">
                        <xsl:with-param name="ChapterPopQuestionNum" select="1"/>
                    </xsl:call-template>
                    <xsl:call-template name="EndPopQuestionIndex"/>

                    <xsl:call-template name="StartPopQuestionText"/>
                    <xsl:call-template name="AddPreviewPopQuizQuestions">
                        <xsl:with-param name="ChapterPopQuestionNum" select="1"/>
                    </xsl:call-template>
                    <xsl:call-template name="EndPopQuestionText"/>
                </script>
            </xsl:when>

            <xsl:when test="wc:MatchGame">
                <script type="text/javascript">
                    <xsl:call-template name="StartMatchGame"/>
                    <xsl:call-template name="AddPreviewMatchGame">
                        <xsl:with-param name="ChapterMatchGameNum" select="1"/>
                    </xsl:call-template>
                    <xsl:call-template name="EndMatchGame"/>
                </script>
            </xsl:when>

            <xsl:when test="wc:QuizQuestion or wc:FinalQuizQuestion">
                <script type="text/javascript">
                    <xsl:call-template name="jsStartGame"/>
                    <xsl:call-template name="jsAddGame">
                        <xsl:with-param name="variety" select="'QuizLite'"/>
                    </xsl:call-template>
                    <xsl:call-template name="jsEndGame"/>
                    <xsl:call-template name="jsPlayGame"/>
                </script>
            </xsl:when>

            <xsl:otherwise>
                <xsl:call-template name="BuildTheChapters"/>
            </xsl:otherwise>
        </xsl:choose>
    </xsl:template>

    <!-- end of Interactive.xslt -->

    <!-- start of Offline.xslt -->

    <xsl:template name="AddOfflineTocProgramTitle">
        <div class="offlineTocProgramName">
            <xsl:value-of select="$ProgramName"/>
        </div>
    </xsl:template>

    <xsl:template name="AddOfflinePrintButton">
        <div class="offlinePrintButton">
            <form id="Form2">
                <xsl:text disable-output-escaping="yes">&lt;a href="javascript:printProgram()"&gt;&lt;img id="printBtn" border="0" src="</xsl:text>
                <xsl:value-of select="$ImagePath"/>
                <xsl:text disable-output-escaping="yes">printer.gif"&gt;&lt;/a&gt;</xsl:text>
            </form>
        </div>
    </xsl:template>


    <xsl:template name="AddOfflineTocChapters">
        <xsl:for-each select="wc:Chapters/wc:Chapter">
            <xsl:call-template name="BuildOfflineOneTocChapterLayout"/>
        </xsl:for-each>
    </xsl:template>

    <xsl:template name="AddOfflineOneTocChapter">
        <a name="{@id}Link"></a>
        <a class="TocLink" href="javascript:void(0)" onclick="gotoElement('div{position()}', 'TOC')">
            <xsl:choose>
                <xsl:when test="wc:Heading">
                    <xsl:value-of select="wc:Heading"/>
                </xsl:when>
                <xsl:otherwise>
                    <xsl:call-template name="BuildLocalizedString">
                        <xsl:with-param name="KeyName" select="'Memorandum'"/>
                    </xsl:call-template>
                </xsl:otherwise>
            </xsl:choose>
        </a>
    </xsl:template>

    <xsl:template name="AddOfflineTocQuiz">
        <a name="{@id}Link"></a>
        <a class="TocLink" href="javascript:void(0)" onclick="StartQuiz('TOC', 'TOC')">
            <xsl:call-template name="BuildLocalizedString">
                <xsl:with-param name="KeyName" select="'StartQuiz'"/>
            </xsl:call-template>
        </a>
    </xsl:template>

    <xsl:template name="BuildTheOfflineChapters">
        <xsl:for-each select="wc:Chapters/wc:Chapter">
            <div id="pageBreak" style="display:none;page-break-before:always"/>
            <DIV id="div{position()}" style="display:none;">
                <xsl:choose>
                    <xsl:when test="@variety = 'Memorandum'">
                        <xsl:call-template name="BuildOfflineMemorandumChapterLayout"/>
                    </xsl:when>
                    <xsl:when test="@variety = 'Wide'">
                        <xsl:call-template name="BuildOfflineWideChapterLayout"/>
                    </xsl:when>
                    <xsl:otherwise>
                        <xsl:call-template name="BuildOfflineStandardChapterLayout"/>

                        <!--
   add "variety" attribute which can be "Standard" or "Raw" (default to
Standard). Standard is the way it is now. Raw means the Discussion should
be translated directly to the HTML, without the chapter heading and
illustration. Raw mode will be used for the first page of the course,
which is usually in "Memorandum" style.
-->
                    </xsl:otherwise>
                </xsl:choose>
                <div style="clear:all;float:right">
                    <input type="button" id="idTOCButton" class="tocButton" value="TOC" onClick="gotoElement('TOC', 'div{position()}')"/>
                </div>
            </DIV>

            <xsl:call-template name="BuildOfflineChapterPopupLayout"/>

        </xsl:for-each>
    </xsl:template>

    <xsl:template name="AddOfflineChapterDividerLayout">
        <xsl:if test="wc:Terms or wc:PopBulletin or wc:LinkBulletins or wc:PopQuestion or wc:PopQuiz">
            <!--  or wc:MatchGame -->
            <DIV style="display:none;">
                <xsl:call-template name="BuildOfflineChapterDividerLayout"/>
            </DIV>
        </xsl:if>
    </xsl:template>

    <xsl:template name="AddOfflineTerms">
        <xsl:for-each select="wc:Terms/wc:Term">
            <xsl:if test="@variety != 'LegalAnnotation'">
                <DIV id="{@id}Def" class="termBody" style="display:none;">
                    <xsl:call-template name="BuildOfflineTermLayout"/>
                </DIV>
            </xsl:if>
        </xsl:for-each>
    </xsl:template>

    <xsl:template name="AddOfflineOneTerm">
        <table cellpadding="2" cellspacing="0" border="0">
            <tr>
                <td valign="top" align="right" style="padding-left:4px">
                    <span class="superScript" style="display:none">
                        <xsl:value-of select="position()"/>
                    </span>
                </td>
                <td valign="top">
                    <xsl:if test="wc:Illustration">
                        <xsl:variable name="AltText">
                            <xsl:if test="wc:Illustration/wc:AlternateText">
                                <xsl:text> alt="</xsl:text>
                                <xsl:value-of select="wc:Illustration/wc:AlternateText"/>
                                <xsl:text>"</xsl:text>
                            </xsl:if>
                        </xsl:variable>
                        <span align="center" id="PageImage" class="termImage">
                            <xsl:text disable-output-escaping="yes">&lt;img src="</xsl:text>
                            <xsl:value-of select="concat($MediaPath, wc:Illustration/@src)"/>
                            <xsl:text>" width="</xsl:text>
                            <xsl:value-of select="wc:Illustration/@width"/>
                            <xsl:text>" height="</xsl:text>
                            <xsl:value-of select="wc:Illustration/@height"/>
                            <xsl:text>" </xsl:text>
                            <xsl:value-of select="$AltText"/>
                            <xsl:text disable-output-escaping="yes"> /&gt;</xsl:text>
                        </span>
                    </xsl:if>
                    <span class="termText">
                        <xsl:apply-templates select="wc:Definition/node()"/>
                    </span>
                </td>
            </tr>
        </table>
        <xsl:call-template name="AddOfflineBackBtn"/>
    </xsl:template>

    <xsl:template name="AddOfflineBulletins">
        <xsl:for-each select="wc:LinkBulletins/wc:LinkBulletin">
            <DIV id="{@id}Def" style="display:none;">
                <xsl:call-template name="BuildOfflineBulletinLayout"/>
            </DIV>
        </xsl:for-each>

        <xsl:for-each select="wc:PopBulletin">
            <DIV id="{@id}Def" style="display:none;">
                <xsl:call-template name="BuildOfflineBulletinLayout"/>
            </DIV>
        </xsl:for-each>
    </xsl:template>

    <xsl:template name="AddOfflineOneBulletinHeader">
        <xsl:text disable-output-escaping="yes">&lt;img class="docLinkImage" title="</xsl:text>
        <xsl:value-of select="wc:Name"/>
        <xsl:text>" src="</xsl:text>
        <xsl:value-of select="$ImagePath"/>
        <xsl:value-of select="@variety"/>
        <xsl:text>.gif"</xsl:text>
        <xsl:text disable-output-escaping="yes"> /&gt;</xsl:text>
        <xsl:value-of select="wc:Name"/>
    </xsl:template>

    <xsl:template name="AddOfflineOneBulletin">
        <xsl:if test="wc:Illustration">
            <xsl:variable name="AltText">
                <xsl:if test="wc:Illustration/wc:AlternateText">
                    <xsl:text> alt="</xsl:text>
                    <xsl:value-of select="wc:Illustration/wc:AlternateText"/>
                    <xsl:text>"</xsl:text>
                </xsl:if>
            </xsl:variable>
            <div align="center" class="bulletinIllustrationImage">
                <xsl:text disable-output-escaping="yes">&lt;img src="</xsl:text>
                <xsl:value-of select="concat($MediaPath, wc:Illustration/@src)"/>
                <xsl:text>" width="</xsl:text>
                <xsl:value-of select="wc:Illustration/@width"/>
                <xsl:text>" height="</xsl:text>
                <xsl:value-of select="wc:Illustration/@height"/>
                <xsl:text>" </xsl:text>
                <xsl:value-of select="$AltText"/>
                <xsl:text disable-output-escaping="yes"> /&gt;</xsl:text>
            </div>
        </xsl:if>
        <xsl:if test="wc:Video">
            <div class="bulletinText">
                <xsl:call-template name="AddOfflineVideoTranscript"/>
            </div>
        </xsl:if>
        <div class="bulletinText">
            <xsl:call-template name="AddOfflineBulletinText"/>
        </div>
        <xsl:choose>
            <xsl:when test="self::wc:LinkBulletin">
                <xsl:call-template name="AddOfflineBackBtn"/>
            </xsl:when>
            <xsl:otherwise>
                <xsl:call-template name="AddOfflineContinueBtn"/>
            </xsl:otherwise>
        </xsl:choose>
    </xsl:template>

    <xsl:template name="AddOfflineBackBtn">
        <div align="center">
            <form>
                <xsl:text disable-output-escaping="yes">&lt;input type="button" id="backButton" value="</xsl:text>
                <xsl:call-template name="BuildLocalizedString">
                    <xsl:with-param name="KeyName" select="'Continue'"/>
                </xsl:call-template>
                <xsl:text disable-output-escaping="yes">" onClick="navBack()" NAME="backButton"&gt;</xsl:text>
            </form>
        </div>
    </xsl:template>

    <xsl:template name="AddOfflineContinueBtn">
        <div align="center">
            <form>
                <xsl:text disable-output-escaping="yes">&lt;input type="button" id="forwardButton" value="</xsl:text>
                <xsl:call-template name="BuildLocalizedString">
                    <xsl:with-param name="KeyName" select="'Continue'"/>
                </xsl:call-template>
                <xsl:text disable-output-escaping="yes">" onClick="navForward()" NAME="forwardButton"&gt;</xsl:text>
            </form>
        </div>
    </xsl:template>

    <xsl:template name="AddOfflineBulletinText">
        <div class="offlineBulletinBodyText">
            <xsl:choose>
                <xsl:when test="wc:URL">
                    <xsl:apply-templates select="wc:URL/node()"/>
                </xsl:when>
                <xsl:when test="wc:Body or wc:Illustration">
                    <xsl:if test="wc:Body">
                        <xsl:apply-templates select="wc:Body/node()"/>
                    </xsl:if>
                </xsl:when>
                <xsl:otherwise>
                    <xsl:message terminate="yes">
                        <xsl:text>ERROR -> Bulletin in Chapter '</xsl:text>
                        <xsl:value-of select="preceding::wc:Chapter/wc:Heading"/>
                        <xsl:text>' does not contain a URL or Body/Illustration!!</xsl:text>
                    </xsl:message>
                </xsl:otherwise>
            </xsl:choose>

        </div>
    </xsl:template>

    <xsl:template name="AddOfflinePopQuestion">
        <xsl:for-each select="wc:PopQuestion">
            <xsl:variable name="curChapter" select="count(preceding::wc:Chapter)+1"/>
            <DIV id="PopQuestionHeader{$curChapter}" style="display:none;">
                <xsl:call-template name="BuildOfflinePopQuestionHeader"/>
            </DIV>
            <DIV id="PopQuestion{$curChapter}" style="display:none;">
                <xsl:call-template name="BuildOfflinePopQuestion"/>
            </DIV>
            <DIV id="PopQuestionAnswer{$curChapter}" style="display:none;">
                <xsl:call-template name="BuildOfflinePopQuestionAnswer"/>
            </DIV>
        </xsl:for-each>
    </xsl:template>

    <xsl:template name="AddOfflinePopQuestionHeader">
        <xsl:call-template name="BuildLocalizedString">
            <xsl:with-param name="KeyName" select="'PopQuiz'"/>
        </xsl:call-template>
    </xsl:template>

    <xsl:template name="AddOfflineOnePopQuestion">
        <xsl:call-template name="AddOfflineQuestion">
            <xsl:with-param name="QuestionDiv" select="concat('PopQuestion', count(preceding::wc:Chapter)+1)"/>
            <xsl:with-param name="AnswerDiv" select="concat('PopQuestionAnswer', count(preceding::wc:Chapter)+1)"/>
        </xsl:call-template>
    </xsl:template>

    <xsl:template name="AddOfflineOnePopQuestionAnswer">
        <xsl:call-template name="AddOfflineQuestionAnswer">
            <xsl:with-param name="QuestionType" select="'PopQuestion'"/>
        </xsl:call-template>
    </xsl:template>

    <xsl:template name="AddOfflinePopQuiz">
        <xsl:if test="wc:PopQuiz/wc:PopQuizQuestions">
            <xsl:for-each select="wc:PopQuiz">
                <xsl:variable name="curChapter" select="count(preceding::wc:Chapter)+1"/>
                <DIV id="PopQuizHeader{$curChapter}" style="display:none;">
                    <xsl:call-template name="BuildOfflinePopQuizHeader"/>
                </DIV>
                <DIV id="PopQuizChapter{$curChapter}" style="display:none;">
                    <xsl:if test="wc:Introduction">
                        <xsl:call-template name="BuildOfflinePopQuizIntro"/>
                    </xsl:if>
                    <xsl:if test="wc:Video">
                        <div class="offlinePopQuizIntroLayout">
                            <div class="offlinePopQuizIntroText">
                                <xsl:call-template name="AddOfflineVideoTranscript"/>
                            </div>
                        </div>
                    </xsl:if>
                </DIV>
                <xsl:for-each select="wc:PopQuizQuestions/wc:PopQuizQuestion">
                    <DIV id="PopQuizQuestion{$curChapter}-{position()}" style="display:none;">
                        <xsl:call-template name="BuildOfflinePopQuizQuestion"/>
                    </DIV>
                    <DIV id="PopQuizQuestionAnswer{$curChapter}-{position()}" style="display:none;">
                        <xsl:call-template name="BuildOfflinePopQuizQuestionAnswer"/>
                    </DIV>
                </xsl:for-each>
            </xsl:for-each>
        </xsl:if>
    </xsl:template>

    <xsl:template name="AddOfflinePopQuizHeader">
        <xsl:call-template name="BuildLocalizedString">
            <xsl:with-param name="KeyName" select="'PopQuiz'"/>
        </xsl:call-template>
    </xsl:template>

    <xsl:template name="AddOfflinePopQuizIntro">
        <xsl:apply-templates select="wc:Introduction/node()"/>
    </xsl:template>

    <xsl:template name="AddOfflineOnePopQuizQuestion">
        <xsl:call-template name="AddOfflineQuestion">
            <xsl:with-param name="QuestionDiv" select="concat('PopQuizQuestion', count(preceding::wc:Chapter)+1, '-', position())"/>
            <xsl:with-param name="AnswerDiv" select="concat('PopQuizQuestionAnswer', count(preceding::wc:Chapter)+1, '-', position())"/>
        </xsl:call-template>
    </xsl:template>

    <xsl:template name="AddOfflineOnePopQuizQuestionAnswer">
        <xsl:call-template name="AddOfflineQuestionAnswer">
            <xsl:with-param name="QuestionType" select="'PopQuiz'"/>
        </xsl:call-template>
    </xsl:template>

    <xsl:template name="AddOfflineMatchGame">
        <xsl:for-each select="wc:MatchGame">
        </xsl:for-each>
    </xsl:template>

    <xsl:template name="AddOfflineQuiz">
        <xsl:for-each select="//wc:QuizQuestions">
            <xsl:variable name="curChapter" select="count(preceding::wc:Chapter)+1"/>
            <DIV id="QuizHeader{$curChapter}" style="display:none;">
                <xsl:call-template name="BuildOfflineQuizHeader"/>
            </DIV>
            <xsl:for-each select="wc:QuizQuestion">
                <DIV id="QuizQuestion{$curChapter}-{position()}" style="display:none;">
                    <xsl:call-template name="BuildOfflineQuizQuestion"/>
                </DIV>
                <DIV id="QuizQuestionAnswer{$curChapter}-{position()}" style="display:none;">
                    <xsl:call-template name="BuildOfflineQuizQuestionAnswer"/>
                </DIV>
            </xsl:for-each>
        </xsl:for-each>
        <xsl:for-each select="wc:FinalQuizQuestion">
            <DIV id="QuizHeader0" style="display:none;">
                <xsl:call-template name="BuildOfflineQuizHeader"/>
            </DIV>
            <DIV id="QuizQuestion0-{position()}" style="display:none;">
                <xsl:call-template name="BuildOfflineFinalQuizQuestion"/>
            </DIV>
            <DIV id="QuizQuestionAnswer0-{position()}" style="display:none;">
                <xsl:call-template name="BuildOfflineFinalQuizQuestionAnswer"/>
            </DIV>
        </xsl:for-each>
    </xsl:template>

    <xsl:template name="AddOfflineQuizHeader">
        <xsl:variable name="curChapterName" select="ancestor::wc:Chapter/wc:Heading"/>
        <xsl:choose>
            <xsl:when test="$curChapterName">
                <xsl:value-of select="$curChapterName"/>
            </xsl:when>
            <xsl:when test="self::wc:FinalQuizQuestion">
                <hr class="offlineChapterDividerText"/>
            </xsl:when>
            <xsl:otherwise>
                <xsl:text>Chapter </xsl:text>
                <xsl:value-of select="count(preceding::wc:Chapter)+1"/>
            </xsl:otherwise>
        </xsl:choose>
    </xsl:template>

    <xsl:template name="AddOfflineOneQuizQuestion">
        <xsl:call-template name="AddOfflineQuestion">
            <xsl:with-param name="QuestionDiv" select="concat('QuizQuestion', count(preceding::wc:Chapter)+1, '-', position())"/>
            <xsl:with-param name="AnswerDiv" select="concat('QuizQuestionAnswer', count(preceding::wc:Chapter)+1, '-', position())"/>
        </xsl:call-template>
    </xsl:template>

    <xsl:template name="AddOfflineOneQuizQuestionAnswer">
        <xsl:call-template name="AddOfflineQuestionAnswer">
            <xsl:with-param name="QuestionType" select="'Quiz'"/>
        </xsl:call-template>
    </xsl:template>

    <xsl:template name="AddOfflineFinalQuizQuestion">
        <xsl:call-template name="AddOfflineQuestion">
            <xsl:with-param name="QuestionDiv" select="concat('QuizQuestion0', '-', position())"/>
            <xsl:with-param name="AnswerDiv" select="concat('QuizQuestionAnswer0', '-', position())"/>
        </xsl:call-template>
    </xsl:template>

    <xsl:template name="AddOfflineFinalQuizQuestionAnswer">
        <xsl:call-template name="AddOfflineQuestionAnswer">
            <xsl:with-param name="QuestionType" select="'Quiz'"/>
        </xsl:call-template>
    </xsl:template>

    <xsl:template name="AddOfflineQuestion">
        <xsl:param name="QuestionDiv"/>
        <xsl:param name="AnswerDiv"/>
        <div id="{@id}Def" style="display:block">
            <form>
                <table border="0" cellpadding="2">
                    <xsl:if test="wc:Illustration">
                        <xsl:variable name="AltText">
                            <xsl:if test="wc:Illustration/wc:AlternateText">
                                <xsl:text> alt="</xsl:text>
                                <xsl:value-of select="wc:Illustration/wc:AlternateText"/>
                                <xsl:text>"</xsl:text>
                            </xsl:if>
                        </xsl:variable>
                        <tr>
                            <td colspan="2">
                                <div class="offlineQuestionIllustration" id="divIllustration" align="center">
                                    <xsl:text disable-output-escaping="yes">&lt;img src="</xsl:text>
                                    <xsl:value-of select="concat($MediaPath, wc:Illustration/@src)"/>
                                    <xsl:text>" width="</xsl:text>
                                    <xsl:value-of select="wc:Illustration/@width"/>
                                    <xsl:text>" height="</xsl:text>
                                    <xsl:value-of select="wc:Illustration/@height"/>
                                    <xsl:text>" </xsl:text>
                                    <xsl:value-of select="$AltText"/>
                                    <xsl:text disable-output-escaping="yes"> /&gt;</xsl:text>
                                </div>
                            </td>
                        </tr>
                    </xsl:if>
                    <tr>
                        <td colspan="2">
                            <div class="offlineQuestionQuestion" id="QuestionText">
                                <xsl:if test="starts-with($QuestionDiv, 'QuizQuestion') and not(starts-with($QuestionDiv, 'QuizQuestion0'))">
                                    <span class="offineQuestionPreface">
                                        <xsl:value-of select="count(preceding::wc:Chapter)+1"/>
                                        <xsl:text>.</xsl:text>
                                        <xsl:value-of select="position()"/>
                                        <xsl:value-of select="$Space"/>
                                    </span>
                                </xsl:if>
                                <xsl:apply-templates select="wc:Body/node()"/>
                            </div>
                        </td>
                    </tr>
                    <xsl:for-each select="wc:Choices/wc:Choice">
                        <tr>
                            <td width="8" valign="top">
                                <input align="right" type="radio" name="r" id="Radio{position()}" onClick="pickedAnswer('{$QuestionDiv}', '{$AnswerDiv}');" VALUE="Radio{position()}"/>
                            </td>
                            <td width="95%" align="left">
                                <div>
                                    <xsl:value-of select="position()"/>
                                    <xsl:text>. </xsl:text>
                                    <xsl:apply-templates select="wc:Body/node()"/>
                                </div>
                            </td>
                        </tr>
                    </xsl:for-each>
                </table>
            </form>
        </div>
    </xsl:template>

    <xsl:template name="AddOfflineQuestionAnswer">
        <xsl:param name="QuestionType"/>
        <div id="{@id}Def" style="display:block">
            <div id="answerDiv">
                <div id="innerdiv">
                    <xsl:for-each select="wc:Choices/wc:Choice">
                        <xsl:choose>
                            <xsl:when test="@isCorrect = 'true'">
                                <div class="offlineCorrectAnswer">
                                    <xsl:value-of select="position()"/>
                                    <xsl:text>. </xsl:text>
                                    <xsl:call-template name="BuildLocalizedString">
                                        <xsl:with-param name="KeyName" select="'WeAgree'"/>
                                    </xsl:call-template>
                                </div>
                            </xsl:when>
                            <xsl:otherwise>
                                <div class="offlineIncorrectAnswer">
                                    <xsl:value-of select="position()"/>
                                    <xsl:text>. </xsl:text>
                                    <xsl:call-template name="BuildLocalizedString">
                                        <xsl:with-param name="KeyName" select="'WeDisagree'"/>
                                    </xsl:call-template>
                                </div>
                            </xsl:otherwise>
                        </xsl:choose>
                        <div class="offlineAnswerText">
                            <xsl:apply-templates select="wc:Feedback/node()"/>
                        </div>
                    </xsl:for-each>
                    <div class="offlineAnswerContinue" align="center" id="Continue">
                        <input type="button" id="continueBtn" class="continueButton" value="Continue" onClick="questionContinue('{$QuestionType}')" NAME="continueBtn"/>
                    </div>
                </div>
            </div>
        </div>
    </xsl:template>

    <xsl:template name="AddOfflineVideoTranscript">
        <xsl:for-each select="wc:Video">
            <xsl:for-each select="wc:Transcript">
                <xsl:text disable-output-escaping="yes">&lt;br/&gt;</xsl:text>
                <xsl:call-template name="BuildLocalizedString">
                    <xsl:with-param name="KeyName" select="'VideoTranscript'"/>
                </xsl:call-template>
                <xsl:text disable-output-escaping="yes">:&lt;br/&gt;</xsl:text>
                <xsl:apply-templates/>
            </xsl:for-each>
        </xsl:for-each>
    </xsl:template>

    <xsl:template name="BuildOfflineScript">

        <script type="text/javascript">
            <xsl:call-template name="AddOfflineInit"/>
        </script>

        <script type="text/javascript">
            <xsl:call-template name="AddWindowJS"/>
        </script>

        <script type="text/javascript">
            <xsl:call-template name="jsDivNav"/>
        </script>
    </xsl:template>

    <xsl:template name="BuildOfflineNavigation">
        <xsl:param name="Paginate"/>
        <xsl:param name="PageLabel" select="string(position())"/>
        <!-- this is text -->
        <xsl:param name="ChapterNum" select="position()"/>
        <!-- this is a number -->
        <xsl:if test="$Paginate">
            <table border="0" class="chapterNavigationText">
                <tr>
                    <td align="right">
                        <!-- use a div here as a placeholder when not displayed (i.e. page 1) -->
                        <xsl:text disable-output-escaping="yes">&lt;div</xsl:text>
                        <xsl:if test="$PageLabel = 1">
                            <xsl:text> style="visibility:hidden"</xsl:text>
                        </xsl:if>
                        <xsl:text disable-output-escaping="yes">&gt;</xsl:text>
                        <a href="javascript:void(0)">
                            <xsl:text disable-output-escaping="yes">&lt;img class="navigationImg" src="</xsl:text>
                            <xsl:value-of select="$ImagePath"/>
                            <xsl:text>previous.gif" border="0" alt="</xsl:text>
                            <xsl:call-template name="BuildLocalizedString">
                                <xsl:with-param name="KeyName" select="'PreviousPage'"/>
                            </xsl:call-template>
                            <xsl:text disable-output-escaping="yes">" onClick="NavigateDiv(</xsl:text>
                            <xsl:value-of select="$PageLabel"/>
                            <xsl:text>, </xsl:text>
                            <xsl:value-of select="$PageLabel - 1"/>
                            <xsl:text disable-output-escaping="yes">)"/&gt;</xsl:text>
                        </a>
                        <xsl:text disable-output-escaping="yes">&lt;/div&gt;</xsl:text>
                    </td>
                    <td valign="middle" align="center">
                        <xsl:call-template name="BuildLocalizedString">
                            <xsl:with-param name="KeyName" select="'PageOf'"/>
                            <xsl:with-param name="Parm1" select="$PageLabel"/>
                            <xsl:with-param name="Parm2" select="$DivCount"/>
                        </xsl:call-template>
                    </td>
                    <td align="left">
                        <xsl:choose>
                            <xsl:when test="$PageLabel &lt;= $DivCount">
                                <xsl:choose>
                                    <xsl:when test="wc:PopBulletin">
                                        <a href="javascript:void(0)">
                                            <xsl:text disable-output-escaping="yes">&lt;img class="navigationImg" src="</xsl:text>
                                            <xsl:value-of select="$ImagePath"/>
                                            <xsl:text>next.gif" border="0" alt="</xsl:text>
                                            <xsl:call-template name="BuildLocalizedString">
                                                <xsl:with-param name="KeyName" select="'NextPage'"/>
                                            </xsl:call-template>
                                            <xsl:text disable-output-escaping="yes">" onClick="setForward('div</xsl:text>
                                            <xsl:value-of select="$PageLabel + 1"/>
                                            <xsl:text>');gotoElement('</xsl:text>
                                            <xsl:value-of select="wc:PopBulletin/@id"/>
                                            <xsl:text>Def', 'div</xsl:text>
                                            <xsl:value-of select="$PageLabel"/>
                                            <xsl:text disable-output-escaping="yes">');"/&gt;</xsl:text>
                                        </a>
                                    </xsl:when>
                                    <xsl:when test="wc:PopQuestion">
                                        <a href="javascript:void(0)">
                                            <xsl:text disable-output-escaping="yes">&lt;img class="navigationImg" src="</xsl:text>
                                            <xsl:value-of select="$ImagePath"/>
                                            <xsl:text>next.gif" border="0" alt="</xsl:text>
                                            <xsl:call-template name="BuildLocalizedString">
                                                <xsl:with-param name="KeyName" select="'NextPage'"/>
                                            </xsl:call-template>
                                            <xsl:text>" onClick="setForward('div</xsl:text>
                                            <xsl:value-of select="$PageLabel + 1"/>
                                            <xsl:text>');setQuestionChapter('</xsl:text>
                                            <xsl:value-of select="$PageLabel"/>
                                            <xsl:text disable-output-escaping="yes">');show('PopQuestionHeader</xsl:text>
                                            <xsl:value-of select="$PageLabel"/>
                                            <xsl:text>');gotoElement('PopQuestion</xsl:text>
                                            <xsl:value-of select="$PageLabel"/>
                                            <xsl:text>', 'div</xsl:text>
                                            <xsl:value-of select="$PageLabel"/>
                                            <xsl:text disable-output-escaping="yes">');"/&gt;</xsl:text>
                                        </a>
                                    </xsl:when>
                                    <xsl:when test="wc:PopQuiz and wc:PopQuiz/wc:PopQuizQuestions">
                                        <a href="javascript:void(0)">
                                            <xsl:text disable-output-escaping="yes">&lt;img class="navigationImg" src="</xsl:text>
                                            <xsl:value-of select="$ImagePath"/>
                                            <xsl:text>next.gif" border="0" alt="</xsl:text>
                                            <xsl:call-template name="BuildLocalizedString">
                                                <xsl:with-param name="KeyName" select="'NextPage'"/>
                                            </xsl:call-template>
                                            <xsl:text>" onClick="setForward('div</xsl:text>
                                            <xsl:value-of select="$PageLabel + 1"/>
                                            <xsl:text>');setQuestionChapter('</xsl:text>
                                            <xsl:value-of select="$PageLabel"/>
                                            <xsl:text disable-output-escaping="yes">');presentNextQuestion('PopQuiz');"/&gt;</xsl:text>
                                        </a>
                                    </xsl:when>
                                    <!-- 					<xsl:when test="wc:MatchGame">
											<a href="javascript:void(0)">
											<xsl:text disable-output-escaping="yes">&lt;img class="navigationImg" src="</xsl:text><xsl:value-of select="$ImagePath"/><xsl:text>next.gif" border="0" alt="</xsl:text>
												<xsl:call-template name="BuildLocalizedString">
													<xsl:with-param name="KeyName" select="'NextPage'"/>
												</xsl:call-template>
											<xsl:text>" onClick="setForward('div</xsl:text><xsl:value-of select="$PageLabel + 1"/><xsl:text>');gotoElement('</xsl:text><xsl:value-of select="wc:MatchGame/@id"/><xsl:text>Def', 'div</xsl:text><xsl:value-of select="$PageLabel"/><xsl:text disable-output-escaping="yes">');"/&gt;</xsl:text>
											</a>
										</xsl:when> -->
                                    <xsl:otherwise>
                                        <!-- use a div here as a placeholder when not displayed (i.e. page 1) -->
                                        <!-- <xsl:text disable-output-escaping="yes">&lt;div</xsl:text><xsl:if test="$PageLabel = $DivCount"><xsl:text> style="visibility:hidden"</xsl:text></xsl:if><xsl:text disable-output-escaping="yes">&gt;</xsl:text>-->
                                        <xsl:text disable-output-escaping="yes">&lt;div</xsl:text>
                                        <xsl:text disable-output-escaping="yes">&gt;</xsl:text>
                                        <a href="javascript:void(0)">
                                            <xsl:text disable-output-escaping="yes">&lt;img class="navigationImg" src="</xsl:text>
                                            <xsl:value-of select="$ImagePath"/>
                                            <xsl:text>next.gif" border="0" alt="</xsl:text>
                                            <xsl:call-template name="BuildLocalizedString">
                                                <xsl:with-param name="KeyName" select="'NextPage'"/>
                                            </xsl:call-template>
                                            <xsl:text disable-output-escaping="yes">" onClick="</xsl:text>
                                            <xsl:choose>
                                                <xsl:when test="$ChapterNum &lt; $ChapterCount">
                                                    <xsl:text>NavigateDiv(</xsl:text>
                                                    <xsl:value-of select="$PageLabel"/>
                                                    <xsl:text>, </xsl:text>
                                                    <xsl:value-of select="$PageLabel + 1"/>
                                                    <xsl:text>);</xsl:text>
                                                </xsl:when>
                                                <xsl:otherwise>
                                                    <xsl:text>StartQuiz('div</xsl:text>
                                                    <xsl:value-of select="$PageLabel"/>
                                                    <xsl:text>', null)</xsl:text>
                                                </xsl:otherwise>
                                            </xsl:choose>
                                            <xsl:text disable-output-escaping="yes">"/&gt;</xsl:text>
                                        </a>
                                        <xsl:text disable-output-escaping="yes">&lt;/div&gt;</xsl:text>
                                    </xsl:otherwise>
                                </xsl:choose>
                            </xsl:when>
                            <xsl:otherwise>
                            </xsl:otherwise>
                        </xsl:choose>
                    </td>
                </tr>
            </table>
        </xsl:if>
    </xsl:template>

    <xsl:template name="AddOfflineInit">
        var objInfo;
        var curElem, returnElem, forwardElem, curQuestion, questionChapter, bPrinting = false;
        var arrQuiz = null, quizIndex = 0;
        function doFlashCheck()
        {
        init();
        }
        function init()
        {
        bPrinting = false;
        runtimeSub(window);
        curElem = document.getElementById("TOC");
        arrQuiz = new Array();
        var coll = document.getElementsByTagName("DIV");
        if (coll != null &amp;&amp; typeof(coll.length) != "undefined")
        {
        var quizNum = 0;
        for (var divNum = 0; divNum &lt; coll.length; divNum++)
        {
        if (coll.item(divNum).id.substring(0, 12) == "QuizQuestion")
        {
        var chapter = parseInt(coll.item(divNum).id.substring(12, coll.item(divNum).id.length));
        if (!isNaN(chapter))
        {
        arrQuiz[quizNum] = coll.item(divNum).id;
        quizNum++
        }
        }
        }
        }
        }
        function gotoElement(to, from)
        {
        if (bPrinting)
        return false;

        returnElem = document.getElementById(from);
        if (typeof(returnElem) == "object" &amp;&amp; returnElem != null)
        returnElem.style.display = "none";
        curElem = document.getElementById(to);
        if (typeof(curElem) == "object" &amp;&amp; curElem != null)
        curElem.style.display = "block";
        }
        function StartQuiz(from, to)
        {
        forwardElem = document.getElementById(to);
        fromElem = document.getElementById(from);
        if (typeof(fromElem) == "object" &amp;&amp; fromElem != null)
        fromElem.style.display = "none";
        quizIndex = 0;
        var chapter = parseInt(arrQuiz[quizIndex].substring(12, arrQuiz[quizIndex].length));
        setQuestionChapter(chapter);
        presentNextQuestion("Quiz");
        }
        function setQuestionChapter(chap)
        {
        curQuestion = 0;
        questionChapter = chap;
        }
        function presentNextQuestion(quizName)
        {
        if (bPrinting)
        return false;

        var bUseIntro = false;

        if (quizName == "PopQuestion")
        alert("Shouldn't be here!!");
        else if (quizName == "PopQuiz")
        bUseIntro = true;

        // save where we're coming from
        curElem = document.getElementById("div" + questionChapter);
        var headerElem = document.getElementById(quizName + "Header" + questionChapter);
        var questionBase = quizName + "Question" + questionChapter + "-";
        var answerBase = quizName + "QuestionAnswer" + questionChapter + "-";

        // first hide element - either question just asked or if first time div just shown
        if (curQuestion > 0)
        {
        var oldQuestionElem = document.getElementById(questionBase + curQuestion);
        var oldAnswerElem = document.getElementById(answerBase + curQuestion);
        oldQuestionElem.style.display = "none";
        oldAnswerElem.style.display = "none";
        }
        else
        curElem.style.display = "none";

        // set up for next question
        curQuestion++;

        var introElem = null;
        if (bUseIntro)
        {
        introElem = document.getElementById(quizName + "Chapter" + questionChapter);
        if (typeof(introElem) != "object" || introElem == null)
        {
        alert("no intro for " + quizName + " found!");
        return false;	// error!
        }
        }

        var questionElem = document.getElementById(questionBase + curQuestion);
        if (typeof(questionElem) != "object" || questionElem == null)
        {
        // ok, ran out of questions
        if (bUseIntro)
        introElem.style.display = "none";

        headerElem.style.display = "none";

        return false;
        }

        // first time, show header
        if (curQuestion == 1)
        {
        if (typeof(headerElem) == "object" &amp;&amp; headerElem != null)
        headerElem.style.display = "block";

        if (bUseIntro)
        introElem.style.display = "block";
        }

        // and finally show question
        questionElem.style.display = "block";

        return true;
        }
        function questionContinue(type)
        {
        if (type == "PopQuestion")
        {
        hide(type + "Header" + questionChapter);
        hide(type + questionChapter);
        hide(type + "Answer" + questionChapter);
        navForward();
        }
        else if (type == "PopQuiz")
        {
        var ok = presentNextQuestion(type);
        if (!ok)
        navForward();
        }
        else
        {
        var ok = presentNextQuestion(type);
        if (!ok)
        {
        var chapter = 0;
        quizIndex++;
        while (quizIndex &lt; arrQuiz.length)
        {
        // keep going til next chapter...
        quizIndex++;
        chapter = parseInt(arrQuiz[quizIndex].substring(12, arrQuiz[quizIndex].length));
        if (chapter &gt; questionChapter || chapter == 0)	// 0 is FinalQuestion
        {
        setQuestionChapter(chapter);
        presentNextQuestion(type);
        break;
        }
        }
        if (quizIndex &gt;= arrQuiz.length)
        {
        // all done
        if (forwardElem == null)
        window.close();
        else
        navForward();
        }
        }
        }

        // clear all radio buttons
        var coll = document.getElementsByName("r");
        if (coll != null)
        {
        if (typeof(coll.length) != "undefined")
        {
        for (i = 0; i &lt; coll.length; i++)
        coll.item(i).checked = "";
        }
        else
        alert("oops unchecking radio");
        }
        }
        function setForward(forward)
        {
        forwardElem = document.getElementById(forward);
        }
        function navForward()
        {
        if (bPrinting)
        return false;

        if (typeof(forwardElem) == "object" &amp;&amp; forwardElem != null)
        {
        // hide curElem first in case they are both the same...
        curElem.style.display = "none";
        forwardElem.style.display = "block";
        curElem = forwardElem;
        forwardElem = null;
        }
        }
        function navBack()
        {
        if (bPrinting)
        return false;

        if (typeof(returnElem) == "object" &amp;&amp; returnElem != null)
        {
        returnElem.style.display = "block";
        curElem.style.display = "none";
        curElem = returnElem;
        returnElem = null;
        }
        }
        function hide(hideElem)
        {
        if (bPrinting)
        return false;

        document.getElementById(hideElem).style.display = "none";
        }
        function show(showElem)
        {
        if (bPrinting)
        return false;

        document.getElementById(showElem).style.display = "block";
        }
        function printProgram()
        {
        var loc = document.location.href;

        bPrinting = true;

        var coll = document.getElementsByTagName("span");
        if (coll != null)
        {
        if (typeof(coll.length) != "undefined")
        {
        for (i = 0; i &lt; coll.length; i++)
        {
        if (coll.item(i).className == "superScript")
        coll.item(i).style.display = "inline";	// don't make it 'block' or it appears on next line!
        }
        }
        else
        alert("oops span");
        }

        coll = document.getElementsByTagName("img");
        if (coll != null)
        {
        if (typeof(coll.length) != "undefined")
        {
        for (i = 0; i &lt; coll.length; i++)
        {
        coll.item(i).onclick = "";

        if (coll.item(i).className == "navigationImg")
        coll.item(i).style.display = "none";
        }
        }
        else
        alert("oops img");
        }

        coll = document.getElementsByTagName("INPUT");
        if (coll != null)
        {
        if (typeof(coll.length) != "undefined")
        {
        for (i = 0; i &lt; coll.length; i++)
        {
        coll.item(i).style.display = "none";
        }
        }
        else
        alert("oops idTocButton");
        }

        coll = document.getElementsByTagName("DIV");
        if (coll != null)
        {
        if (typeof(coll.length) != "undefined")
        {
        for (i = 0; i &lt; coll.length; i++)
        {
        if (coll.item(i).className == "chapterNavigationLayout")
        coll.item(i).style.display = "none";
        else
        coll.item(i).style.display = "block";
        }
        }
        else
        alert("oops DIV");
        }

        window.print();

        bPrinting = false;

        document.location = loc;
        }
        function pickedAnswer(questionDivName, feedbackDivName)
        {
        if (bPrinting)
        return false;

        var qDiv = document.getElementById(questionDivName);
        var fDiv = document.getElementById(feedbackDivName);
        qDiv.style.styleFloat = "left";
        fDiv.style.display = "block";
        fDiv.style.styleFloat = "left";
        }
    </xsl:template>

    <xsl:template name="AddOfflineStartTermLink">
        <xsl:text> class="offlineTermLinkText" href="javascript:void(0)" onClick="gotoElement('</xsl:text>
        <xsl:value-of select="@id"/>
        <xsl:text>Def', 'div</xsl:text>
        <xsl:value-of select="count(preceding::wc:Chapter)+1"/>
        <xsl:text>')" onmouseover="window.status='</xsl:text>
        <xsl:call-template name="BuildLocalizedString">
            <xsl:with-param name="KeyName" select="'Clickformore'"/>
        </xsl:call-template>
        <xsl:text>'; return true"</xsl:text>
    </xsl:template>


    <!-- End of Offline.xslt -->

    <!-- Add Layout here -->

</xsl:stylesheet>
